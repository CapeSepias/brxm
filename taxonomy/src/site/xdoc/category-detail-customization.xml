<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2009-2014 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC
    "-//Apache Software Foundation//DTD XDOC 1.0//EN"
    "http://maven.apache.org/dtd/xdoc_1_0.dtd">

<document>

<properties>
    <title>Category Detail Customization</title>
  </properties>
  <body>

    <section name="Taxonomy Category Detail View/Editor Customization">

      <p>
        In case you want to customize the taxonomy category info and its UI for specific requirements,
        you might want to consider extending the existing plugin classes and overriding some methods.
        Suppose you want to store additional fields such as 'Full Description' in each
        category node and allow users to view/edit the category detail with the additional fields.
        In order to fulfill this kind of customization requirements, the plugin Java classes are
        carefully designed and implemented so that you can replace the plugin configuration with your custom
        classes which extend/override the plugin classes.
      </p>

      <subsection name="Full Description Custom Field Example in the Demo Project">
        <p>
          In the Taxonomy Plugin Demo project, you can find a customization example which customizes
          the existing plugin classes in order to add 'full description' property in each localized category info
          node and allow viewing/editing the additional fields.
        </p>
        <p>
          The customized Taxonomy Plugin example codes and configurations are located
          in the 'plugin' module project, the artifactId of which is 'taxonomy-addon-demo-plugin',
          under the taxonomy-demo project.
        </p>
        <p>
          By default, the cms module project has a dependency on the 'taxonomy-addon-demo-plugin' project.
          So, the customized plugin codes are automatically activated in the CMS by this dependency
          (because the module injects configurations into repository through hippoecm-extension.xml).
          If you want to run the CMS without this customized codes, you can simply comment out the following dependency
          in the pom.xml of the cms module of the taxonomy-demo project.
        </p>

        <source><![CDATA[
    <!--
      The Customized Taxonomy Plugins and Configurations.
      If you don't want to use this customized plugins,
      please comment out the following dependency.
    -->
    <dependency>
      <groupId>org.onehippo.forge</groupId>
      <artifactId>taxonomy-addon-demo-plugin</artifactId>
      <version>${project.version}</version>
    </dependency>]]></source>

        <p>
          If you run the taxonomy-demo project, you will see the following screen when editing the taxonomy document in the CMS.
          Unlike the default taxonomy editor plugin, you can see the additional field, 'Full Description' there.
          This customized taxonomy editor plugin allows users to enter 'Full Description' field on each category,
          and the entered information is stored in the child localized nodes of the category node.
        </p>
        <div class="screenshot">
          <img src="custom-taxonomy-editor.png" alt="Custom Taxonomy Editor"/>
        </div>

        <p>
          Also, if you edit a document in the CMS and try to add a taxonomy into the document, then
          you will see the customized taxonomy picker dialog like the following screenshot.
          As you are able to edit an additional 'Full Description' field in the custom taxonomy editor plugin,
          you can see the field in the category detail panel on the right.
        </p>
        <div class="screenshot">
          <img src="custom-taxonomy-picker.png" alt="Custom Taxonomy Picker"/>
        </div>
      </subsection>

      <p>
        Now, let's look into the configurations and custom codes in detail.
      </p>

      <subsection name="Custom Taxonomy Editor Plugin Class">
        <p>
          The following configuration is found in 'plugin/src/main/resources/taxonomy-custom-editor.xml'
          in the taxonomy-demo project.
          This configuration is injected through hippoecm-extension.xml into
          '/hippo:namespaces/hippotaxonomy/taxonomy/editor:templates/_default_' configuration node,
          in order to replace the default taxonomy editor plugin.
        </p>

        <source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<sv:node sv:name="root"
  xmlns:frontend="http://www.onehippo.org/jcr/frontend/nt/2.0"
  xmlns:sv="http://www.jcp.org/jcr/sv/1.0"
  xmlns:h="http://www.onehippo.org/jcr/xmlimport"
  h:merge="combine">
  <sv:property sv:name="plugin.class" sv:type="String">
    <sv:value>org.onehippo.taxonomy.demo.plugin.AdditionalFieldCustomTaxonomyEditorPlugin</sv:value>
  </sv:property>
</sv:node>]]></source>

        <p>
          The source of the custom taxonomy editor plugin is like the following:
        </p>

        <source><![CDATA[
/**
 * AdditionalFieldCustomTaxonomyEditorPlugin
 * <P>
 * This extended plugin is an example to show how you can add a custom field
 * in the category editing page.
 * So, this extended plugin adds 'fulldescription' field in addition to the
 * 'description' field.
 * </P>
 * @version $Id$
 */
public class AdditionalFieldCustomTaxonomyEditorPlugin extends TaxonomyEditorPlugin {

    private static final long serialVersionUID = 1L;

    private final class FullDescriptionModel implements IModel<String> {
        private static final long serialVersionUID = 1L;

        public String getObject() {
            EditableCategory category = getCategory();

            if (category != null) {
                return category.getInfo(getCurrentLanguageSelection().getLanguageCode()).getString(CustomTaxonomyConstants.FULL_DESCRIPTION, "");
            }

            return null;
        }

        public void setObject(String object) {
            EditableCategoryInfo info = getCategory().getInfo(getCurrentLanguageSelection().getLanguageCode());

            try {
                info.setString(CustomTaxonomyConstants.FULL_DESCRIPTION, object);
            } catch (TaxonomyException e) {
                error(e.getMessage());
                redraw();
            }
        }

        public void detach() {
        }
    }

    public AdditionalFieldCustomTaxonomyEditorPlugin(IPluginContext context, IPluginConfig config) {
        super(context, config);

        final boolean editing = "edit".equals(config.getString("mode"));
        final Form container = getContainerForm();

        if (editing) {
            container.add(new TextAreaWidget("fulldescription", new FullDescriptionModel()));
        } else {
            container.add(new MultiLineLabel("fulldescription", new FullDescriptionModel()));
        }
    }

}]]></source>

        <p>
          The customization code simply extends the default TaxonomyEditorPlugin class
          and overrides the constructor to add a new UI component for the full description field.
          The other code lines are just for providing a model object for the new full description field
          and they are just copied from the description model of the base class.
        </p>
        <p>
          Since the parent class, TaxonomyEditorPlugin, has a html markup template containig &lt;wicket:child /&gt;,
          the child class such as AdditionalFieldCustomTaxonomyEditorPlugin can have additional UI components in its
          html markup template to extend the parent's markup html template.
        </p>
        <p>
          Here's the html markup snippet of the TaxonomyEditorPlugin template:
        </p>
          <source><![CDATA[
            <tr>
              <td><wicket:message key="description" />:</td>
              <td class="hippo-editor-field">
                <!-- SNIP -->
              </td>
            </tr>
            <wicket:child />
            <tr>
              <td><wicket:message key="synonyms" />:</td>
              <!-- SNIP -->
          ]]></source>
        <p>
          And, here's the html markup snippet of the AdditionalFieldCustomTaxonomyEditorPlugin template:
        </p>
          <source><![CDATA[
<html xmlns:wicket="http://wicket.apache.org/">
<wicket:extend>
  <tr>
    <td><wicket:message key="fulldescription" />:</td>
    <td class="hippo-editor-field">
      <div class="hippo-editor-field-subfield even">
        <div class="hippo-editor-field-subfield-item">
          <div class="hippo-editor-field-value">
            <div class="hippo-editor-field-value-container" wicket:id="fulldescription">[ full description ]</div>
          </div>
        </div>
      </div>
    </td>
  </tr>
</wicket:extend>
</html>]]></source>
        <p>
          A child class extending TaxonomyEditorPlugin class can extend html markups as shown above.
          In this way, you can add some extra fields in your custom Taxonomy Editor Plugin class by using
          the markup inheritance feature of Apache Wicket.
          See <a href="http://wicket.apache.org/learn/examples/markupinheritance.html" target="_blank">Creating layouts using markup inheritance</a>
          for detail.
        </p>
        <p>
          In the above example, the constructor just creates and adds a UI component for the full description field.
          As the base class does for the description field, it adds an editable field on editing.
          Otherwise, it adds a multi-line label instead.
        </p>
        <p>
          For this kind of UI customization purpose, the base class provides protected methods for the
          child classes, such as '#getContainerForm()' with which you can get access
          to the form UI container of the category detail pane.
          Please see the <a href="apidocs/index.html">JavaDocs API Documentation</a> for detail.
        </p>

      </subsection>

      <subsection name="Custom Taxonomy Picker Class">
        <p>
          We also need to customize the taxonomy picker plugin which is popped up when selection taxonomy categories
          in a document.
        </p>
        <p>
          The following configuration is found in 'plugin/src/main/resources/textpage-custom-taxonomy-field.xml'
          in the taxonomy-demo project.
          This configuration is injected through hippoecm-extension.xml into
          '/hippo:namespaces/taxonomydemo/textpage/editor:templates/_default_' configuration node,
          in order to replace the default taxonomy picker plugin.
        </p>

        <source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<sv:node
    xmlns:sv="http://www.jcp.org/jcr/sv/1.0"
    xmlns:h="http://www.onehippo.org/jcr/xmlimport"
    sv:name="taxonomy"
    h:merge="combine">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>frontend:plugin</sv:value>
  </sv:property>
  <sv:property sv:name="plugin.class" sv:type="String">
    <sv:value>org.onehippo.taxonomy.demo.plugin.AdditionalFieldCustomTaxonomyPickerPlugin</sv:value>
  </sv:property>
</sv:node>]]></source>

        <p>
          The source of the custom taxonomy picker plugin is like the following:
        </p>

        <source><![CDATA[
public class AdditionalFieldCustomTaxonomyPickerPlugin extends TaxonomyPickerPlugin {

    private static final long serialVersionUID = 1L;

    public AdditionalFieldCustomTaxonomyPickerPlugin(IPluginContext context, IPluginConfig config) {
        super(context, config);
    }

    @Override
    protected AbstractDialog<Classification> createPickerDialog(ClassificationModel model, String preferredLocale) {
        return new AdditionalFieldCustomTaxonomyPickerDialog(getPluginContext(), getPluginConfig(), model, preferredLocale);
    }


}]]></source>

        <p>
          The customization code simply extends the default TaxonomyPickerPlugin class
          and overrides the '#createPickerDialog(...)' method to create a custom dialog class,
          which also overrides '#addCategoryDetailFields(...)' method
          in order to add a multi-line label for the full description field.
        </p>
        <p>
          For this kind of UI customization purpose, the base classes provide protected methods for the
          child classes, such as '#createPickerDialog(...)' and '#addCategoryDetailFields(...)'
          with which you can create customize the dialog instance and add additional UI components
          into the category detail pane.
          Please see the <a href="apidocs/index.html">JavaDocs API Documentation</a> for detail.
        </p>
        <p>
          <em>
            Note: Since the plugin are based on Apache Wicket Framework, you will need to customize
            the template html pages accordingly.
            See the <a href="#Wicket_Template_Customization">Wicket Template Customization</a> section for detail.
          </em>
        </p>

      </subsection>

      <subsection name="Wicket Template Customization">
        <p>
          Since CMS Plugins are Apache Wicket based components, when you customize the UI of the plugin
          (e.g., adding a full description field in the detail pane), you have to add a corresponding
          markups in the html templates and resource strings.
        </p>
        <p>
          As shown above, you can use the markup inheritance feature of Apache Wicket where available.
          See <a href="http://wicket.apache.org/learn/examples/markupinheritance.html" target="_blank">Creating layouts using markup inheritance</a>
          for detail.
        </p>
        <p>
          You can find the customized taxonomy plugin html templates in the following source locations
          in the taxonomy-demo project:
        </p>
        <ul>
         <li>plugin/src/main/resources/org/onehippo/taxonomy/plugin/*.html</li>
         <li>plugin/src/main/resources/org/onehippo/taxonomy/plugin/*.properties</li>
        </ul>
        <p>
          Also, you can find the original markup templates and resources in the taxonomy-addon-frontend-x.x.x.jar.
        </p>
      </subsection>

    </section>
  </body>
</document>