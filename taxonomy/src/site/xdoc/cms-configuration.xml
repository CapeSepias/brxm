<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2009-2014 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!DOCTYPE document PUBLIC
    "-//Apache Software Foundation//DTD XDOC 1.0//EN"
    "http://maven.apache.org/dtd/xdoc_1_0.dtd">

<document>

<properties>
    <title>CMS configuration</title>
  </properties>
  <body>
    <section name="CMS configuration">
      <p>After having the <a href="install.html">correct dependencies installed</a>, you are ready to categorize a document
        with taxonomy terms.</p>

      <h3>Step 1 of 2: add a taxonomies node to /content</h3>
      <p>To existing node /content, add the taxonomies container node with a taxonomy subnode, for example this tree
        with name 'exampletaxonomy':</p>
      <source><![CDATA[
  <sv:node xmlns:sv="http://www.jcp.org/jcr/sv/1.0" sv:name="taxonomies">
    <sv:property sv:name="jcr:primaryType" sv:type="Name">
      <sv:value>hippotaxonomy:container</sv:value>
    </sv:property>
    <sv:node sv:name="exampletaxonomy">
      <sv:property sv:name="jcr:primaryType" sv:type="Name">
        <sv:value>hippo:handle</sv:value>
      </sv:property>
      <sv:property sv:name="jcr:mixinTypes" sv:type="Name">
        <sv:value>mix:referenceable</sv:value>
      </sv:property>
      <sv:node sv:name="exampletaxonomy">
        <sv:property sv:name="jcr:primaryType" sv:type="Name">
          <sv:value>hippotaxonomy:taxonomy</sv:value>
        </sv:property>
        <sv:property sv:name="jcr:mixinTypes" sv:type="Name">
          <sv:value>mix:referenceable</sv:value>
          <sv:value>hippostd:publishableSummary</sv:value>
        </sv:property>
        <sv:property sv:name="hippostd:holder" sv:type="String">
          <sv:value>admin</sv:value>
        </sv:property>
        <sv:property sv:name="hippostd:state" sv:type="String">
          <sv:value>published</sv:value>
        </sv:property>
        <sv:property sv:name="hippostdpubwf:createdBy" sv:type="String">
          <sv:value>admin</sv:value>
        </sv:property>
        <sv:property sv:name="hippostdpubwf:creationDate" sv:type="Date">
          <sv:value>2014-05-01T00:00:00.000+02:00</sv:value>
        </sv:property>
        <sv:property sv:name="hippostdpubwf:lastModifiedBy" sv:type="String">
          <sv:value>admin</sv:value>
        </sv:property>
        <sv:property sv:name="hippo:availability" sv:type="String" sv:multiple="true">
          <sv:value>live</sv:value>
          <sv:value>preview</sv:value>
        </sv:property>
        <sv:property sv:name="hippostd:stateSummary" sv:type="String">
          <sv:value>live</sv:value>
        </sv:property>
        <sv:property sv:name="hippostdpubwf:lastModificationDate" sv:type="Date">
          <sv:value>2014-05-01T00:00:00.000+02:00</sv:value>
        </sv:property>
        <!-- The supported locale names for each category in this taxonomy document -->
        <sv:property sv:name="hippotaxonomy:locales" sv:type="String" sv:multiple="true">
          <sv:value>en</sv:value>
          <sv:value>fr</sv:value>
        </sv:property>
      </sv:node>
    </sv:node>
  </sv:node>]]></source>

      <p>
        Please note that you have to add all the locale names if you want to support category localizations
        in a taxonomy document. See <a href="category-localization.html">Taxonomy Category Localization Support</a> for detail.
      </p>

      <p>You can also start with the <a href="https://forge.onehippo.org/svn/taxonomy/taxonomy-demo/trunk/content/src/main/resources/taxonomies.xml">example taxonomy tree</a>.</p>

      <h3>Step 2 of 2: Add the mixin 'hippotaxonomy:classifiable' to your document type</h3>

      <p>Add the mixin 'hippotaxonomy:classifiable' to the document type via the doctype editor.</p>

      <div class="screenshot">
        <img src="mixin-doctype-editor.png" alt="Add Mixin in Doctype editor"/>
      </div>

      <p>On repository level, the doctype editor will:<br/>
        - add a field 'classifiable' with a MixinLoaderPlugin to the document type at /hippo:namespaces/[yournamespace]/[yourdocument]/editor:templates/_default_/classifiable<br/>
        - add value 'hippotaxonomy:classifiable' to multi value property /hippo:namespaces/[yournamespace]/[yourdocument]/hipposysedit:nodetype/hipposysedit:nodetype@hipposysedit:supertype<br/>
        - add value 'hippotaxonomy:classifiable' to multi value property /hippo:namespaces/[yournamespace]/[yourdocument]/hipposysedit:prototypes/hipposysedit:prototype@jcr:mixinTypes
      </p>
      <p>Be sure these changes are reflected in your project as XML and taken through your environments on deployment!</p>

      <h3>Optional step 1: configure the CMS Taxonomy Editor</h3>

      <p>The behavior of the Taxonomy Editor tree can be configured at /hippo:namespaces/hippotaxonomy/taxonomy/editor:templates/_default_/root.<br/>
        When property <strong>keys.urlencode</strong> is set to <strong>true</strong>, generated key values will be URL encoded.</p>
      <source><![CDATA[
<sv:node sv:name="hippo:namespaces">
  ...
  <sv:node sv:name="hippotaxonomy">
    ...
    <sv:node sv:name="taxonomy">
      ...
      <sv:node sv:name="editor:templates">
        <sv:node sv:name="_default_">
          <sv:node sv:name="root">
            ...
            <!-- URL encoding flag when generating keys from labels -->
            <sv:property sv:name="keys.urlencode" sv:type="Boolean">
              <sv:value>false</sv:value>
            </sv:property>
          </sv:node>
        </sv:node>
      </sv:node>
    </sv:node>
  </sv:node>
</sv:node>]]></source>
      <h3>Optional step 2: write and configure category filter</h3>
      <div class="alert alert-info">Available since 1.11.02</div>
      <p>If you have a use case where you want to hide categories in certain circumstances, e.g. based on
        the current user or some data on the category node, you can create an implementation of
        the <code>JcrCategoryFilter</code> in your CMS.</p>
      <p>Please note that hiding categories for users A while showing them for users B may result in documents with
        category values on them that are unknown to the users A, resulting in "Invalid category key" in the taxonomy
        picker. The use case design has to solve that.</p>
      <source><![CDATA[import org.onehippo.taxonomy.plugin.api.JcrCategoryFilter;

/**
 * Category filter that hides categories if it doesn't have a certain property.
 */
public class MyCategoryFilter implements JcrCategoryFilter {
    @Override
    public boolean apply(final JcrCategory category, final HippoSession session) {
        // hide for author
        if (session.getUser().getId().equals("author")) {
            return false;
        }

        // hide based on absent property
        if (!category.getJcrNode().hasProperty("myproject:authorized")) {
          return false;
        }

        // OK
        return true;
    }
]]></source>
      <p>There is also a (non-configured) filter in the demo project,
        <a href="https://forge.onehippo.org/svn/taxonomy/taxonomy-demo/trunk/cms/src/main/java/org/onehippo/taxonomy/demo/HideForAuthorCategoryFilter.java">
          HideForAuthorCategoryFilter.java</a></p>
      <p>Configuration of such filter is in a property 'taxonomy.category.filters' on the taxonomy service at
        /hippo:configuration/hippo:frontend/cms/cms-services/taxonomyService.</p>
      <source><![CDATA[
<sv:node sv:name="hippo:configuration">
  ...
  <sv:node sv:name="hippo:frontend">
    ...
    <sv:node sv:name="cms">
      ...
      <sv:node sv:name="cms-services">
        <sv:node sv:name="taxonomyService">
          <sv:property sv:name="taxonomy.category.filters" sv:type="String">
            <!-- comma separated filter class names -->
            <sv:value>com.myproject.cms.taxonomy.MyCategoryFilter</sv:value>
          </sv:property>
        </sv:node>
      </sv:node>
    </sv:node>
  </sv:node>
</sv:node>]]></source>
    </section>
  </body>
</document>