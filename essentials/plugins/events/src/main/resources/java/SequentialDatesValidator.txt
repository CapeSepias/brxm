package {{projectPackage}}.validators;
/*
 * Copyright 2019 Hippo B.V. (http://www.onehippo.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.Calendar;
import java.util.Optional;

import javax.jcr.Node;
import javax.jcr.RepositoryException;
import javax.jcr.ValueFormatException;

import org.onehippo.cms.services.validation.api.ValidationContext;
import org.onehippo.cms.services.validation.api.Validator;
import org.onehippo.cms.services.validation.api.Violation;
import org.onehippo.repository.util.DateConstants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Validator to check if two dates are in sequence. If either property is missing or empty then no validation is done.
 * The validator must be configured on compound or document level.
 */
public class SequentialDatesValidator implements Validator<Node> {

    private static final Logger log = LoggerFactory.getLogger(SequentialDatesValidator.class);

    private static final String FIRST_DATE_PROPERTY = "firstDateProperty";
    private static final String SECOND_DATE_PROPERTY = "secondDateProperty";

    private String firstDateProperty = null;
    private String secondDateProperty = null;

    /**
     * Constructor with configuration node from which the names of the dates properties will be read. If no property
     * names are configured the validator will not work.
     *
     * @param config the validator's configuration node
     */
    public SequentialDatesValidator(final Node config) {
        try {
            firstDateProperty = config.getProperty(FIRST_DATE_PROPERTY).getString();
            secondDateProperty = config.getProperty(SECOND_DATE_PROPERTY).getString();
        } catch (RepositoryException e) {
            logWarning();
        }
        if (firstDateProperty == null || secondDateProperty == null) {
            logWarning();
        }
    }

    @Override
    public Optional<Violation> validate(final ValidationContext context, final Node node) {
        if (firstDateProperty == null || secondDateProperty == null) {
            return Optional.empty();
        }

        try {
            if (node.hasProperty(firstDateProperty) && node.hasProperty(secondDateProperty)) {
                final Calendar startDate = node.getProperty(firstDateProperty).getDate();
                final Calendar endDate = node.getProperty(secondDateProperty).getDate();
                if (startDate.getTime().equals(DateConstants.EMPTY_DATE)
                        || endDate.getTime().equals(DateConstants.EMPTY_DATE)) {
                    return Optional.empty();
                }
                if (!endDate.after(startDate)) {
                    return Optional.of(context.createViolation());
                }
            }
        } catch (ValueFormatException e) {
            log.warn("Cannot parse date value", e);
        } catch (RepositoryException e) {
            log.error("Error retrieving date values", e);
        }

        return Optional.empty();
    }

    private static void logWarning() {
        log.warn("Validator is missing configuration properties '{}' and/or '{}'.", FIRST_DATE_PROPERTY,
                SECOND_DATE_PROPERTY);
    }
}
