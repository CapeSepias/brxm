<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2014-2016 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->

<sv:node sv:name="Update image sets" xmlns:sv="http://www.jcp.org/jcr/sv/1.0">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>hipposys:updaterinfo</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:batchsize" sv:type="Long">
    <sv:value>10</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:description" sv:type="String">
    <sv:value>Essentials Script that runs after changes to Images Set Definitions in the Gallery Manager.</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:dryrun" sv:type="Boolean">
    <sv:value>false</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:parameters" sv:type="String">
    <sv:value/>
  </sv:property>
  <sv:property sv:name="hipposys:query" sv:type="String">
    <sv:value>content/gallery//element(*,hippogallery:imageset)</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:script" sv:type="String">
    <sv:value>package org.hippoecm.frontend.plugins.cms.admin.updater&#13;
      /*&#13;
      * Copyright 2014-2016 Hippo B.V. (http://www.onehippo.com)&#13;
      *&#13;
      * Licensed under the Apache License, Version 2.0 (the "License");&#13;
      * you may not use this file except in compliance with the License.&#13;
      * You may obtain a copy of the License at&#13;
      *&#13;
      *  http://www.apache.org/licenses/LICENSE-2.0&#13;
      *&#13;
      * Unless required by applicable law or agreed to in writing, software&#13;
      * distributed under the License is distributed on an "AS IS" BASIS,&#13;
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#13;
      * See the License for the specific language governing permissions and&#13;
      * limitations under the License.&#13;
      */&#13;
      import org.apache.commons.io.IOUtils&#13;
      import org.apache.jackrabbit.JcrConstants&#13;
      import org.hippoecm.frontend.plugins.gallery.processor.ScalingGalleryProcessor&#13;
      import org.hippoecm.frontend.plugins.gallery.imageutil.ScalingParameters&#13;
      import org.hippoecm.repository.gallery.HippoGalleryNodeType&#13;
      import org.onehippo.repository.update.BaseNodeUpdateVisitor&#13;
      &#13;
      import javax.jcr.Node&#13;
      import javax.jcr.NodeIterator&#13;
      import javax.jcr.RepositoryException&#13;
      import javax.jcr.Session&#13;
      &#13;
      /**&#13;
      * Groovy script to update image sets&#13;
      *&#13;
      * Query: content/gallery//element(*,hippogallery:imageset)&#13;
      *&#13;
      */&#13;
      class ImageSetUpdater extends BaseNodeUpdateVisitor {&#13;
      &#13;
      public static final String HIPPO_CONFIGURATION_GALLERY_PROCESSOR_SERVICE = "hippo:configuration/hippo:frontend/cms/cms-services/galleryProcessorService";&#13;
      &#13;
      protected static final String CONFIG_PARAM_WIDTH = "width";&#13;
      protected static final String CONFIG_PARAM_HEIGHT = "height";&#13;
      protected static final String CONFIG_PARAM_UPSCALING = "upscaling";&#13;
      &#13;
      protected static final Long DEFAULT_WIDTH = 0L;&#13;
      protected static final Long DEFAULT_HEIGHT = 0L;&#13;
      protected static final Boolean DEFAULT_UPSCALING = false;&#13;
      &#13;
      private final Map&lt;String, ScalingParameters&gt; imageVariants = new HashMap&lt;String, ScalingParameters&gt;();&#13;
      &#13;
      private boolean overwrite = true;&#13;
      &#13;
      public void initialize(Session session) throws RepositoryException {&#13;
      try {&#13;
      Node configNode = session.getRootNode().getNode(HIPPO_CONFIGURATION_GALLERY_PROCESSOR_SERVICE);&#13;
      getImageVariants(configNode);&#13;
      &#13;
      } catch (RepositoryException e) {&#13;
      log.error("Exception while retrieving imageset variants configuration", e);&#13;
      }&#13;
      }&#13;
      &#13;
      &#13;
      boolean doUpdate(Node node) {&#13;
      try {&#13;
      log.info(node.path)&#13;
      processImageSet(node);&#13;
      return true;&#13;
      } catch (RepositoryException e) {&#13;
      log.error("Failed in generating image variants", e);&#13;
      node.getSession().refresh(false)&#13;
      }&#13;
      return false;&#13;
      }&#13;
      &#13;
      @Override&#13;
      boolean undoUpdate(final Node node) throws RepositoryException, UnsupportedOperationException {&#13;
      return false&#13;
      }&#13;
      &#13;
      private void processImageSet(Node node) throws RepositoryException {&#13;
      Node original;&#13;
      if (node.hasNode(HippoGalleryNodeType.IMAGE_SET_ORIGINAL)) {&#13;
      original = node.getNode(HippoGalleryNodeType.IMAGE_SET_ORIGINAL);&#13;
      } else {&#13;
      original = node.getNode(HippoGalleryNodeType.IMAGE_SET_THUMBNAIL);&#13;
      }&#13;
      &#13;
      for (String variantName : imageVariants.keySet()) {&#13;
      try {&#13;
      processVariant(node, original, variantName);&#13;
      } catch (RepositoryException e) {&#13;
      log.error("Failed in generating image variant " + variantName, e);&#13;
      node.getSession().refresh(false)&#13;
      }&#13;
      }&#13;
      }&#13;
      &#13;
      private void processVariant(Node node, Node original, String variantName) throws RepositoryException {&#13;
      /* hippogallery:thumbnail is the only required image variant, not hippogalley:original according to the hippogallery cnd */&#13;
      if (!HippoGalleryNodeType.IMAGE_SET_THUMBNAIL.equals(variantName)) {&#13;
      &#13;
      final ScalingParameters scalingParameters = imageVariants.get(variantName);&#13;
      if (scalingParameters == null) {&#13;
      log.warn("No scalingParameters available for image variant {}. Skipping node {}", variantName, node.getPath());&#13;
      return;&#13;
      }&#13;
      &#13;
      Node variant;&#13;
      if (node.hasNode(variantName)) {&#13;
      if (!overwrite) {&#13;
      log.info("Skipping existing variant {} of node {}", variantName, node.getPath());&#13;
      return;&#13;
      }&#13;
      variant = node.getNode(variantName);&#13;
      } else {&#13;
      variant = node.addNode(variantName, HippoGalleryNodeType.IMAGE);&#13;
      }&#13;
      &#13;
      createImageVariant(node, original, variant, scalingParameters);&#13;
      &#13;
      node.getSession().save();&#13;
      }&#13;
      }&#13;
      &#13;
      private void createImageVariant(Node node, Node original, Node variant, ScalingParameters scalingParameters) throws RepositoryException {&#13;
      &#13;
      InputStream dataInputStream = null;&#13;
      &#13;
      try {&#13;
      dataInputStream = original.getProperty(JcrConstants.JCR_DATA).getBinary().getStream();&#13;
      String mimeType = original.getProperty(JcrConstants.JCR_MIMETYPE).getString();&#13;
      &#13;
      ScalingGalleryProcessor scalingGalleryProcessor = new ScalingGalleryProcessor();&#13;
      &#13;
      scalingGalleryProcessor.addScalingParameters(variant.getName(), scalingParameters);&#13;
      scalingGalleryProcessor.initGalleryResource(variant, dataInputStream, mimeType, "", Calendar.getInstance());&#13;
      &#13;
      log.info("Image variant {} generated for node {}", variant.getName(), node.getPath());&#13;
      } finally {&#13;
      IOUtils.closeQuietly(dataInputStream);&#13;
      }&#13;
      }&#13;
      &#13;
      private void getImageVariants(Node configNode) throws RepositoryException {&#13;
      NodeIterator variantNodes = configNode.getNodes();&#13;
      &#13;
      while (variantNodes.hasNext()) {&#13;
      Node variantNode = variantNodes.nextNode();&#13;
      String variantName = variantNode.getName();&#13;
      &#13;
      // hippogallery:thumbnail is the only required image variant according to the hippogallery.cnd&#13;
      // so no regeneration for that one, neither take the original into account&#13;
      if (!(HippoGalleryNodeType.IMAGE_SET_THUMBNAIL.equals(variantName) ||&#13;
      HippoGalleryNodeType.IMAGE_SET_ORIGINAL.equals(variantName))) {&#13;
      &#13;
      Long width = variantNode.hasProperty(CONFIG_PARAM_WIDTH) ? variantNode.getProperty(CONFIG_PARAM_WIDTH).getLong() : DEFAULT_WIDTH;&#13;
      Long height = variantNode.hasProperty(CONFIG_PARAM_HEIGHT) ? variantNode.getProperty(CONFIG_PARAM_HEIGHT).getLong() : DEFAULT_HEIGHT;&#13;
      Boolean upscaling = variantNode.hasProperty(CONFIG_PARAM_UPSCALING) ? variantNode.getProperty(CONFIG_PARAM_UPSCALING).getBoolean() : DEFAULT_UPSCALING;&#13;
      &#13;
      Object[] objects = [variantName, width, height, upscaling];&#13;
      log.info("Registered image set variant '{}' with width={}, height={} and upscaling={}", objects);&#13;
      &#13;
      ScalingParameters scalingParameters = new ScalingParameters(width.intValue(), height.intValue(), upscaling);&#13;
      imageVariants.put(variantName, scalingParameters);&#13;
      }&#13;
      }&#13;
      }&#13;
      }</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:throttle" sv:type="Long">
    <sv:value>1000</sv:value>
  </sv:property>
</sv:node>
