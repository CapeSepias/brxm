<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2010-2018 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.onehippo.cms7</groupId>
    <artifactId>hippo-project-archetype-parent</artifactId>
    <version>13.1.0-docker-SNAPSHOT</version>
  </parent>

  <name>BloomReach CMS Project Archetype</name>
  <description>This project enables you to start with a skeleton project
    gluing together all the necessary components and compatible versions.
  </description>

  <artifactId>hippo-project-archetype</artifactId>
  <packaging>maven-archetype</packaging>

  <repositories>
    <repository>
      <id>hippo</id>
      <name>Hippo Maven 2</name>
      <url>https://maven.onehippo.com/maven2/</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <updatePolicy>never</updatePolicy>
      </releases>
    </repository>
  </repositories>

  <scm>
    <connection>scm:git:https://code.onehippo.org/cms-community/hippo-project-archetype.git</connection>
    <developerConnection>scm:git:git@code.onehippo.org:cms-community/hippo-project-archetype.git</developerConnection>
    <url>https://code.onehippo.org/cms-community/hippo-project-archetype</url>
  </scm>

  <properties>
    <ant.version>1.9.4</ant.version>
    <junit.version>4.11</junit.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>

  <build>
    <defaultGoal>package</defaultGoal>
    <extensions>
      <extension>
        <groupId>org.apache.maven.archetype</groupId>
        <artifactId>archetype-packaging</artifactId>
        <version>${maven.archetype.plugin.version}</version>
      </extension>
    </extensions>

    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>make shared resources</id>
            <goals>
              <goal>single</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <descriptors>
                <descriptor>src/main/assembly/resources.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant</artifactId>
            <version>${ant.version}</version>
          </dependency>
          <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant-junit</artifactId>
            <version>${ant.version}</version>
          </dependency>
          <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant-junit4</artifactId>
            <version>${ant.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <configuration>
              <target>
                <replace summary="true" failOnNoReplacements="true" token= "@project.version@" value="${project.version}" dir="${project.build.outputDirectory}/archetype-resources">
                  <include name="pom.xml"/>
                </replace>
                <replace token= "@release.essentials.version@" value="${release.essentials.version}" dir="${project.build.outputDirectory}/archetype-resources">
                  <include name="pom.xml"/>
                </replace>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <id>Rename webfile bundle dir</id>
            <phase>process-resources</phase>
            <configuration>
              <target name="moveDirs">
                <move file="${project.build.outputDirectory}/archetype-resources/repository-data/webfiles/src/main/resources/__rootArtifactId__"
                      tofile="${project.build.outputDirectory}/archetype-resources/repository-data/webfiles/src/main/resources/site" includeEmptyDirs="yes" verbose="true"/>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <id>Docker build the image</id>
            <phase>integration-test</phase>
            <configuration>
              <target name="dockerBuild">
                <condition property="executableType" value="cmd" else="sh">
                  <os family="windows" />
                </condition>
                <condition property="executableCommand" value="/c" else="-c">
                  <os family="windows" />
                </condition>
                <exec dir="${project.build.directory}/test-classes/projects/gettingstarted/project/gettingstarted"
                  executable="${executableType}">
                  <arg value="${executableCommand}"/>
                  <arg value="mvn -Pdocker.build"/>
                </exec>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <id>Docker run the image</id>
            <phase>integration-test</phase>
            <configuration>
              <target name="dockerRun">
                <condition property="executableType" value="cmd" else="sh">
                  <os family="windows" />
                </condition>
                <condition property="executableCommand" value="/c" else="-c">
                  <os family="windows" />
                </condition>
                <exec dir="${project.build.directory}/test-classes/projects/gettingstarted/project/gettingstarted"
                  executable="${executableType}" spawn="true">
                  <arg value="${executableCommand}"/>
                  <arg value="mvn -Pdocker.run -Ddb.profile=h2"/>
                </exec>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <execution>
            <id>Docker test the container</id>
            <phase>integration-test</phase>
            <configuration>
              <target name="dockerTest">
                <condition property="executableType" value="cmd" else="sh">
                  <os family="windows" />
                </condition>
                <condition property="executableCommand" value="/c" else="-c">
                  <os family="windows" />
                </condition>
                <junit printsummary="on" haltonfailure="no" fork="true" failureProperty="test.failed" logfailedtests="true">
                  <classpath id="classpath.test">
                    <pathelement location="${org.hamcrest:hamcrest-core:jar}" />
                    <pathelement location="target/test-classes" />
                  </classpath>
                  <formatter type="brief" usefile="false" />
                  <batchtest>
                    <fileset dir="target/test-classes" excludes="projects/**" includes="**/*.class" />
                  </batchtest>
                </junit>
                <exec executable="${executableType}">
                  <arg value="${executableCommand}"/>
                  <arg value="docker kill $(docker ps -q --filter 'name=gettingstarted-1')"/>
                </exec>
                <exec executable="${executableType}">
                  <arg value="${executableCommand}"/>
                  <arg value="docker rm $(docker ps -a -q --filter 'name=gettingstarted-1')"/>
                </exec>
                <fail message="Test failure detected, check test results." if="test.failed" />
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-archetype-plugin</artifactId>
        <version>${maven.archetype.plugin.version}</version>
        <extensions>true</extensions>
        <configuration>
          <skip>${skipITs}</skip>
        </configuration>     
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.7</version>
        <executions>
          <execution>
            <!-- copy the Getting Started app to target/gettingstarted in the install phase -->
            <id>copy-resources</id>
            <phase>install</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/gettingstarted</outputDirectory>
              <resources>          
                <resource>
                  <directory>${project.build.directory}/test-classes/projects/gettingstarted/project/gettingstarted</directory>
                </resource>
              </resources>
              <includeEmptyDirs>true</includeEmptyDirs>
            </configuration>            
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
