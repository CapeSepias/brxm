/hippo:configuration/hippo:update/hippo:queue/UpdateDocumentValidatorConfiguration:
  jcr:primaryType: hipposys:updaterinfo
  hipposys:batchsize: 10
  hipposys:description: Updates and checks the namespaces validator configuration
    to match the validation setup from version 13.3.0. See the information in the
    Log after the script has run. Uncomment some lines in the script to get some more
    information (see script).
  hipposys:dryrun: false
  hipposys:loglevel: DEBUG
  hipposys:parameters: ''
  hipposys:query: /jcr:root/hippo:namespaces//element(*, hipposysedit:field)
  hipposys:script: "/*\r\n * Copyright 2019 Hippo B.V. (http://www.onehippo.com)\r\
    \n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\
    \n * you may not use this file except in compliance with the License.\r\n * You\
    \ may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\
    \n *\r\n * Unless required by applicable law or agreed to in writing, software\r\
    \n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *\
    \ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\
    \ * See the License for the specific language governing permissions and\r\n *\
    \ limitations under the License.\r\n */\r\n\r\npackage org.hippoecm.frontend.plugins.cms.admin.updater\r\
    \n\r\nimport org.onehippo.repository.update.BaseNodeUpdateVisitor\r\nimport javax.jcr.Node\r\
    \nimport javax.jcr.RepositoryException\r\nimport javax.jcr.Session\r\n\r\nclass\
    \ UpdateDocumentValidatorConfiguration extends BaseNodeUpdateVisitor {\r\n\r\n\
    \    boolean logSkippedNodePaths() {\r\n        return false // don't log skipped\
    \ node paths\r\n    }\r\n\r\n    boolean skipCheckoutNodes() {\r\n        return\
    \ false // return true for readonly visitors and/or updates unrelated to versioned\
    \ content\r\n    }\r\n\r\n    Node firstNode(final Session session) throws RepositoryException\
    \ {\r\n        return null // implement when using custom node selection/navigation\r\
    \n    }\r\n\r\n    Node nextNode() throws RepositoryException {\r\n        return\
    \ null // implement when using custom node selection/navigation\r\n    }\r\n\r\
    \n    boolean doUpdate(Node node) {\r\n        if (!node.hasProperty(\"hipposysedit:validators\"\
    )) {\r\n            return false\r\n        }\r\n\r\n        def logLines = []\r\
    \n\r\n        def validatorsOriginal = readValidators(node)\r\n        logLines\
    \ << \"Existing validators      : ${validatorsOriginal.toString()}\"\r\n\r\n \
    \       // replace resource-required -> required\r\n        def validators = replaceResourceRequired(validatorsOriginal)\r\
    \n        logLines << \"Without resource-required: ${validators.toString()}\"\r\
    \n        \r\n        // fix required & non-empty combination\r\n        validators\
    \ = removeNonEmptyValidator(validators)\r\n        logLines << \"Without non-empty\
    \        : ${validators.toString()}\"\r\n\r\n        // log warning for non-empty\
    \ only\r\n        logNonEmptyWarning(validators, node.path)\r\n\r\n        //\
    \ fix non-empty for Html fields\r\n        if (!node.getProperty(\"hipposysedit:type\"\
    )) {\r\n            log.warn \"Field node with validators but without type! Cannot\
    \ check this node: ${node.path}\"\r\n        } else {\r\n            def type\
    \ = node.getProperty(\"hipposysedit:type\").string\r\n            if (type ==\
    \ 'Html') {\r\n                validators = updateNonEmtpyValidator(validators)\r\
    \n                logLines << \"Fixed html fields        : ${validators.toString()}\"\
    \r\n            }\r\n        }\r\n\r\n        // set the property\r\n        if\
    \ (!validatorsOriginal.equals(validators)) {\r\n            log.debug \"Updating\
    \ node ${node.path}\"\r\n            logLines.each { log.debug \"${it}\" }\r\n\
    \            String[] strings = validators.toArray(new String[0])\r\n        \
    \    node.setProperty(\"hipposysedit:validators\", strings)\r\n            return\
    \ true\r\n        }\r\n\r\n        // Uncomment these lines for more logging\r\
    \n        // log.debug \"Unchanged node ${node.path}\"\r\n        // logLines.each\
    \ { log.debug \"${it}\" }\r\n        return false\r\n    }\r\n\r\n    static List<String>\
    \ readValidators(Node node) {\r\n        def validatorsProperty = node.getProperty(\"\
    hipposysedit:validators\")\r\n        def values = validatorsProperty.getValues()\r\
    \n        def validators = []\r\n        values.each { validators << it.string\
    \ }\r\n        return validators\r\n    }\r\n\r\n    static List<String> updateNonEmtpyValidator(validators)\
    \ {\r\n        return validators.collect { item -> return item == 'non-empty'\
    \ ? 'non-empty-html' : item }.unique()\r\n    }\r\n\r\n    static List<String>\
    \ replaceResourceRequired(validators) {\r\n        return validators.collect {\
    \ item -> return item == 'resource-required' ? 'required' : item }.unique()\r\n\
    \    }\r\n    \r\n    static List<String> removeNonEmptyValidator(validators)\
    \ {\r\n        if (validators.contains('required') && validators.contains('non-empty'))\
    \ {\r\n            validators.remove('non-empty')\r\n        }\r\n        return\
    \ validators\r\n    }\r\n\r\n    void logNonEmptyWarning(validators, path) {\r\
    \n        if (validators.contains('non-empty') && !validators.contains('required')\
    \ && !validators.contains('optional')) {\r\n            log.warn \"Html field\
    \ with only a 'non-empty' validator. Consider using 'required' or 'optional' instead:\
    \ ${path}\"\r\n        }\r\n    }\r\n    \r\n    boolean undoUpdate(Node node)\
    \ {\r\n        throw new UnsupportedOperationException('Updater does not implement\
    \ undoUpdate method')\r\n    }\r\n\r\n}"
  hipposys:throttle: 1000
