  ------------------------
  Candidate Component List
  ------------------------
  ------------------------

Candidate component list

  Below is a list of components that can possibly be used for the implementation of Hippo Repository 2. The list is divided into the following categories:

  * {{Glue}}

  * {{Security}}

    * {{Authentication}}

    * {{Authorization}}

  * {{Configuration}}

  * {{Schema and data}}

  * {{RPC}}

  * {{Search engines}}

  []

  The suffix <<<(HRP)>>> means it was built for the experimental Hippo Repository 2 prototype.

{Glue}

* Guice

  {{{http://code.google.com/p/google-guice/}Guice}} is a dependency injection framework based on annotations and generics.

** Cons

  * Matches dependencies based on static information: type and annotations

  * Mixes configuration with code

* HiveMind

  {{{http://hivemind.apache.org}HiveMind}}

** Cons

  * Metadata-based, so we have to write metadata for non-HiveMind components

* Mulatrecon

  Mulatrecon is a framework that performs two tasks:

  * Creation and glueing of components

  * Class loader management

  []

  It supports layered configurations where higher layers can override definitions of lower layers.

  How components should be created and glued together is defined in scripts written in Java.

  One of the most powerful features of Mulatrecon are the support for adapters. A component can be written without knowledge about its deployment environment. The reverse is also true: a deployment environment can be written without knowledge about future components that will be deployed in it. When a component is deployed, an adapter is written that ensures that the component is supplied with its dependencies.

** Pros

  * Leverage existing Java knowledge

  * Components never have to depend on Mulatrecon

  * No metadata needed, i.e. deploy standard JARs

  * Very flexible

  * Overridable allowing extensible applications

** Cons

   * non-standard

   * very verbose and complex to manage

   * no (ui/editor) configuration support

* OSGi

  {{{http://www.osgi.org/}OSGi}}\
  {{{http://cwiki.apache.org/FELIX/index.html/}Felix}}\
  {{{http://www.knopflerfish.org/}Knopflerfish}}

** Pros

  * open standard

  * several open source implementations available (Felix, Knopflerfish)

  * Very powerful class loading management

  * Eclipse plugins support

  * Springframework support {{{http://www.springframework.org/osgi/}Spring-OSGi}}

** Cons

  * Metadata-based, so we have to write metadata for non-OSGi components

* Spring Framework

  {{{http://www.springframework.org/}Spring Framework}}

** Pros

  * Enormous community

  * Strong tool support

  * OSGi support

** Cons

  * Strict lifecycle requiring wrappers for many standard components. This has the following disadvantages:

    * Two APIs have to be learned: of the component and of the wrapper

    * Wrapper functionality lags behind component functionality. If the wrapper is not developed in-house, it could take a while before the lag has been resolved

{Security}

* {Authentication}

** Acegi Security

  {{{http://www.acegisecurity.org/}Acegi Security}}

** A-Select

  {{{http://www.a-select.org}A-Select}}

*** Pros

  * HTML-based which allows applications in languages other than Java to login too

  * Pluggable authentication service providers

  * Clusterable

  * Federations

*** Cons

  * Complex

  * Only implemented by Dutch companies and institutions

  * Little to no response on mailing list

** Shibboleth

  {{{http://shibboleth.internet2.edu/}Shibboleth}}

*** Pros

  * Implemented by many organizations

*** Cons

  * Even more complex than A-Select

* {Authorization}

** Acegi Security

  {{{http://www.acegisecurity.org/}Acegi Security}}

** Java-scripted (HRP)

  This authorization framework bases access on two rules. The second rule is optional:

  * Does the subject have the correct role for the resource that is being accessed?

  * Is the resource in the correct state?

  []

  The rules are written in scripts written in Java.

*** Pros

  * Leverage existing Java knowledge

  * Fine-grained authorization (parameter and return values)

  * Very flexible

{Configuration}

  A complex application has many configuration parameters. It must be easy for an administrator to configure the application.

* Commons Configuration

  {{{http://jakarta.apache.org/commons/configuration/}Commons Configuration}}

* Database configuration (HRP)

  The database configuration stores configuration values in a table in the database. One table contains the values for multiple hosts and multiple applications.

  The values can be edited with a special configuration web application. In addition to the input field for a value, the web application also provides help and an explanation of when the value is required for each value.

** Pros

  * Configure multiple hosts from one webapp

  * User friendly configuration editor

** Cons

  * More complex configuration stored on filesystem has to be modified separately

{Schema and data}

  Depending on the object model, schema and data must be migrated between releases of an application.

* Schema sync (HRP)

  The schema sync framework makes it easy to write table definitions and migration steps in Java.

** Pros

  * Single definition for multiple databases

  * All revisions are available all the time

  * Controlled and testable migration path

  * Configurable table prefixes

** Cons

  * No SQL script, i.e. an application has to be run

  * Migration which skips a number of revisions needs to go through all migration steps that lie between

{RPC}

  Hippo Repository 2 is a server that must be accessible by many client applications. Some access can be done using standard protocols like WebDAV and JCR, but not all functionality can be exposed through these protocols. For functionality that does not fit into standard protocols one or more RPC interfaces are needed.

* Apache Axis

  {{{http://ws.apache.org/axis/}Apache Axis}} is a SOAP implementation.

* Apache XML-RPC

  {{{http://ws.apache.org/xmlrpc/}Apache XML-RPC}}

* Burlap

  {{{http://www.caucho.com/resin-3.0/protocols/burlap.xtp}Burlap}} is a XML-based web services protocol which uses HTTP for transport.

* Hessian

  {{{http://www.caucho.com/resin-3.0/protocols/hessian.xtp}Hessian}} is a binary web services protocol which uses HTTP for transport.

* JBoss Remoting

  {{{http://labs.jboss.org/portal/jbossremoting}JBoss Remoting}}

** Cons

  * Java-specific

* Service registry (HRP)

  The service registry is a set of components that allow services to be written without having to deal with transactions and authentication. These <aspects> are added to services by decorating the service registry.

  The service registry uses the following implementations for the protocols that it supports:

  * RMI: {{{http://static.springframework.org/spring/docs/2.0.x/reference/remoting.html#remoting-rmi}Spring RMI service exporter}}

  * SOAP: {{{http://xfire.codehaus.org/}XFire}}

  * XML-RPC: {{{http://ws.apache.org/xmlrpc/}Apache XML-RPC}}

  []

  Please note that additional protocols can have implications for how the services and their parameter and result objects have to be written.

** Pros

  * Single registry for multiple protocols

  * Supported protocols: RMI, XML-RPC, SOAP

  * <Aspects> can be added by decorating service registries

  * Client code for different protocols almost identical

* Spring RMI service exporter

 {{{http://static.springframework.org/spring/docs/2.0.x/reference/remoting.html#remoting-rmi}Spring RMI service exporter}}

** Pros

  * No need to extend interface <<<Remote>>>

  * No need for the RMI compiler

** Cons

  * Exported objects do not implement custom interface

  * Java-specific


* Thrift

  {{{http://developers.facebook.com/thrift/}Thrift}}

** Pros

  * Supports multiple programming languages

** Cons

  * Newcomer

* XFire

  {{{http://xfire.codehaus.org}XFire}} is a SOAP implementation.

{Search engines}

* Egothor

  {{{http://www.egothor.org}Egothor}}

* Lucene

  {{{http://lucene.apache.org/java/docs/}Lucene}}
