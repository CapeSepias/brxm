<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2007 Hippo
  
  Licensed under the Apache License, Version 2.0 (the  "License"); 
  you may not use this file except in compliance with the License. 
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" 
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
  See the License for the specific language governing permissions and 
  limitations under the License.
-->
<document>
    <properties>
        <title>Developing with Eclipse</title>
    </properties>
    <body>
      
      <section name="Building with Eclipse"></section>

        <section name="Prepare">
            <p>
                Follow all steps documented on the <a href="maven.html">Developing with Maven</a> page.
                Don't continue with the instructions on this page before you have seen a running application.
            </p>
        </section>

        <section name="Configure Eclipse">
            <p>Install the Eclipse Subversion Plugin</p>
            <ol>
                <li>Help -&gt; Software Updates -&gt; Find and Install...</li>
                <li>Search for new features to install</li>
                <li>New remote site</li>
                <li>Name='Subversive' URL='http://www.polarion.org/projects/subversive/download/1.1/update-site/'</li>
                <li>Finish the wizard</li>
            </ol>
            <p>Configure the Eclipse Subversion Plugin</p>
            <ol>
                <li>Window -&gt; Preferences -&gt; Team -&gt; SVN</li>
                <li>Select 'SVN Client' tab</li>
                <li>Set 'SVN Client' to 'SVN Kit'</li>
                <li>Apply changes and close the dialog</li>
            </ol>
            <p>Install Jetty</p>
            <ol>
                <li>
                    <a href="http://docs.codehaus.org/display/JETTY/Downloading+and+Installing">
                    Download and install</a> Jetty version >= 6.0
                </li>
            </ol>
            <p>Install Eclipse Jetty Plugin</p>
            <ol>
                <li>Help -&gt; Software Updates -&gt; Find and Install...</li>
                <li>Search for new features to install</li>
                <li>New remote site</li>
                <li>Name='Jetty launcher' URL='http://dbpowder.sourceforge.net/etc/jettylauncher6/updates/'</li>
                <li>Finish the wizard</li>
            </ol>
            <p>Install the Eclipse RMI Plugin</p>
            <ol>
                <li>Help -&gt; Software Updates -&gt; Find and Install...</li>
                <li>Search for new features to install</li>
                <li>New remote site</li>
                <li>Name='RMI plugin' URL='http://www.genady.net/rmi/v20/update/'</li>
                <li>Finish the wizard</li>
            </ol>
            <p>Install the Eclipse JPOX Plugin</p>
            <ol>
                <li>Help -&gt; Software Updates -&gt; Find and Install...</li>
                <li>Search for new features to install</li>
                <li>New remote site</li>
                <li>Name='JPOX launcher' URL='http://www.jpox.org/downloads/eclipse-update/'</li>
                <li>Finish the wizard</li>
                <li>Window -&gt; Preferences</li>
                <li>Select JPOX Eclipse Plugin -&gt; General</li>
		        <li>Add the jars for jpox-core, jpox-enhancer and bcel to the classpath.  Currently
                    the version 1.2.0-beta-2 is used for JPOX and 5.1 for BCEL; to maintain
                    consistency with the maven build, check these values in the jpox-maven-plugin
                    pom file.</li>
            </ol>
        </section>

        <section name="Create Eclipse projects">
            <p>
                Generate eclipse project files
            </p>
            <dl>
                WARNING: Make sure that there is no .project file in the toplevel (hippo-ecm) directory
                before proceding. If there is one the eclipse import projects wizard will fail.
            </dl>
            <source>
~/> cd hippo-ecm
~/hippo-ecm> mvn install                
~/hippo-ecm> mvn eclipse:eclipse
            </source>
            <ol>
                <li>
                    Start eclipse, the workspace directory can be any directory EXCEPT the directory
                    under which you have checked out the source (~/hippo-ecm in the example)
                </li>
                <li>Run the import project wizard: File -&gt; Import -&gt; General -&gt; Existing Projects into Workspace</li>
                <li>Press 'Browse'</li>
                <li>Select the 'hippo-ecm' directory, press OK</li>
                <li>All hippo-ecm projects should be listed</li>
                <li>Press 'Finish'</li>
            </ol>
        </section>

        <section name="Jetty launcher">
            <p>
                <a href="http://jettylauncher.sourceforge.net/docs/quickstart.html">Create Jetty
                launcher configurations</a> for the projects
                hippo-ecm-application-reviewed-action-repository and
                hippo-ecm-application-reviewed-action-frontend.
                As a convention use port 8081 for the repository and 8082 for the frontend.
            </p>
        </section>

        <section name="Manual configuration update">
            <subsection name="Repository application">
                <p>Update the repository application config update:</p>
                <ol>
                    <li>Open the debug configuration panel (e.g. Run -&gt; Debug)</li>
                    <li>Set the webapp dir to src/main/webapp</li>
                    <li>Set the port to 8081</li>
                    <li>Add <code>-Djava.rmi.server.codebase="file://&lt;path-to-jackrabbit&gt;/jackrabbit-jcr-rmi-1.4.jar file://&lt;path-to-jcr&gt;/jcr-1.0.jar file://&lt;add-on-project&gt;/target/classes/"</code>
                      to the VM Arguments (tab "Arguments").  Use full local filesystem paths, e.g. file:///home/developer/.m2/repository/org/apache/jackrabbit/jackrabbit-jcr-rmi/1.4-r593117/jackrabbit-jcr-rmi-1.4-r593117.jar.</li>
                </ol>
                <p>
                    The project hippo-ecm-repository-application must be added as a required project
                    to hippo-ecm-application-reviewed-action-repository.  (this is due a bug in the
                    maven eclipse plugin; maven dependencies of type war are not converted to
                    eclipse project depencies)
                </p>
                <p>
                    Projects that provide document types (hippoecm-repository-engine,
                    hippo-ecm-addon-sample-repository, hippo-ecm-addon-reviewed-action-repository)
                    must be enhanced by the JPOX plugin.  
                    Right-click the project -&gt; JPOX -&gt; Add JPOX Support.  To enable
                    auto-enhancement, right-click -&gt; JPOX -&gt; Enable Auto-Enhancement.
                </p>
                <p>
                    For projects that provide objects that can be accessed remotely,
                    (hippo-ecm-repository-engine, hippo-ecm-repository-application,
                    hippo-ecm-addon-sample-repository, hippo-ecm-addon-reviewed-action-repository)
                    stubs must be created by rmic.  The plugin can be used to do this; right-click
                    project -&gt; RMI -&gt; Enable Stubs generation.
                </p>
            </subsection>

            <subsection name="Frontend application">
                <p>Update the frontend application config update:</p>
                <ol>
                    <li>Open the debug configuration panel (e.g. Run -&gt; Debug)</li>
                    <li>Set the webapp dir to src/main/webapp</li>
                    <li>Set the port to 8082</li>
                    <li>Add <code>-Djava.security.manager
                      -Djava.security.policy=&lt;path-to-project&gt;/src/main/webapp/WEB-INF/client.policy</code>
                      to the VM Arguments (tab "Arguments")</li>
                </ol>
                <p>
                    The project hippoecm-frontend-application must be added to the frontend
                    application hippo-ecm-application-reviewed-action-frontend as a required project.
                    (a war type dependency)
                </p>
            </subsection>
        </section>

        <section name="Run">
            <p>
                You can now debug the frontend and repository applications at the same time, within
                Eclipse.
            </p>
        </section>

    </body>
</document>


