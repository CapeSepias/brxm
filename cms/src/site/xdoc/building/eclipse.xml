<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2007 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
    <properties>
        <title>Building with Eclipse</title>
    </properties>
    <body>
      <section name="Building with Eclipse">
        <p>
          This chapter is meant as a guide for setting up and managing a debugging environment
          for Hippo ECM inside Eclipse. By the time you have finished reading you will be able to
          run and debug every aspect of Hippo ECM from within Eclipse. As a follow up you might look
          into some <a href="eclipse-tips.html">Eclipse tips&amp;tricks</a> for how to keep up with the
          most exiting version of Hippo ECM: The trunk!
        </p>
      </section>
        <section name="Prepare">
          <p>Follow all steps documented on the <a href="maven.html">Building with Maven</a> page.
           Don't continue with the instructions on this page before you have seen a running application
           using just Maven.</p>

          <div style="border:1px solid black; padding:1em;">
            <p>NOTE: Do not do the initial checkout of the source tree from within Eclipse, use the command
            line SVN client.</p>
            <p>NOTE: The checked out project directory should not be inside your Eclipse workspace directory.
            For the rest of this chapter ~/hippo-ecm is the directory where the sources
            are checked out and ~/workspace is the Eclipse workspace directory.</p>
          </div>
        </section>

        <section name="Install and configure eclipse plugins">
          <p> Download and install <a href="http://www.eclipse.org/">Eclipse</a> version >= 3.2</p>

          <subsection name="Maven">
            <p>Integrate with the <a href="http://maven.apache.org/plugins/maven-eclipse-plugin/">
            Maven eclipse plugin </a> by opening a command shell and running:</p>
            <source>
~/> mvn -Declipse.workspace=&lt;path-to-eclipse-workspace&gt; eclipse:configure-workspace
            </source>
          </subsection>

          <subsection name="Tune your Eclipse memory settings">
            <p>
              Add some memory flags to the eclipse -vmargs startup argument.
            </p>
            <ul>
              <li>Set the heap size to at least 512M by adding something like -Xms512m -Xmx512m</li>
              <li>Set the permSpace size to at least 128M by adding something like -XX:MaxPermSize=128M</li>
            </ul>
          </subsection>

          <p> Start Eclipse, it is strongly advised to start with a clean workspace. Use the eclipse
          update manager (Help -> Software Updates -> Find and Install) to install the following eclipse plugins:
          </p>

            <subsection name="Subversion">
                <ol>
                    <li>
                        <p>Name='Subversive'</p>
                    </li>
                    <li>
                        <p>Update URL='http://download.eclipse.org/technology/subversive/0.7/update-site/' (Subversive plug-in update site)</p>
                    </li>
                    <li>
                        <p>Update URL='http://www.polarion.org/projects/subversive/download/eclipse/2.0/update-site/' (Subversive SVN Connectors update site)</p>
                    </li>
                </ol>
                <p>
                    See the official <a href="http://www.eclipse.org/subversive/documentation/gettingStarted/aboutSubversive/install.php">installation instructions</a>.
                </p>
            </subsection>
            <subsection name="Jetty">
                <ol>
                    <li>
                        <p>Name='Run Jetty Run'</p>
                    </li>
                    <li>
                      <p>Update URL='http://run-jetty-run.googlecode.com/svn/trunk/updatesite'</p>
                    </li>
                </ol>
            </subsection>
            <subsection name="JPOX">
                <ol>
                    <li>
                        <p>Name='JPOX launcher'</p>
                    </li>
                    <li>
                      <p>Update URL='http://www.jpox.org/downloads/eclipse-update/'</p>
                    </li>
                </ol>
                <p>
                  In the 'Select features to install' step only select 'JPOX Eclipse Plugin'
                  <br/><br/>
                  In the eclipse preferences dialog:
                </p>
                <ol>
                    <li>
                        <p>Select JPOX</p>
                    </li>
                    <li>
                        <p>Uncheck 'Use project classpath when running tools' (some versions have it below submenu 'JPOX -> General')</p>
                    </li>
                    <li>
                        <p>Add the following jars to the classpath: You can find these jars in your
                            local maven repository if you have followed the instructions on the <a
                                href="maven.html">Building with Maven</a> page.</p>
                        <ul>
                            <li>&lt;maven-repository&gt;/jpox/jpox-core/1.2.0-beta-2/jpox-core-1.2.0-beta-2.jar</li>
                            <li>&lt;maven-repository&gt;/jpox/jpox-enhancer/1.2.0-beta-2/jpox-enhancer-1.2.0-beta-2.jar</li>
                            <li>&lt;maven-repository&gt;/bcel/bcel/5.1/bcel-5.1.jar</li>
                        </ul>
                    </li>
                    <li>
                        <p>Select JPOX -&gt; Enhancer and enter 'BCEL' in the the 'Class Enhancer' field.</p>
                    </li>
                </ol>
            </subsection>
        </section>

        <section name="Create eclipse projects, part one">
            <div style="border:1px solid black; padding:1em;"> NOTE: Make sure that there is no
                .project file in the toplevel (hippo-ecm) directory before proceding. If there is
                one the eclipse import projects wizard will fail. </div>
            <p></p>
            <p> Use the <a href="http://maven.apache.org/plugins/maven-eclipse-plugin/">maven
                    eclipse plugin</a> to generate eclipse project files: </p>
            <source>
~/> cd hippo-ecm
~/hippo-ecm> mvn clean
~/hippo-ecm> mvn [-o] eclipse:eclipse
            </source>
          <p>
            The first time you run this command it will take extremely long, do it right before lunch
            kind of long. This is in part because it will attempt to download everything including sources
            and javadocs. On later runs you could add a -o (offline) flag to prevent downloading the sources,
            this makes it a lot faster.
          </p>
            <ol>
                <li>
                    <p>Run the import project wizard: File -&gt; Import -&gt; General
                        -&gt; Existing Projects into Workspace</p>
                </li>
                <li>
                    <p>Press 'Browse'</p>
                </li>
                <li>
                    <p>Select the 'hippo-ecm' directory, press OK</p>
                </li>
                <li>
                    <p>All hippo-ecm projects should be listed</p>
                </li>
                <li>
                    <p>Press 'Select all'</p>
                </li>
                <li>
                    <p>Press 'Finish'</p>
                </li>
            </ol>
        </section>

        <section name="Create eclipse projects, part two">
            <p>
              The <a href="maven.html">maven build</a> extensively uses
              <a href="http://maven.apache.org/plugins/maven-war-plugin/examples/war-overlay.html">WAR overlays</a>
              which unfortunately aren't fully supported by the maven eclipse plugin. Therefore you need to manually
              fix the eclipse projects before you can proceed.
            </p>
            <subsection name="Resources">
              <p>
                The maven build overlays the skin and xinha plugins over the final package-war by copying
                the skin and xinha files to the package/war/src/main/webapp directory. Manually copying
                these files in order to fix the package-war project for eclipse can be very painful because
                it needs to be done every time when a skin or xinha file changes. A much better way is to
                use symbolic links.
              </p>
              <ul>
                <li>
                  <p>
                    <b>Windows</b>
                  </p>
                  <p>
                    Although it is not possible to create symbolic links with the tools that
                    are provided by default by Windows, they do exist.  One of the Microsoft
                    supplied tools for this is
                    <a href="http://www.microsoft.com/technet/sysinternals/fileanddisk/junction.mspx">junction</a>.
                    With this tool, the symbolic links can be created as:
                  </p>
                  <source>
C:\hippo-ecm> cd package\war\src\main\webapp
C:\hippo-ecm\package\war\src\main\webapp> junction skin ..\..\..\..\skin\src\main\webapp
C:\hippo-ecm\package\war\src\main\webapp> junction xinha ..\..\..\..\..\addon\xinha\src\main\webapp
C:\hippo-ecm\package\war\src\main\webapp> cd ..\..\..\..\..
C:\hippo-ecm> cd addon\xinha\src\main\webapp\xinha\plugins
C:\hippo-ecm\addon\xinha\src\main\webapp\xinha\plugins> junction AutoSave ..\..\..\..\..\webResources\xinha\plugins\AutoSave
C:\hippo-ecm\addon\xinha\src\main\webapp\xinha\plugins> junction AutoResize ..\..\..\..\..\webResources\xinha\plugins\AutoResize
C:\hippo-ecm\addon\xinha\src\main\webapp\xinha\plugins> junction CustomLinker ..\..\..\..\..\webResources\xinha\plugins\CustomLinker
C:\hippo-ecm\addon\xinha\src\main\webapp\xinha\plugins> junction ImagePicker ..\..\..\..\..\webResources\xinha\plugins\ImagePicker
C:\hippo-ecm\addon\xinha\src\main\webapp\xinha\plugins> cd ..\skins
C:\hippo-ecm\addon\xinha\src\main\webapp\xinha\skins> junction hippo-gray ..\..\..\..\..\webResources\xinha\skins\hippo-gray
                  </source>
                </li>
                <li>
                  <p>
                    <b>Unix</b>
                  </p>
                  <source>
 ~/> cd hippo-ecm/package/war/src/main/webapp
 ~/hippo-ecm/package/war/src/main/webapp> ln -s ../../../../skin/src/main/webapp/ skin
 ~/hippo-ecm/package/war/src/main/webapp> ln -s ../../../../../addon/xinha/src/main/webapp/ xinha
 ~/hippo-ecm/package/war/src/main/webapp> cd ../../../../..
 ~/hippo-ecm> cd addon/xinha/src/main/webapp/xinha/plugins
 ~/hippo-ecm/addon/xinha/src/main/webapp/xinha/plugins> ln -s ../../../../../webResources/xinha/plugins/AutoSave/ AutoSave
 ~/hippo-ecm/addon/xinha/src/main/webapp/xinha/plugins> ln -s ../../../../../webResources/xinha/plugins/AutoResize/ AutoResize
 ~/hippo-ecm/addon/xinha/src/main/webapp/xinha/plugins> ln -s ../../../../../webResources/xinha/plugins/CustomLinker/ CustomLinker
 ~/hippo-ecm/addon/xinha/src/main/webapp/xinha/plugins> ln -s ../../../../../webResources/xinha/plugins/ImagePicker/ ImagePicker
 ~/hippo-ecm/addon/xinha/src/main/webapp/xinha/plugins> cd ../skins
 ~/hippo-ecm/addon/xinha/src/main/webapp/xinha/skins> ln -s ../../../../../webResources/xinha/skins/hippo-gray/ hippo-gray
                 </source>
                </li>
              </ul>
            </subsection>
            <subsection name="Dependencies">
                <ol>
                    <li>
                      <p>Right-click the hippo-ecm-package-war project in the package explorer</p>
                    </li>
                    <li>
                        <p>Select 'Java Build Path'</p>
                    </li>
                    <li>
                        <p>Under tab 'Projects', add hippo-ecm-repository-application</p>
                    </li>
                </ol>
            </subsection>
            <subsection name="Test resource folders">
              <p>
                The maven-eclipse-plugin creates source folders for test resources.  These
                can interfere with the initialization of the repository, so they should be removed
                from the classpath. Apply the following steps to the hippo-ecm-repository-engine and 
                hippo-ecm-addon-standards-frontend projects.  
              </p>
              <ol>
                <li>
                  <p>Right-click the project in the package explorer.</p>
                </li>
                <li>
                  <p>Select 'Java Build Path'</p>
                </li>
                <li>
                  <p>Under tab 'Source', remove the &lt;project&gt;/src/test/resources folder</p>
                </li>
              </ol>
            </subsection>
        </section>

        <section name="Run">
            <p>
                <a href="http://code.google.com/p/run-jetty-run/">Create Run-Jetty-Run configuration</a>
            </p>
            <ul>
                <li>
                    <p>Name is 'hippo-ecm-package-war'</p>
                </li>
                <li>
                    <p>Project is 'hippo-ecm-package-war'</p>
                </li>
                <li>
                    <p>Webapp dir is 'src/main/webapp'</p>
                </li>
                <li>
                    <p>Context path = '/cms'</p>
                </li>
                <li>
                    <p>Port is '8080'</p>
                </li>
            </ul>
            <p>Select the 'Arguments' tab and add to 'VM Arguments':</p>
            <source>
-Dorg.mortbay.util.FileResource.checkAliases=False
            </source>
            <p>(Optional) Select the 'Common' tab and check 'Run' and 'Debug' under
                'display in favorites menu'</p>
            <p> You can now debug the application within Eclipse: Set a breakpoint in the constructor
                of org.hippoecm.frontend.Home, run Run-Jetty-Run launcher in debug mode,
                open your browser and go to http://localhost:8080/cms</p>

          <p>Now you are ready to check out some Eclipse
          <a href="eclipse-tips.html">tips&amp;tricks</a></p>
        </section>
    </body>
</document>
