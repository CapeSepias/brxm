<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2007 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
    <properties>
        <title>Repository Plugins</title>
    </properties>
    <body>
      <section name="Repository Plugins">
      <span class='shortdesc'>Architecture of Hippo CMS and Hippo Repository</span> 

<span class="review">
<p>
This description is/was only about the concept of a plugin.  The concept is
that the repository functionality is not static, but one can extend the
repository functionalities.  The only current repository functionality that
can be extended (but sufficient flexible to do everything needed at the
moment) is the workflow.  Which workflow is active for which type(s) of
documents and what the workflow comprised (which steps and how they are
implemented) can be defined.
</p><p>
Probably the best way to position this is if there is a &quot;concepts&quot;
page just below, or integrated with the page<br/>
Delve into > Website Development > Add-ons > Introduction<br/>
And describe there that the concept that a repository can be extended.  The
text below can be used there for the part on what the concept of extending the
repository is;
</p>
</span>

<p>
The repository can be extended with additional functionality in a number of
explicit ways.  It allows the addition of:
</p>
<ul>
<li><a href="./repository_bootstrap.html">Default content,
pre-defining a namespace, and node-types</a>;</li>
<li><a href="./workflow.html">New types of workflows</a>;</li>
<li>Mirroring of external data in the repository (not yet available as API).</li>
</ul>

<p>
These repository plugins are add-ons for Hippo ECM and can be developed without
having the source available of Hippo ECM.  Building the add-on should
result in a self-contained JAR file which is placed in the classpath of the
repository.  There are a number of ways this can be accomplished.
</p>

<span class="review">
The last sentence then links to a page that is probably positioned after<br/>
Delve into > Website Development > Add-ons > Howto<br/>
which defines how plugins can be loaded into the application.  This is subject
to change, as currently the only supported way of adding plugins is by adding
the JAR to the quickstart or package based ear or war artifacts.  One of the
ways is by adding the plugin jar directly to the ear or war using the jar
command.  This is currently not a common way to do this, but a very
illustrative way.  It shows that nothing has to be done or reconfigured to add
a plugin.  The other way, and a very common way is to rebuild the project,
which is more complex and hides a principal and important feature that plugins
do in principle not require reconfiguration.
</span>

<p>
Adding a custom plugin, such as an additional workflow, does not require
modifications to the existing Hippo CMS/Repository, but are self-organized
bundles.
</p>

<p>
In order to activate the plugin, the plugin only needs to be added to the
classpath, which can be done in various ways.  To illustrate this concept is
that a plugin can be added to the EAR or WAR artifacts as easy as:
</p>

<source>
jar -uf hippo-ecm-package-ear-2.01.00.13536.ear your-plugin.jar
</source>

<span class="review">
Warning to reviewers of this text.  It has been deliberate that the example
above is done with the EAR artifact.  There are complications with doing this
with the WAR, because in a WAR the jars need to be placed in the subdirectory
WEB-INF/lib and its harder to separate CMS and repository into multiple WARs.
<br/>
It is supported, but in order not to complicate the documentation the valid
way of doing this in an EAR is shown as example.
<br/>
The example is illustrative on how easy it is to add a plugin, so has much
value to describe.  In fact, it had been a primary goal that the above
practice is a selling-point of the application.  Therefor IMO, is should not
be removed, because building your own quickstart is in fact something that
ought to be avoided and is clearly much more complex which scares people and
makes them believe adding a plugin involves actual work and the CMS/Repository
is not a very pluggable piece of software.<br/>
If the following paragraph becomes confusing, it can be removed.<br/>
</span>

<p>
If you build your repository or combination of repository with CMS, then add
the plugin JAR to repackage the WAR and add the plugin to the
<code>WEB-INF/lib</code> directory.
</p>

<p>
In near future, plugins can be loaded into the repository itself, allowing to
add plugins at runtime.
</p>

<p>
It is also possible to package your add-on along with a clean Hippo repository
such that it can be deployed as is.  This involves setting up your own project
in which you extend from the base Hippo repository/CMS package using a
war-overlay. Setting up you custom project is described XXX.
</p>

<span class="review">
The final remark should link to the project which builds a custom quickstart
package, or that document should be pasted at this place.
</span>

</section>
    </body>
</document>
