<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2008 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
    <properties>
      <title>JCR Basics</title>
    </properties>
    <body>
      <section name="JCR Basics">
          <span class="shortdesc">Get access to your content.</span>
          <p>
            Hippo Repository provides a standard Java Content Repository (JCR) interface that is also known
            as <a href="http://www.jcp.org/en/jsr/detail?id=170" target="_blank">Java Specification Request 170</a>.
            It uses an <a href="http://jackrabbit.apache.org/jcr-api.html" target="_blank">Apache JackRabbit</a> implementation.
            This page explains how to connect with the repository, and how to use the JCR interface and
            work with the content inside the repository.
          </p>

        <subsection name="Connecting with Hippo Repository">
          <p>
            A Java client that wants to use the interface must retrieve a <code>javax.jcr.Session</code> object.
            A static factory class is available to help with that. A simple example on how to connect and login
            to a Hippo Repository based on location, user name and password is:
          </p>
<source>
<![CDATA[HippoRepository repository = HippoRepositoryFactory.getHippoRepository("rmi://localhost:1099/hipporepository");
Session session = repository.login(<userName>, <password>);]]>
</source>
        </subsection>
        
        <subsection name="Working with JCR">
          
          <p>
            Once you have obtained a session object, you have access to the content inside the repository.
            You can for example retrieve the root node through the session object, and iterate through its child
            nodes:
          </p>
        
<source>
<![CDATA[Node rootNode = session.getRootNode();
NodeIterator nodes = rootNode.getNodes();
while (nodes.hasNext()) {
    Node node = nodes.nextNode();
    System.out.println(node.getPath());
}]]>
</source>        
          <p>
            See the <a href="http://www.day.com/maven/jsr170/javadocs/jcr-1.0/">JCR API</a> for
            a complete reference.
          </p>
        
        </subsection>
        
        <subsection name="Dependencies">
          <p>
            Connecting with Hippo Repository, and using its JCR interface, requires the
            following jar files on your classpath:
          </p>
          <ul>
            <li>jcr</li>
            <li>jta</li>
            <li>hippo-ecm-api</li>
            <li>hippo-ecm-repository-connector</li>
            <li>slf4j-api</li>
            <li>jcl104-over-slf4j</li>
            <li>slf4j-log4j12</li>
          </ul>
          <p>
            If you use Maven 2 to build your project, you need to add the following dependencies
            to your pom:
          </p>
<source>
<![CDATA[<dependency>
  <groupId>javax.jcr</groupId>
  <artifactId>jcr</artifactId>
  <version>1.0</version>
</dependency>
<dependency>
  <groupId>javax.transaction</groupId>
  <artifactId>jta</artifactId>
  <version>1.0.1B</version>
</dependency>

<dependency>
  <groupId>org.hippoecm</groupId>
  <artifactId>hippo-ecm-api</artifactId>
  <version>2.01.00.13536</version>
</dependency>
<dependency>
  <groupId>org.hippoecm</groupId>
  <artifactId>hippo-ecm-repository-connector</artifactId>
  <version>2.01.00.13536</version>
  <scope>runtime</scope>
</dependency>


<dependency>
  <groupId>org.slf4j</groupId>
  <artifactId>slf4j-api</artifactId>
  <version>1.5.3</version>
</dependency>
<dependency>
  <groupId>org.slf4j</groupId>
  <artifactId>jcl104-over-slf4j</artifactId>
  <version>1.5.3</version>
</dependency>
<dependency>
  <groupId>org.slf4j</groupId>
  <artifactId>slf4j-log4j12</artifactId>
  <version>1.5.3</version>
</dependency>]]>
</source>
        </subsection>
        
        <subsection name="Complete Example Class">
          
          <source>
<![CDATA[package org.example;

import javax.jcr.LoginException;
import javax.jcr.Node;
import javax.jcr.NodeIterator;
import javax.jcr.RepositoryException;
import javax.jcr.Session;

import org.hippoecm.repository.HippoRepository;
import org.hippoecm.repository.HippoRepositoryFactory;

public class App {
    public static void main( String[] args )
    {
        try {
            HippoRepository repository = HippoRepositoryFactory.getHippoRepository("rmi://localhost:1099/hipporepository");
            Session session = repository.login("admin", "admin".toCharArray());
            Node rootNode = session.getRootNode();
            NodeIterator nodes = rootNode.getNodes();
            while (nodes.hasNext()) {
                Node node = nodes.nextNode();
                System.out.println(node.getPath());
            }
        } catch (LoginException e) {
            System.out.println(e.getMessage());
        } catch (RepositoryException e) {
            e.printStackTrace();
        }
    }
}]]>
</source>
          
        </subsection>
        
        <subsection name="Next">
          Now that you know how to connect with Hippo Repository, proceed to the <a href="examples.html">examples</a>
          to get an idea of what functionality is available through the JCR interface.
        </subsection>
        
       </section>

    </body>
</document>