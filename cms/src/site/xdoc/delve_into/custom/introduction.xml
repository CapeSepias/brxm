<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2008 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
    
____________________________________________________________________________________________

-->
<document>
  <properties>
    <title>Introduction to add-on development</title>
  </properties>

  <body>
    <section name="Introduction to add-on development">
      <span class="shortdesc">An introduction to Hippo CMS add-on development.</span>

      <subsection name="Repository addon">
        <p>
          The repository can be extended in numerous ways.  Its content can be
          read from (multiple) XML files, new namespaces can be defined and
          additional workflows can be installed.
        </p>

        <subsubsection name="Content addon">
          <p>
            The simplest of addons, this type contains only a handful of files that
            are read in by the repository.  These files can contain JCR trees, in
            the format that is exported by the CMS console "export Node" action.
          </p>
        </subsubsection>

        <subsubsection name="Editing Template addon">
          <p>
            Any repository addon can also contain a namespace definition with
            node types.  These addons contain the types as created with the
            <a href="../../user/information_architects/howto/document_types/index.html">Document
            Type Editor</a>.  See the
            <a href="../implementation/add-ons/howto/editing_template.html">tutorial
            on how to create a template addon</a> for more information.
          </p>
        </subsubsection>

      </subsection>

      <subsection name="Frontend addon">
        <p>
          A pure frontend addon consists of frontend plugins in the form of
          Java class files, HTML markup and CSS.  It is a unit that can be used
          in any particular application when combined with a repository addon.
        </p>
      </subsection>

      <subsection name="Combined addon">
        <p>
          When your project calls for a custom way of representing the content in the
          repository, you have the option of creating your own plugin to achieve this.
          As an example, you can get the dashboard to show a list of the last 5 images
          using the <a href="http://lastimages.forge.hippo-ecm.org/">Last images plugin</a>.
        </p>
        <p>
          The addon that is used here contains both a plugin (Java code, HTML
          markup) and configuration (XML files adding plugin configuration to
          the CMS configuration).  When the repository and the CMS run form
          different web applications (EAR deployment), the addon has to be
          added to both.  In a WAR deployment scenario, repository and CMS are
          combined and you only need to add it once.
        </p>
        <p>
          Dashboard plugins are mostly standalone, maybe using some of the services
          as they are made available by the CMS.  See the
          <a href="howto/gui_plugin.html">GUI Plugin</a> page for more information on
          how to create such a plugin.
        </p>

        <subsubsection name="Custom Perspective">
          <p>
            Maybe the dashboard is too restrictive or you want to reuse some existing
            plugins.  In this case, you have the option of creating your own perspective,
            combining multiple plugins into a coherent view.
          </p>
        </subsubsection>

        <subsubsection name="Customized namespace addon">
          <p>
            In a more advanced project, document types get complex and their
            templates need to be customized.  In this case, the CMS itself is not (yet!)
            able to help you out but it is certainly possible to
            <a href="howto/customize_editing_template.html">rearrange the layout</a>
            any way you like.
          </p>

          <p>
            Sometimes, changing layouts is not sufficient and you need the full power of
            an AJAX interface.  Perhaps the template has to update dynamically or
            there are complex constraints on the type.  In this case, it is possible to
            <a href="howto/editing_template_plugin.html">create your own template plugin</a>.
              You can then use the developer-friendly 
            <a href="http://wicket.apache.org/">Wicket</a> component framework to create
            the most advanced user interfaces.
          </p>
        </subsubsection>

      </subsection>

    </section>
  </body>
</document>
