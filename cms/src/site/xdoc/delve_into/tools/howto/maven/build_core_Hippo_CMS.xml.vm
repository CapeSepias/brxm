<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2008 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
  <properties>
    <title>Building the core Hippo CMS</title>
  </properties>
  <body>

   <section name="Building the core Hippo CMS">
    <span class='shortdesc'>How to build the core Hippo CMS package from the sources?</span>

    <p>As a website developer you do not need to build the core Hippo CMS package, as
       you can use it as a dependency. But you will have to build your own package and
       you can read these pages as an example.
    </p>
    <p>As a developer of addons on top of the Hippo CMS, you have to build a package from
       a project that has the core Hippo CMS package as a subproject. So just building
       the Hippo CMS itself will not suffice, but it is good way to start learning about it.
    </p>
    <p>
     Assuming that you have
     <a href='./install_maven.html'>Installed Maven ensuring spaceless pathnames</a> and have
     <a href='./get_Hippo_CMS_source.html'>checked out the Hippo CMS source</a> in the
     directory <code>~/cms</code>, you build the package with:
     </p>
        <source>
         &gt; cd ~/cms
         ~/cms&gt; mvn package
        </source>
        <p>This will build the package:</p>
        <code>~/cms/package/ear/target/${package_ear}</code>
        <p>
         The 'mvn package' command will build the package(s) 
         and leave them in a <code>target/</code>
         descendant directory of your /cms directory. For instance,
         if a project is configured to produce an EAR package, the produced EAR
         package is put in the directory:</p>
         <code>~/cms/package/ear/target/</code>
         <p>While a WAR package would be put in the directory:</p>
         <code>~/cms/package/war/target/</code>
         <p>WAR and EAR packages can <em>not</em> be build simultaneously.</p>

        </section>
       </body>
      </document>

