<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
      <title>Example: Hello World plugin</title>
  </properties>
  <body>
    <h1>Hello World</h1>
      <p>Most programmers seem to be interested in telling the world "Hello World!"
        Luckily, this is also possible with a plugin for Hippo ECM frontend
        applications. This tutorial describes how such a simple plugin can be created.
      </p>

      <section name="Creating the Hello World plugin">
        <p>
          We'll create a small project to contain our Hello World Plugin, which we can
          later on add to the Hippo ECM frontend application.
        </p>

        <subsection name="Maven structure">
          <p>
            We'll use Maven 2 to automate the build process. In a location of your choice,
            create a directory for our plugin project and create the following directory
            structure:
          </p>
<source>
|-- pom.xml
`-- src
    `-- main
        `-- java
            `-- org
                `-- example
                    `-- helloworld
                        |-- HelloPlugin.html
                        `-- HelloPlugin.java
</source>

          <p>
            The contents of the individual files are described in the following sections.
          </p>            
        </subsection>

        <subsection name="pom.xml">
          <p>
            The Maven POM contains one dependency, on hippo-ecm-frontend-engine.
            This component contains the abstract Plugin class which we need to extend
            in our Hello World Plugin.
          </p>
          
          <p>
            We will package our plugin as a JAR so we can easily add it as a dependency
            to the Hippo ECM frontend application.
          </p>
<source>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <name>Hello World</name>
  <description>Hello World plugin</description>
  <groupId>org.example</groupId>
  <artifactId>hello-world-plugin</artifactId>
  <version>1.01.00</version>
  <packaging>jar</packaging>

  <dependencies>
    <dependency>
      <groupId>org.hippoecm</groupId>
      <artifactId>hippo-ecm-frontend-engine</artifactId>
      <version>2.01.00-dev</version>
    </dependency>    
  </dependencies>
  
  <build>
    <defaultGoal>install</defaultGoal>
    <resources>
      <resource>
        <filtering>false</filtering>
        <directory>${basedir}/src/main/java</directory>
        <includes>
          <include>**/*.html</include>
          <include>**/*.css</include>
        </includes>
      </resource>
    </resources>
  </build>

</project>
]]>
</source>
        </subsection>

        <subsection name="HelloPlugin.java">
          <p>
            Our HelloWorldPlugin class extends the Plugin class. In the constructor we
            add a static label. Plugin contains an abstract method update we need to implement,
            however because our plugin only contains static data at this point we can leave
            the body of the method empty.
          </p>
<source>
<![CDATA[
package org.example.helloworld;

import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.markup.html.basic.Label;
import org.hippoecm.frontend.model.JcrEvent;
import org.hippoecm.frontend.model.JcrNodeModel;
import org.hippoecm.frontend.plugin.Plugin;

public class HelloWorldPlugin extends Plugin {
    private static final long serialVersionUID = 1L;

    public HelloWorldPlugin(String id, JcrNodeModel model) {
        super(id, model);
        add(new Label("label", "Hello World!"));
    }

    public void update(AjaxRequestTarget target, JcrEvent jcrEvent) {
    }

}
]]>
</source>
        </subsection>

        <subsection name="HelloPlugin.html">
          <p>
            Just like any other Wicket component, a Plugin needs an HTML page defining its presentation.
            For our HelloWorldPlugin this could look like this:
          </p>
<source>
<![CDATA[
<html xmlns:wicket="http://wicket.apache.org/">
  <wicket:panel>
    
    <div wicket:id="label">text goed here</div>
    
  </wicket:panel>
</html>
]]>
</source>
        </subsection>
        
      <subsection name="Building the plugin JAR">
        <p>
          Now build the JAR for the plugin and install it in your local Maven repository
          using the following Maven command:
        </p>
<source>
mvn install
</source>
        </subsection>
          

          
      </section>


      <section name="Testing the Hello World plugin">
        <p>
          To test our HelloWorldPlugin we can use the Showcase GUI [TODO: link]. Make sure you
          have a <a href="building/maven.html">complete SVN checkout of Hippo ECM</a>.
          To keep things simple we use the existing hippo-ecm-application-default-frontend application. 
          
        </p>
        
        <subsection name="Adding a dependency to our plugin">
          <p>
            To be able to use our plugin we need to add a dependency on it to Maven POM of the frontend
            application.
          </p>
          <source>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  ...
  
  <dependencies>
    
    ...
    
    <dependency>
      <groupId>org.example</groupId>
      <artifactId>hello-world-plugin</artifactId>
      <version>1.01.00</version>
      <type>jar</type>
    </dependency>
    
    ...
    
  </dependencies>
  
  ...
  
</project>
]]>            
          </source>
      </subsection>
      
      <subsection name="Running the repository application">
        <p>
          To test our frontend plugin we need to have a repository running. We can use the
          default repository application (hippo-ecm-application-default-repository).
          Start up rmiregistry and the repository using the following commands:
        </p>
<source>
rmiregistry
mvn jetty:run-war
</source>
      </subsection>
      
      <subsection name="Running the frontend application">
        <p>
          Now run the frontend application using the following Maven command:
        </p>
<source>
mvn jetty:run-war
</source>
        <p>
          You should now be able to approach the frontend application with your web browser
          on <a href="http://localhost:8082/browser/">http://localhost:8082/browser/</a>.
        </p>
      </subsection>

      <subsection name="Configuring to application to use the plugin">
        <p>
          All it takes to see our plugin in all its glory is to replace one of the
          standard plugins in the plugin configuration with our own. To do this, navigate to
          /configuration/frontend/default/rootPlugin/contentPlugin.
          in the tree, and click on contentPlugin node. The properties of the contentPlugin node
          are displayed on the right side of the page. 
          Now change the class name
          in the hippo:renderer property of this node to org.example.helloworld.HelloWorldPlugin.
        </p>
        <img src="../images/configure-hello-world-plugin.jpg" style="border:1px solid grey;"/>
        <p>
          Refresh your browser, and admire your work!
        </p>
        <img src="../images/hello-world-plugin.jpg"  style="border:1px solid grey;"/>
      </subsection>
      
    </section>


    <!--
    <section name="Making the Hello World plugin context sensitive">
      <p>
        TODO
      </p>
          
<source>
<![CDATA[
    public HelloWorldPlugin(String id, JcrNodeModel model) {
        super(id, model);
        add(new Label("label", new PropertyModel(model, "path")));
    }
]]>    
</source>
          
      <p>
        TODO
      </p>
          
<source>
<![CDATA[
    public void update(AjaxRequestTarget target, JcrEvent jcrEvent) {
        if (jcrEvent.getModel() != null) {
            setModel(jcrEvent.getModel());
        }
        if (target != null) {
            target.addComponent(this);
        }
    }
]]>    
</source>

      <p>
        Now rebuild your plugin project as described above, and restart the frontend application.
        The Hello World plugin should now display the name of the node selected in the tree.
      </p>
      
    </section>
    -->

  </body>
</document>
