<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <title>Frontend Plugin Architecture</title>
  </properties>
  <head>
  </head>
  <body>
    <!-- The body of the document contains a number of sections -->
    <section name="Frontend Plugin Architecture">
    
      <p>
        Hippo ECM provides an <a href="http://wicket.apache.org">Apache Wicket</a> based
        plugin architecture to facilitate a customisable GUI. All standard GUI components are written
        as plugins. The Hippo CMS application offers a default configuration for these plugins.
        Customising Hippo CMS comes down to extending the standards plugins, and/or writing your own,
        and configuring them to form your own custom application.
      </p>
     
      <p>Frontend plugins integrate extend the Wicket component model.  Wicket HTML fragments 
        can contain references to plugins that are not added explicitly in the Java code.  Instead,
        these references are resolved by the configuration in the Hippo repository.</p>

      <p>The configuration is stored in nodes of (primary) type hippo:frontendplugin.
        The property hippo:renderer determines what Java class is instantiated.</p>

      <subsection name="Pages">
        <p>Web applications that are completely configured from the repository consist of one page,
          "Home".  The configuration can be found under the repository node
          [TODO: link to repo viewer in demo war]</p>
<source>
  /configuration/frontend/default
</source>
        <p></p>
      </subsection>

      <subsection name="Root plugin">
        <p>The Home page in the application has a root plugin that is loaded when Wicket tries
          to render it.  This plugin must be a subclass of org.hippoecm.frontend.plugin.Plugin,
         itself a Wicket Panel [TODO: link to API docs].  An example:</p>
<source>
public class RootPlugin extends Plugin {
    private static final long serialVersionUID = 1L;

    public RootPlugin(String id, final JcrNodeModel model) {
        super(id, model);
    }

    public void update(final AjaxRequestTarget target, JcrEvent jcrEvent) {
    }
}
</source>
        <p>When the class is instantiated, the children of the repository node are instantiated
          themselves as Plugins and added as Wicket components.</p>

        <p>The plugins that are configured in the repository node structure must therefore
          correspond to missing Wicket components in the HTML for RootPlugin.  For example,
          if the above root component has this html:</p>
<source>
&lt;html xmlns:wicket="http://wicket.apache.org/"&gt;
    &lt;wicket:panel&gt;
      &lt;p&gt;
        &lt;div wicket:id="subPlugin">[sub plugin will be rendered here]&lt;/div&gt;
      &lt;/p&gt;
    &lt;/wicket:panel&gt;
&lt;/html>
</source>
        <p>then the repository structure that will generate the correctc component hierarchy is:</p>
<source>
[repository root]
`-- configuration
    `-- frontend
        `-- default [nt:unstructured]
            `-- RootPlugin [hippo:frontendplugin]
                `-- subPlugin [hippo:frontendplugin]
</source>
      </subsection>

      <subsection name="Dynamic reconfiguration">
        <p>speciale content type</p>
      </subsection>
    </section>
  </body>
</document>