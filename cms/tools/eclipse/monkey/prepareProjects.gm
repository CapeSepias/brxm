/*
 * Menu: Prepare Hippo ECM projects
 * Script-Path: /Hippo ECM Files/tools/eclipse/monkey/prepareProjects.gm
 * Kudos: Wander (onehippo.com)
 * License: Apache 2.0
 * Job: WorkspaceJob
 * Exec-Mode: Foreground
 * DOM: http://groovy-monkey.sourceforge.net/update/plugins/net.sf.groovyMonkey.dom
 */
import org.eclipse.jdt.internal.core.SetClasspathOperation;
import org.eclipse.jdt.core.IClasspathEntry;
import org.eclipse.jdt.internal.core.ClasspathEntry;
import org.eclipse.jdt.core.IPackageFragmentRoot;
import org.eclipse.jdt.core.IClasspathAttribute;
import org.eclipse.core.internal.resources.Workspace;

out.clear();
println "$metadata.menuName started\n";

addProjectDependency('hippo-ecm-quickstart-war', 'hippo-ecm-repository-application');
addProjectDependency('hippo-ecm-package-war', 'hippo-ecm-repository-application');
removeClasspathEntry('hippo-ecm-repository-engine', 'src/test/resources');
removeClasspathEntry('hippo-ecm-addon-standards-frontend', 'src/test/resources');

println "\n$metadata.menuName finished";

/////////////

def removeClasspathEntry(projectName, pathPattern) {
    def project = workspace.root.getProject(projectName);
    if (project.isOpen()) {
	    def javaProject = project.getNature('org.eclipse.jdt.core.javanature');
        def classpath = javaProject.getRawClasspath();
        def toBeRemoved = null;
        classpath.each() {
            if (it.getPath().toString().contains(pathPattern)) {
                toBeRemoved = it;
            }
        };
        if (toBeRemoved != null) {
            println "  Removing classpath entry $pathPattern for $projectName";
            def classpathSet = new LinkedHashSet(Arrays.asList(classpath));
            classpathSet.remove(toBeRemoved);
            classpath = (IClasspathEntry[])classpathSet.toArray();
            def op = new SetClasspathOperation(javaProject, classpath, javaProject.getOutputLocation(), true);
            op.runOperation(monitor);
	    } else {
	       println "  $projectName has no dependency $pathPattern, leaving as is..";
	    }
	}
}


def addProjectDependency(fromName, toName) {
    def from = workspace.root.getProject(fromName);
    def to = workspace.root.getProject(toName);
    if (from.isOpen() && to.isOpen()) {   
	    def fromProject = from.getNature('org.eclipse.jdt.core.javanature');
	    def classpath = fromProject.getRawClasspath();
	    def classpathSet = new LinkedHashSet(Arrays.asList(classpath));
	    def dependency = new ClasspathEntry(
	        IPackageFragmentRoot.K_SOURCE,     // indicates this classpath entry contains source files.
	        IClasspathEntry.CPE_PROJECT,       // indicates a required project.
	        to.getFullPath(),                  // target project
	        ClasspathEntry.INCLUDE_ALL,        // inclusion patterns
	        ClasspathEntry.EXCLUDE_NONE,       // exclusion patterns
	        null,                              // source attachment
	        null,                              // source attachment root
	        null,                              // specific output folder
	        false,                             // isExported
	        null,                              // accessRules
	        true,                              // combineAccessRules
	        (IClasspathAttribute[])[]          // extraAttributes
	    );        
	    classpathSet.add(dependency);
	    
	    if (classpathSet.size() > classpath.length) {
	        println "  Adding project dependency from $fromName to $toName";
	    	classpath = (IClasspathEntry[])classpathSet.toArray();
	    	def op = new SetClasspathOperation(fromProject, classpath, fromProject.getOutputLocation(), true);
	    	op.runOperation(monitor);
	    } else {
            println "  Project dependency from $fromName to $toName allready exist, leaving as is..";
        }
    }
}



