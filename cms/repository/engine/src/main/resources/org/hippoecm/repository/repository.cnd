/*
 * Copyright 2007-2009 Hippo
 *
 * Licensed under the Apache License, Version 2.0 (the  "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<rep='internal'>
<jcr='http://www.jcp.org/jcr/1.0'>
<nt='http://www.jcp.org/jcr/nt/1.0'>
<mix='http://www.jcp.org/jcr/mix/1.0'>
<hippo='http://www.onehippo.org/jcr/hippo/nt/2.0'>
<hipposys='http://www.onehippo.org/jcr/hipposys/nt/1.0'>
<hipposysedit='http://www.onehippo.org/jcr/hipposysedit/nt/1.0'>

[rep:jarFile] mixin
- rep:jarExpanded (date) mandatory copy
+ rep:jarContents (nt:base) = nt:folder mandatory copy

// DATA TYPES: RESOURCES AND MARKERS

[hippo:resource]
- jcr:encoding (string)
- jcr:mimeType (string) mandatory
- jcr:data (binary) primary mandatory
- jcr:lastModified (date) mandatory ignore

[hippo:query] > nt:query

[hippo:derived] mixin
- hippo:compute (Reference)
  // Indicates the method that is used to compute the derived properties
  // defined by any subtypes that extend this type.
  // should point to a node of type hippo:deriveddefinition
- hippo:related (Reference) multiple
  // A multivalue property that links to all the nodes that where used to
  // compute derived proper

// DATA TYPES: DOCUMENTS

[hippo:request] > nt:base

[hippo:document] > nt:base

[hippo:handle] > nt:base
- hippo:discriminator (string) multiple
+ * (hippo:document) = hippo:document multiple version
+ hippo:request (hippo:request) multiple ignore

[hippo:hardhandle] > mix:versionable mixin

[hippo:harddocument] > hippo:derived, mix:referenceable, mix:versionable mixin
- hippo:paths (string) multiple mandatory

// DATA TYPES: VIRTUAL LAYER

[hippo:facetresult]
- hippo:count (long)
+ * multiple ignore

[hippo:facetbasesearch]
- hippo:queryname (string) mandatory
- hippo:count (long)
+ * (hippo:facetbasesearch) multiple ignore

[hippo:facetsearch] > hippo:facetbasesearch
- hippo:docbase (string) mandatory
- hippo:facets (string) mandatory multiple
+ hippo:resultset (hippo:facetresult) = hippo:facetresult

[hippo:facetselect] > nt:base
- hippo:docbase (string) mandatory
- hippo:facets (string) mandatory multiple
- hippo:values (string) mandatory multiple
- hippo:modes (string) mandatory multiple < 'select', 'stick', 'clear', 'single', 'prefer', 'prefer-single'
+ * multiple ignore

[hippo:mirror]
- hippo:docbase (string) mandatory
+ * multiple ignore

// DATA TYPES: TRANSLATION

[hippo:translation]
- hippo:language (string) mandatory
- hippo:message (string) mandatory
- hippo:property (string)
- hippo:value (string)
- hippo:class (string)

[hippo:translated] mixin
+ hippo:translation (hippo:translation) multiple

// BOOTSTRAP

[hippo:initializeitem] > nt:base
- hippo:sequence (double)
- hippo:namespace (string)
- hippo:nodetypesresource (string)
- hippo:nodetypes (binary)
- hippo:contentresource (string)
- hippo:content (string)
- hippo:contentroot (string)
- hippo:contentdelete (string)

[hipposys:initializeitem] > hippo:initializeitem
- hipposys:extensionsource (string)

[hippo:initializefolder] > nt:base orderable
- hippo:version (string) multiple // never specify this item at this time
- hippo:sequence (double) // not yet supported
+ * (hippo:initializeitem) = hippo:initializeitem

// UPDATE ALL CONTENT

// mixin on nodetype and prototype nodes for a particular version
// of a namespace.
[hipposysedit:remodel] mixin
- hipposysedit:uri (string) mandatory

[hipposysedit:field] > nt:base
- hipposysedit:name (string)
- hipposysedit:path (string)
- hipposysedit:type (string)
- hipposysedit:multiple (boolean)
- hipposysedit:mandatory (boolean)
- hipposysedit:ordered (boolean)
- hipposysedit:primary (boolean)

[hipposysedit:nodetype] > hippo:document orderable
- hipposysedit:type (string)
- hipposysedit:supertype (string) multiple
- hipposysedit:node (boolean)
- hipposysedit:mixin (boolean)
+ hipposysedit:field (hipposysedit:field) multiple

[hipposysedit:prototypeset]
+ hipposysedit:prototype (nt:base)

[hipposysedit:templatetype] orderable
+ hipposysedit:nodetype (hippo:handle) mandatory
+ hipposysedit:prototypes (hipposysedit:prototypeset)

[hipposysedit:namespace]
+ * (hipposysedit:templatetype) = hipposysedit:templatetype

[hipposysedit:namespacefolder]
+ * (hipposysedit:namespace) = hipposysedit:namespace

// REPOSITORY: DOCUMENT DATA TYPES AND MARKERS

[hipposys:softdocument] mixin
- hippo:uuid (string) mandatory
- hippo:paths (string) multiple mandatory

[hipposys:request] > hippo:request, mix:versionable
- *
- * multiple
+ * (nt:base) = nt:unstructured

[hipposys:implementation] mixin
- hipposys:classname (string) mandatory
- hipposys:serialver (long)

[hipposys:facetsubsearch] > hippo:facetbasesearch
- hippo:docbase (string) mandatory
- hippo:facets (string) mandatory multiple
- hipposys:search (string) multiple
+ hippo:resultset (hippo:facetresult) = hippo:facetresult

// REPOSITORY WORKFLOW, OCM AND QUERY

[hipposys:type] > nt:base
- hipposys:nodetype (string) mandatory
- hipposys:display (string) mandatory
- hipposys:classname (string) mandatory //FIXME

[hipposys:types] > nt:base
+ * (hipposys:type) = hipposys:type

[hipposys:workflow] > hipposys:type
- hipposys:privileges (string) multiple
+ hipposys:types (hipposys:types) = hipposys:types mandatory autocreated
+ hipposys:config (nt:unstructured) = nt:unstructured

[hipposys:workflowcategory] > nt:base orderable
+ * (hipposys:workflow) = hipposys:workflow

[hipposys:workflowfolder] > nt:base, mix:referenceable
+ * (hipposys:workflowcategory) = hipposys:workflowcategory

[hipposys:ocmquery] > hippo:query
- hipposys:classname (string) mandatory
+ hipposys:types (hipposys:types) = hipposys:types mandatory autocreated

[hipposys:ocmqueryfolder] > nt:base
+ * (nt:query) = hipposys:ocmquery

[hipposys:basequeryfolder] > nt:unstructured // FIXME
+ * (nt:query) = hippo:query

[hipposys:queryfolder] > hipposys:basequeryfolder
+ * (nt:query, hipposys:basequeryfolder)

// REPOSITORY: DERIVED DATA

[hipposys:propertyreference] > nt:base

[hipposys:relativepropertyreference] > hipposys:propertyreference
- hipposys:relPath (string) mandatory

[hipposys:resolvepropertyreference] > hipposys:propertyreference
- hipposys:relPath (string) mandatory

[hipposys:builtinpropertyreference] > hipposys:propertyreference
- hipposys:method (string) mandatory < 'ancestors'

[hipposys:propertyreferences] orderable
+ * (hipposys:propertyreference)

[hipposys:deriveddefinition] > nt:base
- hipposys:nodetype (string) mandatory
- hipposys:classname (string) mandatory
- hipposys:serialver (long)
+ hipposys:accessed (hipposys:propertyreferences) = hipposys:propertyreferences autocreated
+ hipposys:derived (hipposys:propertyreferences) = hipposys:propertyreferences autocreated

[hipposys:derivativesfolder] > nt:base orderable
+ * (hipposys:deriveddefinition) = hipposys:deriveddefinition multiple

// REPOSITORY: MISCELLANEOUS

[hipposys:temporaryfolder] > nt:unstructured

[hipposys:applicationfolder] > nt:unstructured orderable

// REPOSITORY: SECURITY

[hipposys:accessmanager] > nt:base
- hipposys:permissioncachesize (long) = '20000' mandatory autocreated 

[hipposys:user] > nt:base
- hipposys:securityprovider (string) = 'internal' mandatory autocreated
- hipposys:active (boolean) = true mandatory autocreated
- hipposys:password (string)
- hipposys:passkey (string)
- hipposys:lastlogin (date)

[hipposys:externaluser] > hipposys:user
- hipposys:lastsync (date)
- * (string)

[hipposys:group] > nt:base
- hipposys:securityprovider (string) = 'internal' mandatory autocreated
- hipposys:members (string) multiple
- hipposys:groups (string) multiple
- hipposys:description (string)

[hipposys:externalgroup] > hipposys:group
- hipposys:syncdate (date)
- * (string)

[hipposys:role] > nt:base
- hipposys:privileges (string) multiple
- hipposys:roles (string) multiple
- hipposys:jcrread (boolean)
- hipposys:jcrwrite (boolean)
- hipposys:jcrremove (boolean)

[hipposys:externalrole] > hipposys:role
- hipposys:securityprovider (string) = 'internal' mandatory autocreated

[hipposys:authrole] > nt:base
- hipposys:users (string) multiple
- hipposys:groups (string) multiple
- hipposys:role (string) mandatory
- hipposys:description (string)

[hipposys:facetrule] > nt:base
- hipposys:facet (string) mandatory 
- hipposys:value (string) mandatory 
- hipposys:type (string) = 'String' mandatory < 'String', 'Name', 'Reference'
- hipposys:equals (boolean) = 'true' mandatory autocreated
- hipposys:filter (boolean) = 'false' mandatory autocreated
- hipposys:description (string)

[hipposys:domainrule] > nt:base
+ * (hipposys:facetrule) = hipposys:facetrule multiple
- hipposys:description (string)

[hipposys:domain] > nt:base
+ * (hipposys:domainrule) = hipposys:domainrule multiple 
+ * (hipposys:authrole) = hipposys:authrole multiple
- hipposys:description (string)

[hipposys:userprovider] >  nt:base
- hipposys:dirlevels (long) = '0' autocreated

[hipposys:groupprovider] >  nt:base
- hipposys:dirlevels (long) = '0' autocreated

[hipposys:roleprovider] >  nt:base

[hipposys:securityprovider] > nt:base orderable
- hipposys:classname (string) mandatory
+ hipposys:userprovider (hipposys:userprovider) = hipposys:userprovider
+ hipposys:groupprovider (hipposys:groupprovider) = hipposys:groupprovider
+ hipposys:roleprovider (hipposys:roleprovider) = hipposys:roleprovider

[hipposys:userfolder] > nt:base
+ * (hipposys:user) = hipposys:user
+ * (hipposys:userfolder) = hipposys:userfolder

[hipposys:groupfolder] > nt:base
+ * (hipposys:group) = hipposys:group
+ * (hipposys:groupfolder) = hipposys:groupfolder

[hipposys:rolefolder] > nt:base
+ * (hipposys:role) = hipposys:role

[hipposys:domainfolder] > nt:base
+ * (hipposys:domain) = hipposys:domain

[hipposys:securityfolder] > nt:base
- hipposys:userspath (string) mandatory
- hipposys:groupspath (string) mandatory
- hipposys:rolespath (string) mandatory
- hipposys:domainspath (string) mandatory
+ hipposys:accessmanager (hipposys:accessmanager) = hipposys:accessmanager
+ * (hipposys:securityprovider) = hipposys:securityprovider

// REPOSITORY: CONFIGURATION ROOT

[hipposys:configuration] > nt:base
+ hippo:workflows (hipposys:workflowfolder) = hipposys:workflowfolder mandatory
+ hippo:documents (hipposys:ocmqueryfolder) = hipposys:ocmqueryfolder mandatory
+ hippo:initialize (hippo:initializefolder) = hippo:initializefolder
+ hippo:temporary (hipposys:temporaryfolder) = hipposys:temporaryfolder autocreated
+ hippo:users (hipposys:userfolder) = hipposys:userfolder
+ hippo:roles (hipposys:rolefolder) = hipposys:rolefolder
+ hippo:groups (hipposys:groupfolder) = hipposys:groupfolder
+ hippo:domains (hipposys:domainfolder) = hipposys:domainfolder
+ hippo:derivatives (hipposys:derivativesfolder) = hipposys:derivativesfolder autocreated mandatory
+ hippo:frontend (hipposys:applicationfolder) = hipposys:applicationfolder
+ hippo:queries (hipposys:basequeryfolder) = hipposys:queryfolder mandatory autocreated
+ hippo:security (hipposys:securityfolder) = hipposys:securityfolder
