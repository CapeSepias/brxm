Index: src/test/java/org/hippoecm/frontend/plugins/xinha/HtmlProcessorTest.java
===================================================================
--- src/test/java/org/hippoecm/frontend/plugins/xinha/HtmlProcessorTest.java	(revision 21076)
+++ src/test/java/org/hippoecm/frontend/plugins/xinha/HtmlProcessorTest.java	(working copy)
@@ -20,23 +20,33 @@
 
 import java.util.Set;
 
+import org.hippoecm.frontend.plugins.xinha.model.RichTextProcessor;
+import org.hippoecm.frontend.plugins.xinha.model.RichTextProcessor.IBinaryEncoder;
 import org.junit.Test;
 
 public class HtmlProcessorTest {
     @SuppressWarnings("unused")
     private final static String SVN_ID = "$Id$";
 
+    IBinaryEncoder getEncoder() {
+        return new IBinaryEncoder() {
+            public String encode(String nodePath) {
+                return "test-prefix/" + nodePath;
+            }
+        };
+    }
+    
     @Test
     public void testPrefixInternalImage() {
         String text = "testing 1 2 3 <img src=\"link\"/>";
-        String processed = XinhaHtmlProcessor.prefixImageLinks(text, "test-prefix/");
+        String processed = RichTextProcessor.prefixImageLinks(text, getEncoder());
         assertEquals("testing 1 2 3 <img src=\"test-prefix/link\"/>", processed);
     }
 
     @Test
     public void testPrefixExternalImage() {
         String text = "testing 1 2 3 <img src=\"http://link\"/>";
-        String processed = XinhaHtmlProcessor.prefixImageLinks(text, "test-prefix/");
+        String processed = RichTextProcessor.prefixImageLinks(text, getEncoder());
         assertEquals("testing 1 2 3 <img src=\"http://link\"/>", processed);
     }
 
@@ -45,7 +55,7 @@
         String text = "testing 1 2 3 <a href=\"link-1\">link 1</a>\n"+
             "more text <a href=\"http://test\">test</a>\n"+
             "and an image <img src=\"link-2/subnode\"/>";
-        Set<String> links = XinhaHtmlProcessor.getInternalLinks(text);
+        Set<String> links = RichTextProcessor.getInternalLinks(text);
         assertEquals(2, links.size());
         assertTrue(links.contains("link-1"));
         assertTrue(links.contains("link-2"));
@@ -54,7 +64,7 @@
     @Test
     public void testMultilineGetInternalLinks() {
         String text="testing 1 2 3 <a\nhref=\"link\">link</a>";
-        Set<String> links = XinhaHtmlProcessor.getInternalLinks(text);
+        Set<String> links = RichTextProcessor.getInternalLinks(text);
         assertEquals(1, links.size());
         assertTrue(links.contains("link"));
     }
@@ -62,7 +72,7 @@
     @Test
     public void testEncodedLink() {
         String text="<a href=\"link%20je\">link</a>";
-        Set<String> links = XinhaHtmlProcessor.getInternalLinks(text);
+        Set<String> links = RichTextProcessor.getInternalLinks(text);
         assertEquals(1, links.size());
         assertTrue(links.contains("link je"));
     }
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/services/links/InternalXinhaLink.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/services/links/InternalXinhaLink.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/services/links/InternalXinhaLink.java	(working copy)
@@ -18,51 +18,32 @@
 
 import java.util.Map;
 
-import javax.jcr.Item;
 import javax.jcr.Node;
-import javax.jcr.PathNotFoundException;
-import javax.jcr.RepositoryException;
 
-import org.hippoecm.frontend.model.JcrNodeModel;
-import org.hippoecm.frontend.plugins.xinha.XinhaUtil;
-import org.hippoecm.frontend.plugins.xinha.dialog.DocumentLink;
-import org.hippoecm.repository.api.HippoNodeType;
+import org.apache.wicket.model.IModel;
+import org.hippoecm.frontend.plugins.xinha.model.RichText;
+import org.hippoecm.frontend.plugins.xinha.model.RichTextUtil;
+import org.hippoecm.frontend.plugins.xinha.services.XinhaDocumentLink;
 
-public abstract class InternalXinhaLink extends DocumentLink {
+public abstract class InternalXinhaLink extends XinhaDocumentLink {
     private static final long serialVersionUID = 1L;
 
     @SuppressWarnings("unused")
     private final static String SVN_ID = "$Id$";
     
-    public InternalXinhaLink(Map<String, String> values, JcrNodeModel parentModel) {
+    public InternalXinhaLink(Map<String, String> values, IModel<RichText> parentModel) {
         super(values, parentModel);
     }
 
     @Override
-    protected JcrNodeModel createInitialModel(JcrNodeModel parentModel) {
+    protected IModel<Node> createInitialModel(IModel<RichText> parentModel) {
         if (parentModel == null) {
             return null;
         }
         String relPath = getHref();
         if (relPath != null && !"".equals(relPath)) {
-            relPath = XinhaUtil.decode(relPath);
-            try {
-                Node node = parentModel.getNode();
-                if (node.hasNode(relPath)) {
-                    Node linkNode = node.getNode(relPath);
-                    if (linkNode.isNodeType(HippoNodeType.NT_FACETSELECT)) {
-                        String uuid = linkNode.getProperty(HippoNodeType.HIPPO_DOCBASE).getValue().getString();
-                        Item item = node.getSession().getNodeByUUID(uuid);
-                        if (item != null) {
-                            return new JcrNodeModel(item.getPath());
-                        }
-                    }
-                }
-            } catch (PathNotFoundException e) {
-                log.error("Error finding facet node for relative path " + relPath, e);
-            } catch (RepositoryException e) {
-                log.error("Error finding facet node for relative path " + relPath, e);
-            }
+            relPath = RichTextUtil.decode(relPath);
+            
         }
         return null;
     }
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/services/links/XinhaLink.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/services/links/XinhaLink.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/services/links/XinhaLink.java	(working copy)
@@ -17,7 +17,7 @@
 
 import java.util.Map;
 
-import org.hippoecm.frontend.plugins.xinha.dialog.AbstractPersistedMap;
+import org.hippoecm.frontend.plugins.xinha.services.AbstractPersistedMap;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/services/links/XinhaLinkService.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/services/links/XinhaLinkService.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/services/links/XinhaLinkService.java	(working copy)
@@ -23,13 +23,11 @@
 import javax.jcr.NodeIterator;
 import javax.jcr.RepositoryException;
 
-import org.apache.wicket.IClusterable;
 import org.apache.wicket.model.IDetachable;
 import org.hippoecm.frontend.model.JcrNodeModel;
-import org.hippoecm.frontend.plugins.xinha.XinhaUtil;
-import org.hippoecm.frontend.plugins.xinha.services.XinhaFacetHelper;
+import org.hippoecm.frontend.plugins.xinha.model.RichTextLink;
+import org.hippoecm.frontend.plugins.xinha.model.RichTextUtil;
 import org.hippoecm.repository.api.HippoNodeType;
-import org.hippoecm.repository.api.NodeNameCodec;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -89,51 +87,24 @@
     
     private String createLink(JcrNodeModel nodeModel) {
         try {
-            String link = createLink(new NodeItem(nodeModel.getNode()));
-            return XinhaUtil.encode(link);
+            String link = createLink(new RichTextLink(nodeModel.getNode()));
+            return RichTextUtil.encode(link);
         } catch (RepositoryException e) {
             log.error("Error creating NodeItem for nodeModel[" + nodeModel.getItemModel().getPath() + "]");
         }
         return null;
     }
 
-    private String createLink(NodeItem item) {
-        XinhaFacetHelper helper = new XinhaFacetHelper();
+    private String createLink(RichTextLink item) {
         Node node = nodeModel.getNode();
         try {
-            return helper.createFacet(node, item.getNodeName(), item.getUuid());
+            return RichTextUtil.createFacet(node, item.getNodeName(), item.getUuid());
         } catch (RepositoryException e) {
             log.error("Failed to create facet for " + item.getNodeName(), e);
         }
         return "";
     }
 
-    private class NodeItem implements IClusterable {
-        private static final long serialVersionUID = 1L;
-
-        private String uuid;
-        private String nodeName;
-
-        public NodeItem(Node listNode) throws RepositoryException {
-            this(listNode, null);
-        }
-
-        public NodeItem(Node listNode, String displayName) throws RepositoryException {
-            if (listNode.isNodeType("mix:referenceable")) {
-                this.uuid = listNode.getUUID();
-            }
-            this.nodeName = NodeNameCodec.encode(listNode.getName());
-        }
-
-        public String getNodeName() {
-            return nodeName;
-        }
-
-        public String getUuid() {
-            return uuid;
-        }
-    }
-
     private class InternalLink extends InternalXinhaLink {
         private static final long serialVersionUID = 1L;
 
@@ -155,7 +126,7 @@
         }
 
         public void delete() {
-            String relPath = XinhaUtil.decode(getHref());
+            String relPath = RichTextUtil.decode(getHref());
             Node node = nodeModel.getNode();
             try {
                 if (node.hasNode(relPath)) {
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/services/AbstractPersistedMap.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/services/AbstractPersistedMap.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/services/AbstractPersistedMap.java	(working copy)
@@ -13,13 +13,14 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.hippoecm.frontend.plugins.xinha.dialog;
+package org.hippoecm.frontend.plugins.xinha.services;
 
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
 import java.util.Map.Entry;
 
+
 public abstract class AbstractPersistedMap extends HashMap implements IPersistedMap {
     private static final long serialVersionUID = 1L;
 

Property changes on: src/main/java/org/hippoecm/frontend/plugins/xinha/services/AbstractPersistedMap.java
___________________________________________________________________
Added: svn:keywords
   + Id

Index: src/main/java/org/hippoecm/frontend/plugins/xinha/services/JavascriptUtil.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/services/JavascriptUtil.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/services/JavascriptUtil.java	(working copy)
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package org.hippoecm.frontend.plugins.xinha.dialog;
+package org.hippoecm.frontend.plugins.xinha.services;
 
 import java.util.regex.Pattern;
 

Property changes on: src/main/java/org/hippoecm/frontend/plugins/xinha/services/JavascriptUtil.java
___________________________________________________________________
Added: svn:mime-type
   + text/plain
Added: svn:keywords
   + Id

Index: src/main/java/org/hippoecm/frontend/plugins/xinha/services/XinhaDocumentLink.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/services/XinhaDocumentLink.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/services/XinhaDocumentLink.java	(working copy)
@@ -14,33 +14,36 @@
  *  limitations under the License.
  */
 
-package org.hippoecm.frontend.plugins.xinha.dialog;
+package org.hippoecm.frontend.plugins.xinha.services;
 
 import java.util.Map;
 
-import org.hippoecm.frontend.model.JcrNodeModel;
+import javax.jcr.Node;
+
+import org.apache.wicket.model.IModel;
+import org.hippoecm.frontend.plugins.xinha.model.RichText;
 import org.hippoecm.frontend.plugins.xinha.services.links.XinhaLink;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public abstract class DocumentLink extends XinhaLink {
+public abstract class XinhaDocumentLink extends XinhaLink {
     private static final long serialVersionUID = 1L;
 
     @SuppressWarnings("unused")
     private final static String SVN_ID = "$Id$";
     
-    protected static final Logger log = LoggerFactory.getLogger(DocumentLink.class);
+    protected static final Logger log = LoggerFactory.getLogger(XinhaDocumentLink.class);
     
-    private JcrNodeModel initialModel;
-    private JcrNodeModel selectedModel;
+    private IModel<Node> initialModel;
+    private IModel<Node> selectedModel;
 
-    public DocumentLink(Map<String, String> values, JcrNodeModel parentModel) {
+    public XinhaDocumentLink(Map<String, String> values, IModel<RichText> parentModel) {
         super(values);
 
         initialModel = selectedModel = createInitialModel(parentModel);
     }
 
-    protected abstract JcrNodeModel createInitialModel(JcrNodeModel parentModel);
+    protected abstract IModel<Node> createInitialModel(IModel<RichText> parentModel);
 
     @Override
     public boolean isValid() {
@@ -74,11 +77,11 @@
         return initialModel == null || isReplacing();
     }
 
-    public JcrNodeModel getNodeModel() {
+    public IModel<Node> getNodeModel() {
         return selectedModel;
     }
 
-    public void setNodeModel(JcrNodeModel model) {
+    public void setNodeModel(IModel<Node>  model) {
         this.selectedModel = model;
     }
 }

Property changes on: src/main/java/org/hippoecm/frontend/plugins/xinha/services/XinhaDocumentLink.java
___________________________________________________________________
Added: svn:keywords
   + Id

Index: src/main/java/org/hippoecm/frontend/plugins/xinha/services/images/ImageItemFactory.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/services/images/ImageItemFactory.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/services/images/ImageItemFactory.java	(working copy)
@@ -1,183 +0,0 @@
-/*
- *  Copyright 2008 Hippo.
- * 
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- * 
- *       http://www.apache.org/licenses/LICENSE-2.0
- * 
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.hippoecm.frontend.plugins.xinha.services.images;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
-import javax.jcr.AccessDeniedException;
-import javax.jcr.ItemNotFoundException;
-import javax.jcr.Node;
-import javax.jcr.RepositoryException;
-import javax.jcr.UnsupportedRepositoryOperationException;
-import javax.jcr.nodetype.NodeDefinition;
-import javax.jcr.nodetype.NodeType;
-
-import org.apache.wicket.IClusterable;
-import org.hippoecm.frontend.model.JcrNodeModel;
-import org.hippoecm.frontend.plugins.xinha.XinhaUtil;
-import org.hippoecm.repository.api.HippoNode;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class ImageItemFactory implements IClusterable {
-    @SuppressWarnings("unused")
-    private final static String SVN_ID = "$Id$";
-
-    private static final long serialVersionUID = 1L;
-
-    private final static Logger log = LoggerFactory.getLogger(ImageItemFactory.class);
-
-    final static String BINARIES_PREFIX = "binaries";
-
-    private JcrNodeModel nodeModel;
-
-    public ImageItemFactory(JcrNodeModel nodeModel) {
-        this.nodeModel = nodeModel;
-    }
-
-    public ImageItem createImageItem(Map<String, String> values) {
-        String urlValue = values.get(XinhaImage.URL);
-        if (urlValue != null) {
-            urlValue = XinhaUtil.decode(urlValue);
-            if (urlValue.startsWith(BINARIES_PREFIX)) {
-                // find the nodename of the facetselect
-                String resourcePath = urlValue.substring(BINARIES_PREFIX.length());
-                JcrNodeModel linkedImageModel = new JcrNodeModel(resourcePath).getParentModel();
-                Node virtualImageNode = linkedImageModel.getNode();
-                if (virtualImageNode != null) {
-                    try {
-                        Node imageNode;
-                        if (virtualImageNode instanceof HippoNode) {
-                            imageNode = ((HippoNode) virtualImageNode).getCanonicalNode();
-                        } else {
-                            imageNode = virtualImageNode;
-                        }
-                        if (imageNode != null) {
-                            ImageItem item = createImageItem(imageNode);
-                            item.setFacetName(virtualImageNode.getParent().getName());
-                            return item;
-                        }
-                    } catch (RepositoryException e) {
-                        log.error("Error retrieving canonical node for imageNode[" + resourcePath + "]", e);
-                    }
-                } else {
-                    log.error("Error retrieving virtual node for imageNode[" + resourcePath + "]");
-                }
-            }
-        }
-        return null;
-    }
-
-    public ImageItem createImageItem(Node node) throws UnsupportedRepositoryOperationException, ItemNotFoundException,
-            AccessDeniedException, RepositoryException {
-
-        NodeType nodetype = node.getPrimaryNodeType();
-        if (nodetype.getName().equals("hippo:handle")) {
-            node = node.getNode(node.getName());
-        }
-
-        List<String> resourceDefinitions = new ArrayList<String>();
-        for (NodeDefinition nd : node.getPrimaryNodeType().getChildNodeDefinitions()) {
-            if (!nd.getName().equals(node.getPrimaryItem().getName()) && nd.getDefaultPrimaryType() != null
-                    && nd.getDefaultPrimaryType().isNodeType("hippo:resource")) {
-                resourceDefinitions.add(nd.getName());
-            }
-        }
-        String path = node.getPath();
-        return new ImageItem(node.getPath(), node.getParent().getUUID(), node.getPrimaryItem().getName(), node
-                .getName(), resourceDefinitions, nodeModel.getNode().getPath());
-    }
-
-    public static class ImageItem implements IClusterable {
-        private static final long serialVersionUID = 1L;
-      
-        private String parentPath;
-        private String path;
-        private String uuid;
-        private String nodeName;
-        private String facetName;
-        private String primaryItemName;
-        private List<String> resourceDefinitions;
-        private String selectedResourceDefinition;
-
-        public ImageItem(String path, String uuid, String primaryItemName, String nodeName,
-                List<String> resourceDefinitions, String nodePath) {
-            this.path = path;
-            this.uuid = uuid;
-            this.primaryItemName = primaryItemName;
-            this.facetName = nodeName;
-            this.nodeName = nodeName;
-            this.parentPath = nodePath;
-            this.resourceDefinitions = resourceDefinitions != null ? resourceDefinitions : new ArrayList<String>();
-            if (this.resourceDefinitions.size() == 1) {
-                selectedResourceDefinition = this.resourceDefinitions.get(0);
-            }
-        }
-
-        public String getUuid() {
-            return uuid;
-        }
-
-        public String getPrimaryUrl() {
-            return XinhaUtil.encode("binaries" + path + "/" + primaryItemName);
-        }
-
-        public List<String> getResourceDefinitions() {
-            return resourceDefinitions;
-        }
-
-        public String getNodeName() {
-            return nodeName;
-        }
-
-        public String getSelectedResourceDefinition() {
-            return selectedResourceDefinition;
-        }
-
-        public void setSelectedResourceDefinition(String selectedResourceDefinition) {
-            this.selectedResourceDefinition = selectedResourceDefinition;
-        }
-        
-        public void setFacetName(String facet) {
-            this.facetName = facet;
-        }
-        
-        public String getFacetName() {
-            return facetName;
-        }
-        
-        public String getUrl() {
-            String url = "binaries" + parentPath + "/" + facetName;
-            if (selectedResourceDefinition != null) {
-                return XinhaUtil.encode(url + "/{_document}/" + selectedResourceDefinition);
-            }
-            return XinhaUtil.encode(url);
-        }
-
-        public boolean isValid() {
-            return path != null && uuid != null
-                    && !(resourceDefinitions.size() > 1 && selectedResourceDefinition == null);
-        }
-
-        public JcrNodeModel getNodeModel() {
-            return new JcrNodeModel(path);
-        }
-
-    }
-}
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/services/images/XinhaImage.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/services/images/XinhaImage.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/services/images/XinhaImage.java	(working copy)
@@ -23,21 +23,23 @@
 
 import org.apache.wicket.Session;
 import org.hippoecm.frontend.model.JcrNodeModel;
-import org.hippoecm.frontend.plugins.xinha.XinhaUtil;
-import org.hippoecm.frontend.plugins.xinha.dialog.DocumentLink;
+import org.hippoecm.frontend.plugins.xinha.model.RichTextUtil;
+import org.hippoecm.frontend.plugins.xinha.services.XinhaDocumentLink;
 import org.hippoecm.frontend.session.UserSession;
 import org.hippoecm.repository.api.HippoNode;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public abstract class XinhaImage extends DocumentLink {
+/**
+ * A xinha image provides a bean that is used by the client side code to create an image
+ * element in the content.  It is created from the parameters that the client sends.
+ */
+public abstract class XinhaImage extends XinhaDocumentLink {
     private static final long serialVersionUID = 1L;
 
     final static String SVN_ID = "$Id$";
     
     static final Logger log = LoggerFactory.getLogger(XinhaImage.class);
-    
-    final static String BINARIES_PREFIX = "binaries";
 
     public static final String BASE = "f_base";
     public static final String URL = "f_url";
@@ -67,7 +69,7 @@
         if (url != null && url.startsWith(BINARIES_PREFIX)) {
 
             // find the nodename of the facetselect
-            String path = XinhaUtil.decode(url.substring(BINARIES_PREFIX.length()));
+            String path = RichTextUtil.decode(url.substring(BINARIES_PREFIX.length()));
             UserSession session = (UserSession) Session.get();
             try {
                 HippoNode node = (HippoNode) session.getJcrSession().getRootNode().getNode(path).getParent();
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/services/images/XinhaImageService.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/services/images/XinhaImageService.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/services/images/XinhaImageService.java	(working copy)
@@ -26,8 +26,9 @@
 
 import org.apache.wicket.model.IDetachable;
 import org.hippoecm.frontend.model.JcrNodeModel;
-import org.hippoecm.frontend.plugins.xinha.services.XinhaFacetHelper;
-import org.hippoecm.frontend.plugins.xinha.services.images.ImageItemFactory.ImageItem;
+import org.hippoecm.frontend.plugins.xinha.model.RichTextImage;
+import org.hippoecm.frontend.plugins.xinha.model.ImageItemFactory;
+import org.hippoecm.frontend.plugins.xinha.model.RichTextUtil;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -50,7 +51,7 @@
     //Attach an image with only a JcrNodeModel. Method return json object wich 
     public String attach(JcrNodeModel model) {
         //TODO: fix drag-drop replacing
-        ImageItem item = createImageItem(model);
+        RichTextImage item = createImageItem(model);
         if (attachImageItem(item)) {
             StringBuilder sb = new StringBuilder();
             sb.append("xinha_editors.").append(getXinhaName()).append(".plugins.InsertImage.instance.insertImage(")
@@ -69,10 +70,10 @@
             public void save() {
                 if (isAttacheable()) {
                     if (isReplacing()) {
-                        ImageItem remove = createImageItem(getInitialValues());
+                        RichTextImage remove = createImageItem(getInitialValues());
                         detachImageItem(remove);
                     }
-                    ImageItem item = createImageItem(getNodeModel());
+                    RichTextImage item = createImageItem(getNodeModel());
                     if (attachImageItem(item)) {
                         setUrl(item.getUrl());
                     }
@@ -80,7 +81,7 @@
             }
 
             public void delete() {
-                ImageItem item = createImageItem(this);
+                RichTextImage item = createImageItem(this);
                 detachImageItem(item);
                 setUrl("");
             }
@@ -92,11 +93,11 @@
         nodeModel.detach();
     }
     
-    private ImageItem createImageItem(Map<String, String> values) {
+    private RichTextImage createImageItem(Map<String, String> values) {
         return factory.createImageItem(values);
     }
 
-    private ImageItem createImageItem(JcrNodeModel nodeModel) {
+    private RichTextImage createImageItem(JcrNodeModel nodeModel) {
         try {
             return factory.createImageItem(nodeModel.getNode());
         } catch (UnsupportedRepositoryOperationException e) {
@@ -111,11 +112,10 @@
         return null;
     }
 
-    private boolean attachImageItem(ImageItem item) {
-        XinhaFacetHelper helper = new XinhaFacetHelper();
+    private boolean attachImageItem(RichTextImage item) {
         Node node = nodeModel.getNode();
         try {
-            String facet = helper.createFacet(node, item.getNodeName(), item.getUuid());
+            String facet = RichTextUtil.createFacet(node, item.getNodeName(), item.getUuid());
             if (facet != null && !facet.equals("")) {
                 item.setFacetName(facet);
                 return true;
@@ -126,7 +126,7 @@
         return false;
     }
 
-    private void detachImageItem(ImageItem item) {
+    private void detachImageItem(RichTextImage item) {
         if (item.getUuid() != null) {
             Node node = nodeModel.getNode();
             String facet = item.getFacetName();
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/services/IPersistedMap.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/services/IPersistedMap.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/services/IPersistedMap.java	(working copy)
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.hippoecm.frontend.plugins.xinha.dialog;
+package org.hippoecm.frontend.plugins.xinha.services;
 
 import java.util.Map;
 

Property changes on: src/main/java/org/hippoecm/frontend/plugins/xinha/services/IPersistedMap.java
___________________________________________________________________
Added: svn:keywords
   + Id

Index: src/main/java/org/hippoecm/frontend/plugins/xinha/services/XinhaFacetHelper.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/services/XinhaFacetHelper.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/services/XinhaFacetHelper.java	(working copy)
@@ -1,88 +0,0 @@
-/*
- *  Copyright 2008 Hippo.
- * 
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- * 
- *       http://www.apache.org/licenses/LICENSE-2.0
- * 
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.hippoecm.frontend.plugins.xinha.services;
-
-import javax.jcr.ItemExistsException;
-import javax.jcr.Node;
-import javax.jcr.PathNotFoundException;
-import javax.jcr.RepositoryException;
-import javax.jcr.lock.LockException;
-import javax.jcr.nodetype.ConstraintViolationException;
-import javax.jcr.nodetype.NoSuchNodeTypeException;
-import javax.jcr.version.VersionException;
-
-import org.hippoecm.repository.api.HippoNodeType;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class XinhaFacetHelper {
-
-    @SuppressWarnings("unused")
-    private final static String SVN_ID = "$Id$";
-
-    static final Logger log = LoggerFactory.getLogger(XinhaFacetHelper.class);
-
-    public String createFacet(Node node, String link, String uuid) throws ItemExistsException, PathNotFoundException,
-            NoSuchNodeTypeException, LockException, VersionException, ConstraintViolationException, RepositoryException {
-        if (uuid == null) {
-            log.error("uuid is null. Should never be possible for facet");
-            return "";
-        }
-
-        String linkName = newLinkName(node, link);
-
-        Node facetselect = node.addNode(linkName, HippoNodeType.NT_FACETSELECT);
-        facetselect.setProperty(HippoNodeType.HIPPO_DOCBASE, uuid);
-        facetselect.setProperty(HippoNodeType.HIPPO_FACETS, new String[] {});
-        facetselect.setProperty(HippoNodeType.HIPPO_MODES, new String[] {});
-        facetselect.setProperty(HippoNodeType.HIPPO_VALUES, new String[] {});
-
-        // save the document (the draft so no problem)
-        Node document = node.getParent();
-        while (document.getDepth() > 0) {
-            if (document.isNodeType(HippoNodeType.NT_DOCUMENT)) {
-                if (document.isNew()) {
-                    log.warn("Document is new, saving session");
-                    document.getSession().save();
-                    document.getSession().refresh(false);
-                } else {
-                    document.save();
-                    document.refresh(false);
-                }
-                break;
-            }
-            document = document.getParent();
-        }
-
-        return linkName;
-    }
-
-    private String newLinkName(Node node, String link) throws RepositoryException {
-        if (!node.hasNode(link)) {
-            return link;
-        }
-        int postfix = 1;
-        while (true) {
-            String testLink = link + "_" + postfix;
-            if (!node.hasNode(testLink)) {
-                return testLink;
-            }
-            postfix++;
-        }
-    }
-
-}
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/XinhaUtil.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/XinhaUtil.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/XinhaUtil.java	(working copy)
@@ -1,42 +0,0 @@
-/*
- *  Copyright 2008 Hippo.
- * 
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- * 
- *       http://www.apache.org/licenses/LICENSE-2.0
- * 
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.hippoecm.frontend.plugins.xinha;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.wicket.protocol.http.WicketURLDecoder;
-import org.apache.wicket.protocol.http.WicketURLEncoder;
-
-public class XinhaUtil {
-    @SuppressWarnings("unused")
-    private final static String SVN_ID = "$Id$";
-
-    public static final String encode(String path) {
-        String[] elements = StringUtils.split(path, '/');
-        for (int i = 0; i < elements.length; i++) {
-            elements[i] = WicketURLEncoder.PATH_INSTANCE.encode(elements[i], "UTF-8");
-        }
-        return StringUtils.join(elements, '/');
-    }
-
-    public static final String decode(String path) {
-        String[] elements = StringUtils.split(path, '/');
-        for (int i = 0; i < elements.length; i++) {
-            elements[i] = WicketURLDecoder.PATH_INSTANCE.decode(elements[i], "UTF-8");
-        }
-        return StringUtils.join(elements, '/');
-    }
-
-}
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/AbstractXinhaPlugin.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/AbstractXinhaPlugin.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/AbstractXinhaPlugin.java	(working copy)
@@ -25,17 +25,13 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
-import javax.jcr.Node;
-import javax.jcr.RepositoryException;
-
 import org.apache.wicket.IClusterable;
 import org.apache.wicket.Page;
 import org.apache.wicket.Request;
+import org.apache.wicket.RequestContext;
 import org.apache.wicket.RequestCycle;
 import org.apache.wicket.ResourceReference;
 import org.apache.wicket.Session;
-import org.apache.wicket.ajax.AbstractDefaultAjaxBehavior;
-import org.apache.wicket.ajax.AjaxRequestTarget;
 import org.apache.wicket.behavior.AbstractAjaxBehavior;
 import org.apache.wicket.behavior.HeaderContributor;
 import org.apache.wicket.markup.ComponentTag;
@@ -48,30 +44,20 @@
 import org.apache.wicket.model.IModel;
 import org.apache.wicket.model.ResourceModel;
 import org.apache.wicket.model.StringResourceModel;
-import org.apache.wicket.protocol.http.WicketURLEncoder;
+import org.apache.wicket.protocol.http.portlet.PortletRequestContext;
 import org.hippoecm.frontend.Home;
 import org.hippoecm.frontend.model.JcrNodeModel;
-import org.hippoecm.frontend.model.properties.JcrPropertyValueModel;
 import org.hippoecm.frontend.plugin.IPluginContext;
 import org.hippoecm.frontend.plugin.config.IPluginConfig;
-import org.hippoecm.frontend.plugins.xinha.XinhaHtmlProcessor.ILinkDecorator;
 import org.hippoecm.frontend.plugins.xinha.dialog.XinhaDialogBehavior;
-import org.hippoecm.frontend.plugins.xinha.dialog.images.ImagePickerBehavior;
 import org.hippoecm.frontend.plugins.xinha.dialog.links.ExternalLinkBehavior;
-import org.hippoecm.frontend.plugins.xinha.dialog.links.InternalLinkBehavior;
-import org.hippoecm.frontend.plugins.xinha.dragdrop.XinhaDropBehavior;
-import org.hippoecm.frontend.plugins.xinha.services.images.XinhaImageService;
-import org.hippoecm.frontend.plugins.xinha.services.links.XinhaLinkService;
 import org.hippoecm.frontend.plugins.yui.AbstractYuiBehavior;
 import org.hippoecm.frontend.plugins.yui.YuiPluginHelper;
 import org.hippoecm.frontend.plugins.yui.header.IYuiContext;
 import org.hippoecm.frontend.plugins.yui.header.templates.DynamicTextTemplate;
 import org.hippoecm.frontend.plugins.yui.webapp.IYuiManager;
-import org.hippoecm.frontend.service.IBrowseService;
 import org.hippoecm.frontend.service.render.HeaderContributorHelper;
 import org.hippoecm.frontend.service.render.RenderPlugin;
-import org.hippoecm.frontend.session.UserSession;
-import org.hippoecm.repository.api.HippoNodeType;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -83,7 +69,6 @@
 
     static final Logger log = LoggerFactory.getLogger(AbstractXinhaPlugin.class);
 
-    private static final String BINARIES_PREFIX = "binaries";
     public static final String XINHA_SAVED_FLAG = "XINHA_SAVED_FLAG";
     public static final String XINHA_PARAM_PREFIX = "xinha-param-prefix-";
 
@@ -94,13 +79,9 @@
 
     private final String mode;
     private XinhaTextArea editor;
-    private Configuration configuration;
+    protected final Configuration configuration;
 
-    private InternalLinkBehavior linkPickerBehavior;
     private ExternalLinkBehavior externalLinkBehavior;
-    private ImagePickerBehavior imagePickerBehavior;
-    private XinhaImageService imageService;
-    private XinhaLinkService linkService;
     private JcrNodeModel nodeModel;
 
     public AbstractXinhaPlugin(IPluginContext context, final IPluginConfig config) {
@@ -111,8 +92,8 @@
         add(fragment);
 
         if ("edit".equals(mode)) {
-
             fragment.add(editor = new XinhaTextArea("value", new XinhaModel(getValueModel())));
+            fragment.add(externalLinkBehavior = new ExternalLinkBehavior(context, config));
 
             configuration = new Configuration(config);
             configuration.setName(editor.getMarkupId());
@@ -122,71 +103,8 @@
 
             // dialog functionality for plugins
             add(HeaderContributor.forJavaScript(XINHA_MODAL_JS));
-
-            String nodePath = getValueModel().getJcrPropertymodel().getItemModel().getParentModel().getPath();
-            configuration.addProperty("prefix", XinhaUtil.encode(BINARIES_PREFIX + nodePath));
-
-            JcrNodeModel nodeModel = new JcrNodeModel(nodePath);
-            imageService = new XinhaImageService(nodeModel) {
-                private static final long serialVersionUID = 1L;
-
-                @Override
-                protected String getXinhaName() {
-                    return configuration.getName();
-                }
-
-            };
-
-            linkService = new XinhaLinkService(nodeModel) {
-                private static final long serialVersionUID = 1L;
-
-                @Override
-                protected String getXinhaName() {
-                    return configuration.getName();
-                }
-
-            };
-
-            fragment.add(imagePickerBehavior = new ImagePickerBehavior(context, config
-                    .getPluginConfig("Xinha.plugins.InsertImage"), imageService));
-            fragment.add(linkPickerBehavior = new InternalLinkBehavior(context, config
-                    .getPluginConfig("Xinha.plugins.CreateLink"), linkService));
-            fragment.add(externalLinkBehavior = new ExternalLinkBehavior(context, config));
-
-            add(new XinhaDropBehavior(context, config) {
-                private static final long serialVersionUID = 1L;
-
-                @Override
-                protected void insertImage(JcrNodeModel model, AjaxRequestTarget target) {
-                    String returnScript = imageService.attach(model);
-                    if (returnScript != null) {
-                        target.getHeaderResponse().renderOnDomReadyJavascript(returnScript);
-                    }
-                }
-
-                @Override
-                protected void updateImage(JcrNodeModel model, AjaxRequestTarget target) {
-                    //TODO: check if old image facet select should be deleted
-                    insertImage(model, target);
-                }
-
-                @Override
-                protected void insertLink(JcrNodeModel model, AjaxRequestTarget target) {
-                    String returnScript = linkService.attach(model);
-                    if (returnScript != null) {
-                        target.getHeaderResponse().renderOnDomReadyJavascript(returnScript);
-                    }
-                }
-
-                @Override
-                protected void updateLink(JcrNodeModel model, AjaxRequestTarget target) {
-                    //TODO: check if old link facet select should be deleted
-                    insertLink(model, target);
-                }
-            });
         } else {
-            final InternalLinkBrowserBehavior il = new InternalLinkBrowserBehavior();
-            add(il);
+            configuration = null;
 
             fragment.add(new WebMarkupContainer("value", getValueModel()) {
                 private static final long serialVersionUID = 1L;
@@ -195,14 +113,7 @@
                 protected void onComponentTagBody(final MarkupStream markupStream, final ComponentTag openTag) {
                     String text = (String) getDefaultModelObject();
                     if (text != null) {
-                        JcrPropertyValueModel propertyValueModel = getValueModel();
-                        String prefix = XinhaUtil.encode(BINARIES_PREFIX
-                                + propertyValueModel.getJcrPropertymodel().getItemModel().getParentModel().getPath())
-                                + "/";
-
-                        String processed = XinhaHtmlProcessor.prefixImageLinks(text, prefix);
-                        processed = XinhaHtmlProcessor.decorateInternalLinks(text, il);
-                        getResponse().write(processed);
+                        getResponse().write(getValueModel().getObject());
                     }
                     renderComponentTagBody(markupStream, openTag);
                 }
@@ -210,8 +121,16 @@
         }
     }
 
-    protected abstract JcrPropertyValueModel getValueModel();
+    protected String getBinaryUrl(String path) {
+        RequestContext rc = RequestContext.get();
+        if (rc.isPortletRequest()) {
+            return ((PortletRequestContext) rc).encodeResourceURL(path).toString();
+        }
+        return path;
+    }
 
+    protected abstract IModel<String> getValueModel();
+
     /**
      * Callback urls aren't known at construction so set them here
      */
@@ -220,17 +139,6 @@
         if (configuration != null) {
             configuration.addProperty("callbackUrl", editor.getCallbackUrl());
 
-            //TODO: add enum to distinguish sorts of drops available
-            if (configuration.getPluginConfiguration("InsertImage") != null) {
-                configuration.getPluginConfiguration("InsertImage").addProperty("callbackUrl",
-                        imagePickerBehavior.getCallbackUrl().toString());
-            }
-
-            if (configuration.getPluginConfiguration("CreateLink") != null) {
-                configuration.getPluginConfiguration("CreateLink").addProperty("callbackUrl",
-                        linkPickerBehavior.getCallbackUrl().toString());
-            }
-
             if (configuration.getPluginConfiguration("CreateExternalLink") != null) {
                 configuration.getPluginConfiguration("CreateExternalLink").addProperty("callbackUrl",
                         externalLinkBehavior.getCallbackUrl().toString());
@@ -241,53 +149,39 @@
 
     @Override
     protected void onDetach() {
-        if (imageService != null) {
-            imageService.detach();
-        }
-        if (linkService != null) {
-            linkService.detach();
-        }
         if (nodeModel != null) {
             nodeModel.detach();
         }
         super.onDetach();
     }
 
-    protected String clean(final String value) throws Exception {
+    protected String clean(String value) throws Exception {
         if (value != null) {
             IHtmlCleanerService cleaner = getPluginContext().getService(IHtmlCleanerService.class.getName(),
                     IHtmlCleanerService.class);
             if (cleaner != null) {
-                return cleaner.clean(value);
+                value = cleaner.clean(value);
             }
         }
         return value;
     }
 
-    private void removeLinks(String text) {
-        Set<String> linkNames = XinhaHtmlProcessor.getInternalLinks(text);
-        linkService.cleanup(linkNames);
-    }
-
-    private class XinhaModel implements IModel {
+    private class XinhaModel implements IModel<String> {
         private static final long serialVersionUID = 1L;
 
-        private JcrPropertyValueModel valueModel;
+        private IModel<String> valueModel;
 
-        public XinhaModel(JcrPropertyValueModel valueModel) {
+        public XinhaModel(IModel<String> valueModel) {
             this.valueModel = valueModel;
         }
 
-        public Object getObject() {
+        public String getObject() {
             return valueModel.getObject();
         }
 
-        public void setObject(Object value) {
+        public void setObject(String value) {
             try {
-                String cleanedValue = clean((String) value);
-                if (cleanedValue != null) {
-                    removeLinks(cleanedValue);
-                }
+                String cleanedValue = clean(value);
                 valueModel.setObject(cleanedValue);
             } catch (Exception e) {
                 error(new ResourceModel("error-while-cleaning-conent", "An error occured while cleaning the content"));
@@ -318,8 +212,7 @@
 
                 public void onRequest() {
                     Request request = RequestCycle.get().getRequest();
-                    boolean save = Boolean.valueOf(request.getParameter("save")).booleanValue();
-                    if (save) {
+                    if (request.getParameters(getInputName()) != null) {
                         processInput();
                     }
                 }
@@ -350,45 +243,6 @@
 
     }
 
-    class InternalLinkBrowserBehavior extends AbstractDefaultAjaxBehavior implements ILinkDecorator {
-        private static final long serialVersionUID = 1L;
-
-        @Override
-        protected void respond(AjaxRequestTarget target) {
-            Request request = RequestCycle.get().getRequest();
-            String link = request.getParameter("link");
-            if (link != null) {
-                IBrowseService browser = getPluginContext().getService(
-                        getPluginConfig().getString(IBrowseService.BROWSER_ID), IBrowseService.class);
-                if (browser != null) {
-                    JcrNodeModel model = (JcrNodeModel) getModel();
-                    Node node = model.getNode();
-                    try {
-                        if (node.hasNode(link)) {
-                            node = node.getNode(link);
-                            if (node.isNodeType(HippoNodeType.NT_FACETSELECT)) {
-                                String uuid = node.getProperty(HippoNodeType.HIPPO_DOCBASE).getString();
-                                javax.jcr.Session s = ((UserSession) getSession()).getJcrSession();
-                                node = s.getNodeByUUID(uuid);
-                                browser.browse(new JcrNodeModel(node));
-                            }
-                        }
-                    } catch (RepositoryException e) {
-                        e.printStackTrace();
-                    }
-                }
-            }
-        }
-
-        public String decorate(String input) {
-            input = WicketURLEncoder.QUERY_INSTANCE.encode(input);
-            return "javascript: "
-                    + generateCallbackScript("wicketAjaxGet('" + getCallbackUrl(false) + "&link=" + input + "'")
-                            .toString();
-        }
-
-    }
-
     class EditorManagerBehavior extends AbstractYuiBehavior {
         private static final long serialVersionUID = 1L;
 
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/links/ExternalLinkBehavior.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/links/ExternalLinkBehavior.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/links/ExternalLinkBehavior.java	(working copy)
@@ -20,8 +20,8 @@
 import org.apache.wicket.model.Model;
 import org.hippoecm.frontend.plugin.IPluginContext;
 import org.hippoecm.frontend.plugin.config.IPluginConfig;
-import org.hippoecm.frontend.plugins.xinha.dialog.AbstractPersistedMap;
 import org.hippoecm.frontend.plugins.xinha.dialog.XinhaDialogBehavior;
+import org.hippoecm.frontend.plugins.xinha.services.AbstractPersistedMap;
 import org.hippoecm.frontend.plugins.xinha.services.links.ExternalXinhaLink;
 
 public class ExternalLinkBehavior extends XinhaDialogBehavior {
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/links/ExternalLinkDialog.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/links/ExternalLinkDialog.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/links/ExternalLinkDialog.java	(working copy)
@@ -23,8 +23,8 @@
 import org.apache.wicket.util.value.ValueMap;
 import org.hippoecm.frontend.plugin.IPluginContext;
 import org.hippoecm.frontend.plugin.config.IPluginConfig;
-import org.hippoecm.frontend.plugins.xinha.dialog.AbstractPersistedMap;
 import org.hippoecm.frontend.plugins.xinha.dialog.AbstractXinhaDialog;
+import org.hippoecm.frontend.plugins.xinha.services.AbstractPersistedMap;
 import org.hippoecm.frontend.plugins.xinha.services.links.XinhaLink;
 import org.hippoecm.frontend.widgets.BooleanFieldWidget;
 import org.hippoecm.frontend.widgets.TextFieldWidget;
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/links/DocumentBrowserDialog.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/links/DocumentBrowserDialog.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/links/DocumentBrowserDialog.java	(working copy)
@@ -22,7 +22,7 @@
 import org.hippoecm.frontend.plugin.IPluginContext;
 import org.hippoecm.frontend.plugin.config.IPluginConfig;
 import org.hippoecm.frontend.plugins.xinha.dialog.AbstractBrowserDialog;
-import org.hippoecm.frontend.plugins.xinha.dialog.AbstractPersistedMap;
+import org.hippoecm.frontend.plugins.xinha.services.AbstractPersistedMap;
 import org.hippoecm.frontend.plugins.xinha.services.links.InternalXinhaLink;
 import org.hippoecm.frontend.plugins.xinha.services.links.XinhaLink;
 import org.hippoecm.frontend.widgets.BooleanFieldWidget;
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/links/InternalLinkBehavior.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/links/InternalLinkBehavior.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/links/InternalLinkBehavior.java	(working copy)
@@ -19,8 +19,8 @@
 import org.apache.wicket.model.Model;
 import org.hippoecm.frontend.plugin.IPluginContext;
 import org.hippoecm.frontend.plugin.config.IPluginConfig;
-import org.hippoecm.frontend.plugins.xinha.dialog.AbstractPersistedMap;
 import org.hippoecm.frontend.plugins.xinha.dialog.XinhaDialogBehavior;
+import org.hippoecm.frontend.plugins.xinha.services.AbstractPersistedMap;
 import org.hippoecm.frontend.plugins.xinha.services.links.XinhaLinkService;
 
 public class InternalLinkBehavior extends XinhaDialogBehavior {
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/AbstractPersistedMap.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/AbstractPersistedMap.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/AbstractPersistedMap.java	(working copy)
@@ -1,74 +0,0 @@
-/*
- *  Copyright 2008 Hippo.
- * 
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- * 
- *       http://www.apache.org/licenses/LICENSE-2.0
- * 
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.hippoecm.frontend.plugins.xinha.dialog;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-import java.util.Map.Entry;
-
-public abstract class AbstractPersistedMap extends HashMap implements IPersistedMap {
-    private static final long serialVersionUID = 1L;
-
-    @SuppressWarnings("unused")
-    private final static String SVN_ID = "$Id$";
-
-    private Map<String, String> initialValues;
-
-    public AbstractPersistedMap(Map<String, String> values) {
-        if (values != null) {
-            putAll(values);
-        }
-        initialValues = values;
-    }
-
-    public boolean isValid() {
-        return true;
-    }
-
-    public boolean hasChanged() {
-        return !equals(initialValues);
-    }
-
-    public boolean isExisting() {
-        return initialValues != null;
-    }
-
-    public String toJsString() {
-        StringBuilder sb = new StringBuilder();
-        sb.append('{');
-        boolean first = true;
-        for (Entry e : (Set<Entry>) entrySet()) {
-            if (first) {
-                first = false;
-            } else {
-                sb.append(',');
-            }
-            sb.append(e.getKey()).append(':').append(serializeValue(e.getValue()));
-        }
-        sb.append('}');
-        return sb.toString();
-    }
-
-    protected Object serializeValue(Object value) {
-        return JavascriptUtil.serialize2JS((String) value);
-    }
-
-    protected Map<String, String> getInitialValues() {
-        return initialValues;
-    }
-
-}
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/JavascriptUtil.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/JavascriptUtil.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/JavascriptUtil.java	(working copy)
@@ -1,45 +0,0 @@
-/*
- *  Copyright 2008 Hippo.
- * 
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- * 
- *       http://www.apache.org/licenses/LICENSE-2.0
- * 
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.hippoecm.frontend.plugins.xinha.dialog;
-
-import java.util.regex.Pattern;
-
-public class JavascriptUtil {
-    @SuppressWarnings("unused")
-    private final static String SVN_ID = "$Id$";
-
-    public static final String SINGLE_QUOTE = "'";
-
-    private static Pattern numbers = Pattern.compile("\\d*");
-    //private static Pattern functions = Pattern.compile("(\\w+)\\.(\\w+)");
-
-    public static String serialize2JS(String value) {
-        if (value == null)
-            return "null";
-        else if(value.equals(""))
-            return SINGLE_QUOTE + SINGLE_QUOTE;
-        else if (value.equalsIgnoreCase("true"))
-            return "true";
-        else if (value.equalsIgnoreCase("false"))
-            return "false";
-        else if (numbers.matcher(value).matches()) // || functions.matcher(value).find())
-            return value;
-
-        return SINGLE_QUOTE + value.replaceAll(SINGLE_QUOTE, "\\\\" + SINGLE_QUOTE) + SINGLE_QUOTE;
-    }
-
-}
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/images/ImageBrowserDialog.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/images/ImageBrowserDialog.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/images/ImageBrowserDialog.java	(working copy)
@@ -29,7 +29,7 @@
 import org.hippoecm.frontend.plugin.IPluginContext;
 import org.hippoecm.frontend.plugin.config.IPluginConfig;
 import org.hippoecm.frontend.plugins.xinha.dialog.AbstractBrowserDialog;
-import org.hippoecm.frontend.plugins.xinha.dialog.AbstractPersistedMap;
+import org.hippoecm.frontend.plugins.xinha.services.AbstractPersistedMap;
 import org.hippoecm.frontend.plugins.xinha.services.images.XinhaImage;
 import org.hippoecm.frontend.widgets.TextFieldWidget;
 import org.slf4j.Logger;
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/AbstractBrowserDialog.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/AbstractBrowserDialog.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/AbstractBrowserDialog.java	(working copy)
@@ -32,6 +32,8 @@
 import org.hippoecm.frontend.plugin.config.IPluginConfig;
 import org.hippoecm.frontend.plugin.config.IPluginConfigService;
 import org.hippoecm.frontend.plugins.xinha.XinhaPlugin;
+import org.hippoecm.frontend.plugins.xinha.services.AbstractPersistedMap;
+import org.hippoecm.frontend.plugins.xinha.services.XinhaDocumentLink;
 import org.hippoecm.frontend.service.IRenderService;
 import org.hippoecm.frontend.service.preferences.IPreferencesStore;
 import org.hippoecm.repository.HippoStdNodeType;
@@ -79,13 +81,15 @@
 
         //save modelServiceId and dialogServiceId in cluster config
         String modelServiceId = decorated.getString("wicket.model");
-        IModel<Node> model = ((DocumentLink) getModelObject()).getNodeModel();
+        IModel<Node> model = ((XinhaDocumentLink) getModelObject()).getNodeModel();
 
         if (model == null) {
             IPreferencesStore store = context.getService(IPreferencesStore.SERVICE_ID, IPreferencesStore.class);
-            String lastVisited = store.getString(config.getName(), LAST_VISITED);
-            if (lastVisited != null) {
-                model = new JcrNodeModel(lastVisited);
+            if (store != null) {
+                String lastVisited = store.getString(config.getName(), LAST_VISITED);
+                if (lastVisited != null) {
+                    model = new JcrNodeModel(lastVisited);
+                }
             }
         }
         lastModelVisited = model;
@@ -96,10 +100,10 @@
             @Override
             public void setModel(IModel<Node> newModel) {
                 if (newModel != null) {
-                    DocumentLink link = (DocumentLink) getModelObject();
-                    JcrNodeModel currentModel = link.getNodeModel();
+                    XinhaDocumentLink link = (XinhaDocumentLink) getModelObject();
+                    IModel<Node> currentModel = link.getNodeModel();
                     if (!newModel.equals(currentModel)) {
-                        link.setNodeModel((JcrNodeModel) newModel);
+                        link.setNodeModel(newModel);
                         checkState();
                     }
                 }
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/IPersistedMap.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/IPersistedMap.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/IPersistedMap.java	(working copy)
@@ -1,37 +0,0 @@
-/*
- *  Copyright 2008 Hippo.
- * 
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- * 
- *       http://www.apache.org/licenses/LICENSE-2.0
- * 
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.hippoecm.frontend.plugins.xinha.dialog;
-
-import java.util.Map;
-
-import org.apache.wicket.IClusterable;
-
-public interface IPersistedMap extends Map, IClusterable {
-    final static String SVN_ID = "$Id$";
-    
-    boolean isValid();
-    
-    boolean hasChanged();
-
-    boolean isExisting();
-
-    void save();
-    
-    void delete();
-
-    String toJsString();
-
-}
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/AbstractXinhaDialog.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/AbstractXinhaDialog.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/AbstractXinhaDialog.java	(working copy)
@@ -25,6 +25,8 @@
 import org.apache.wicket.model.ResourceModel;
 import org.apache.wicket.model.StringResourceModel;
 import org.hippoecm.frontend.dialog.AbstractDialog;
+import org.hippoecm.frontend.plugins.xinha.services.AbstractPersistedMap;
+import org.hippoecm.frontend.plugins.xinha.services.IPersistedMap;
 
 public abstract class AbstractXinhaDialog extends AbstractDialog<AbstractPersistedMap> {
     private static final long serialVersionUID = 1L;
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/DocumentLink.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/DocumentLink.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/dialog/DocumentLink.java	(working copy)
@@ -1,84 +0,0 @@
-/*
- *  Copyright 2008 Hippo.
- * 
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- * 
- *       http://www.apache.org/licenses/LICENSE-2.0
- * 
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.hippoecm.frontend.plugins.xinha.dialog;
-
-import java.util.Map;
-
-import org.hippoecm.frontend.model.JcrNodeModel;
-import org.hippoecm.frontend.plugins.xinha.services.links.XinhaLink;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public abstract class DocumentLink extends XinhaLink {
-    private static final long serialVersionUID = 1L;
-
-    @SuppressWarnings("unused")
-    private final static String SVN_ID = "$Id$";
-    
-    protected static final Logger log = LoggerFactory.getLogger(DocumentLink.class);
-    
-    private JcrNodeModel initialModel;
-    private JcrNodeModel selectedModel;
-
-    public DocumentLink(Map<String, String> values, JcrNodeModel parentModel) {
-        super(values);
-
-        initialModel = selectedModel = createInitialModel(parentModel);
-    }
-
-    protected abstract JcrNodeModel createInitialModel(JcrNodeModel parentModel);
-
-    @Override
-    public boolean isValid() {
-        if (selectedModel == null) {
-            return false;
-        }
-        return true;
-    }
-
-    @Override
-    public boolean hasChanged() {
-        if (selectedModel.equals(initialModel)) {
-            return super.hasChanged();
-        }
-        return true;
-    }
-
-    @Override
-    public boolean isExisting() {
-        return initialModel != null;
-    }
-
-    public boolean isReplacing() {
-        if (selectedModel != null && initialModel != null && !selectedModel.equals(initialModel)) {
-            return true;
-        }
-        return false;
-    }
-
-    public boolean isAttacheable() {
-        return initialModel == null || isReplacing();
-    }
-
-    public JcrNodeModel getNodeModel() {
-        return selectedModel;
-    }
-
-    public void setNodeModel(JcrNodeModel model) {
-        this.selectedModel = model;
-    }
-}
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextUtil.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextUtil.java	(revision 0)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextUtil.java	(working copy)
@@ -13,16 +13,33 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.hippoecm.frontend.plugins.xinha;
+package org.hippoecm.frontend.plugins.xinha.model;
 
+import javax.jcr.ItemExistsException;
+import javax.jcr.Node;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.RepositoryException;
+import javax.jcr.lock.LockException;
+import javax.jcr.nodetype.ConstraintViolationException;
+import javax.jcr.nodetype.NoSuchNodeTypeException;
+import javax.jcr.version.VersionException;
+
 import org.apache.commons.lang.StringUtils;
 import org.apache.wicket.protocol.http.WicketURLDecoder;
 import org.apache.wicket.protocol.http.WicketURLEncoder;
+import org.hippoecm.repository.api.HippoNodeType;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
-public class XinhaUtil {
+public class RichTextUtil {
     @SuppressWarnings("unused")
     private final static String SVN_ID = "$Id$";
 
+    private RichTextUtil() {
+    }
+    
+    static final Logger log = LoggerFactory.getLogger(RichTextUtil.class);
+
     public static final String encode(String path) {
         String[] elements = StringUtils.split(path, '/');
         for (int i = 0; i < elements.length; i++) {
@@ -39,4 +56,53 @@
         return StringUtils.join(elements, '/');
     }
 
+    public static String createFacet(Node node, String link, String uuid) throws ItemExistsException, PathNotFoundException,
+            NoSuchNodeTypeException, LockException, VersionException, ConstraintViolationException, RepositoryException {
+        if (uuid == null) {
+            log.error("uuid is null. Should never be possible for facet");
+            return "";
+        }
+
+        String linkName = newLinkName(node, link);
+
+        Node facetselect = node.addNode(linkName, HippoNodeType.NT_FACETSELECT);
+        facetselect.setProperty(HippoNodeType.HIPPO_DOCBASE, uuid);
+        facetselect.setProperty(HippoNodeType.HIPPO_FACETS, new String[] {});
+        facetselect.setProperty(HippoNodeType.HIPPO_MODES, new String[] {});
+        facetselect.setProperty(HippoNodeType.HIPPO_VALUES, new String[] {});
+
+        // save the document (the draft so no problem)
+        Node document = node.getParent();
+        while (document.getDepth() > 0) {
+            if (document.isNodeType(HippoNodeType.NT_DOCUMENT)) {
+                if (document.isNew()) {
+                    log.warn("Document is new, saving session");
+                    document.getSession().save();
+                    document.getSession().refresh(false);
+                } else {
+                    document.save();
+                    document.refresh(false);
+                }
+                break;
+            }
+            document = document.getParent();
+        }
+
+        return linkName;
+    }
+
+    private static String newLinkName(Node node, String link) throws RepositoryException {
+        if (!node.hasNode(link)) {
+            return link;
+        }
+        int postfix = 1;
+        while (true) {
+            String testLink = link + "_" + postfix;
+            if (!node.hasNode(testLink)) {
+                return testLink;
+            }
+            postfix++;
+        }
+    }
+
 }

Property changes on: src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextUtil.java
___________________________________________________________________
Added: svn:keywords
   + Id

Index: src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextLink.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextLink.java	(revision 0)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextLink.java	(revision 0)
@@ -0,0 +1,37 @@
+/**
+ * 
+ */
+package org.hippoecm.frontend.plugins.xinha.model;
+
+import javax.jcr.Node;
+import javax.jcr.RepositoryException;
+
+import org.apache.wicket.IClusterable;
+import org.hippoecm.repository.api.NodeNameCodec;
+
+public class RichTextLink implements IClusterable {
+    private static final long serialVersionUID = 1L;
+
+    private String uuid;
+    private String nodeName;
+
+    public RichTextLink(Node listNode) throws RepositoryException {
+        this(listNode, null);
+    }
+
+    public RichTextLink(Node listNode, String displayName) throws RepositoryException {
+        if (listNode.isNodeType("mix:referenceable")) {
+            this.uuid = listNode.getUUID();
+        }
+        this.nodeName = NodeNameCodec.encode(listNode.getName());
+    }
+
+    public String getNodeName() {
+        return nodeName;
+    }
+
+    public String getUuid() {
+        return uuid;
+    }
+
+}
\ No newline at end of file

Property changes on: src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextLink.java
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native

Index: src/main/java/org/hippoecm/frontend/plugins/xinha/model/ImageItemFactory.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/model/ImageItemFactory.java	(revision 0)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/model/ImageItemFactory.java	(working copy)
@@ -14,7 +14,7 @@
  *  limitations under the License.
  */
 
-package org.hippoecm.frontend.plugins.xinha.services.images;
+package org.hippoecm.frontend.plugins.xinha.model;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -30,7 +30,7 @@
 
 import org.apache.wicket.IClusterable;
 import org.hippoecm.frontend.model.JcrNodeModel;
-import org.hippoecm.frontend.plugins.xinha.XinhaUtil;
+import org.hippoecm.frontend.plugins.xinha.services.images.XinhaImage;
 import org.hippoecm.repository.api.HippoNode;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -43,18 +43,16 @@
 
     private final static Logger log = LoggerFactory.getLogger(ImageItemFactory.class);
 
-    final static String BINARIES_PREFIX = "binaries";
-
     private JcrNodeModel nodeModel;
 
     public ImageItemFactory(JcrNodeModel nodeModel) {
         this.nodeModel = nodeModel;
     }
 
-    public ImageItem createImageItem(Map<String, String> values) {
+    public RichTextImage createImageItem(Map<String, String> values) {
         String urlValue = values.get(XinhaImage.URL);
         if (urlValue != null) {
-            urlValue = XinhaUtil.decode(urlValue);
+            urlValue = RichTextUtil.decode(urlValue);
             if (urlValue.startsWith(BINARIES_PREFIX)) {
                 // find the nodename of the facetselect
                 String resourcePath = urlValue.substring(BINARIES_PREFIX.length());
@@ -69,7 +67,7 @@
                             imageNode = virtualImageNode;
                         }
                         if (imageNode != null) {
-                            ImageItem item = createImageItem(imageNode);
+                            RichTextImage item = createImageItem(imageNode);
                             item.setFacetName(virtualImageNode.getParent().getName());
                             return item;
                         }
@@ -84,100 +82,4 @@
         return null;
     }
 
-    public ImageItem createImageItem(Node node) throws UnsupportedRepositoryOperationException, ItemNotFoundException,
-            AccessDeniedException, RepositoryException {
-
-        NodeType nodetype = node.getPrimaryNodeType();
-        if (nodetype.getName().equals("hippo:handle")) {
-            node = node.getNode(node.getName());
-        }
-
-        List<String> resourceDefinitions = new ArrayList<String>();
-        for (NodeDefinition nd : node.getPrimaryNodeType().getChildNodeDefinitions()) {
-            if (!nd.getName().equals(node.getPrimaryItem().getName()) && nd.getDefaultPrimaryType() != null
-                    && nd.getDefaultPrimaryType().isNodeType("hippo:resource")) {
-                resourceDefinitions.add(nd.getName());
-            }
-        }
-        String path = node.getPath();
-        return new ImageItem(node.getPath(), node.getParent().getUUID(), node.getPrimaryItem().getName(), node
-                .getName(), resourceDefinitions, nodeModel.getNode().getPath());
-    }
-
-    public static class ImageItem implements IClusterable {
-        private static final long serialVersionUID = 1L;
-      
-        private String parentPath;
-        private String path;
-        private String uuid;
-        private String nodeName;
-        private String facetName;
-        private String primaryItemName;
-        private List<String> resourceDefinitions;
-        private String selectedResourceDefinition;
-
-        public ImageItem(String path, String uuid, String primaryItemName, String nodeName,
-                List<String> resourceDefinitions, String nodePath) {
-            this.path = path;
-            this.uuid = uuid;
-            this.primaryItemName = primaryItemName;
-            this.facetName = nodeName;
-            this.nodeName = nodeName;
-            this.parentPath = nodePath;
-            this.resourceDefinitions = resourceDefinitions != null ? resourceDefinitions : new ArrayList<String>();
-            if (this.resourceDefinitions.size() == 1) {
-                selectedResourceDefinition = this.resourceDefinitions.get(0);
-            }
-        }
-
-        public String getUuid() {
-            return uuid;
-        }
-
-        public String getPrimaryUrl() {
-            return XinhaUtil.encode("binaries" + path + "/" + primaryItemName);
-        }
-
-        public List<String> getResourceDefinitions() {
-            return resourceDefinitions;
-        }
-
-        public String getNodeName() {
-            return nodeName;
-        }
-
-        public String getSelectedResourceDefinition() {
-            return selectedResourceDefinition;
-        }
-
-        public void setSelectedResourceDefinition(String selectedResourceDefinition) {
-            this.selectedResourceDefinition = selectedResourceDefinition;
-        }
-        
-        public void setFacetName(String facet) {
-            this.facetName = facet;
-        }
-        
-        public String getFacetName() {
-            return facetName;
-        }
-        
-        public String getUrl() {
-            String url = "binaries" + parentPath + "/" + facetName;
-            if (selectedResourceDefinition != null) {
-                return XinhaUtil.encode(url + "/{_document}/" + selectedResourceDefinition);
-            }
-            return XinhaUtil.encode(url);
-        }
-
-        public boolean isValid() {
-            return path != null && uuid != null
-                    && !(resourceDefinitions.size() > 1 && selectedResourceDefinition == null);
-        }
-
-        public JcrNodeModel getNodeModel() {
-            return new JcrNodeModel(path);
-        }
-
-    }
 }

Property changes on: src/main/java/org/hippoecm/frontend/plugins/xinha/model/ImageItemFactory.java
___________________________________________________________________
Added: svn:mime-type
   + text/plain
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native

Index: src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextReference.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextReference.java	(revision 0)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextReference.java	(revision 0)
@@ -0,0 +1,56 @@
+package org.hippoecm.frontend.plugins.xinha.model;
+
+import javax.jcr.Item;
+import javax.jcr.Node;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.RepositoryException;
+
+import org.apache.wicket.IClusterable;
+import org.apache.wicket.model.IModel;
+import org.hippoecm.frontend.model.JcrNodeModel;
+import org.hippoecm.repository.api.HippoNodeType;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class RichTextReference implements IClusterable {
+    private static final long serialVersionUID = 1L;
+
+    static final Logger log = LoggerFactory.getLogger(RichTextReference.class);
+    
+    private RichText text;
+    private String name;
+
+    public RichTextReference(RichText text, String name) {
+        this.text = text;
+        this.name = name;
+    }
+
+    public RichText getText() {
+        return text;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public IModel<Node> getNodeModel() {
+        try {
+            Node node = text.getNode();
+            if (node.hasNode(name)) {
+                Node linkNode = node.getNode(name);
+                if (linkNode.isNodeType(HippoNodeType.NT_FACETSELECT)) {
+                    String uuid = linkNode.getProperty(HippoNodeType.HIPPO_DOCBASE).getValue().getString();
+                    Item item = node.getSession().getNodeByUUID(uuid);
+                    if (item != null) {
+                        return new JcrNodeModel(item.getPath());
+                    }
+                }
+            }
+        } catch (PathNotFoundException e) {
+            log.error("Error finding facet node for relative path " + name, e);
+        } catch (RepositoryException e) {
+            log.error("Error finding facet node for relative path " + name, e);
+        }
+        return null;
+    }
+}

Property changes on: src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextReference.java
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native

Index: src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextProcessor.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextProcessor.java	(revision 0)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextProcessor.java	(working copy)
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package org.hippoecm.frontend.plugins.xinha;
+package org.hippoecm.frontend.plugins.xinha.model;
 
 import java.util.Set;
 import java.util.TreeSet;
@@ -22,7 +22,7 @@
 
 import org.apache.wicket.protocol.http.WicketURLDecoder;
 
-public class XinhaHtmlProcessor {
+public class RichTextProcessor {
     @SuppressWarnings("unused")
     private final static String SVN_ID = "$Id$";
 
@@ -33,12 +33,17 @@
 
     private static Pattern LINK_PATTERN = Pattern.compile("<a[^>]+>", Pattern.CASE_INSENSITIVE);
     private static Pattern HREF_PATTERN = Pattern.compile("href=\"[^\"]+\"", Pattern.CASE_INSENSITIVE);
-    
+
+    public interface IBinaryEncoder {
+
+        String encode(String nodePath);
+    }
+
     /**
      * Prefix the targets of relative image links in a text.  Text and prefix may
      * neither be null.
      */
-    public static String prefixImageLinks(String text, String prefix) {
+    public static String prefixImageLinks(String text, IBinaryEncoder encoder) {
         StringBuffer processed = new StringBuffer();
         Matcher m = IMG_PATTERN.matcher(text);
         while (m.find()) {
@@ -56,8 +61,8 @@
                     link = link.substring(0, link.length() - 1);
                 }
                 if (!link.startsWith("http:") && !link.startsWith("https:")) {
-                    s.appendReplacement(newImg, ("src=\"" + prefix + link + "\"").replace("\\", "\\\\").replace("$",
-                            "\\$"));
+                    s.appendReplacement(newImg, ("src=\"" + encoder.encode(link) + "\"").replace("\\", "\\\\").replace(
+                            "$", "\\$"));
                 } else {
                     s.appendReplacement(newImg, src.replace("\\", "\\\\").replace("$", "\\$"));
                 }
@@ -95,7 +100,7 @@
     }
 
     public static String decorateInternalLinks(String text, ILinkDecorator decorator) {
-        
+
         StringBuffer processed = new StringBuffer();
         Matcher m = LINK_PATTERN.matcher(text);
         while (m.find()) {
@@ -114,8 +119,8 @@
                     link = link.substring(0, link.length() - 1);
                 }
                 if (!link.startsWith("http:") && !link.startsWith("https:")) {
-                    s.appendReplacement(newAnchor, ("href=\"" + decorator.decorate(link) + "\"").replace("\\", "\\\\").replace("$",
-                            "\\$"));
+                    s.appendReplacement(newAnchor, ("href=\"" + decorator.decorate(link) + "\"").replace("\\", "\\\\")
+                            .replace("$", "\\$"));
                 } else {
                     s.appendReplacement(newAnchor, href.replace("\\", "\\\\").replace("$", "\\$"));
                 }
@@ -127,7 +132,7 @@
 
         return processed.toString();
     }
-    
+
     public static interface ILinkDecorator {
         String decorate(String input);
     }

Property changes on: src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextProcessor.java
___________________________________________________________________
Added: svn:mime-type
   + text/plain
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native

Index: src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichText.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichText.java	(revision 0)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichText.java	(revision 0)
@@ -0,0 +1,163 @@
+package org.hippoecm.frontend.plugins.xinha.model;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Set;
+import java.util.regex.Pattern;
+
+import javax.jcr.AccessDeniedException;
+import javax.jcr.ItemNotFoundException;
+import javax.jcr.Node;
+import javax.jcr.RepositoryException;
+import javax.jcr.UnsupportedRepositoryOperationException;
+import javax.jcr.nodetype.NodeDefinition;
+import javax.jcr.nodetype.NodeType;
+
+import org.apache.wicket.RequestContext;
+import org.apache.wicket.protocol.http.portlet.PortletRequestContext;
+import org.hippoecm.frontend.model.JcrNodeModel;
+import org.hippoecm.frontend.model.event.IEvent;
+import org.hippoecm.frontend.model.event.IObservationContext;
+import org.hippoecm.frontend.model.ocm.JcrObject;
+import org.hippoecm.frontend.plugins.xinha.model.RichTextProcessor.IBinaryEncoder;
+import org.hippoecm.frontend.plugins.xinha.model.RichTextProcessor.ILinkDecorator;
+import org.hippoecm.repository.api.HippoNodeType;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class RichText extends JcrObject {
+    private static final long serialVersionUID = 1L;
+
+    private static Pattern LINK_AND_IMAGES_PATTERN = Pattern.compile("<(a|img)(\\s+)(.*?)(src|href)=\"(.*?)\"(.*?)>",
+            Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
+    private static Pattern IMG_PATTERN = Pattern.compile("<img[^>]+>", Pattern.CASE_INSENSITIVE);
+    private static Pattern SRC_PATTERN = Pattern.compile("src=\"[^\"]+\"", Pattern.CASE_INSENSITIVE);
+
+    private static Pattern LINK_PATTERN = Pattern.compile("<a[^>]+>", Pattern.CASE_INSENSITIVE);
+    private static Pattern HREF_PATTERN = Pattern.compile("href=\"[^\"]+\"", Pattern.CASE_INSENSITIVE);
+
+    static final Logger log = LoggerFactory.getLogger(RichText.class);
+
+    private ILinkDecorator linkDecorator;
+    private IBinaryEncoder binaryEncoder;
+
+    public RichText(JcrNodeModel nodeModel) {
+        this(nodeModel, new ILinkDecorator() {
+
+            public String decorate(String input) {
+                return input;
+            }
+
+        });
+    }
+
+    public RichText(JcrNodeModel nodeModel, ILinkDecorator decorator) {
+        super(nodeModel);
+        this.linkDecorator = decorator;
+
+        final String prefix = RichTextUtil.encode(BINARIES_PREFIX + getNode().getPath()) + "/";
+        this.binaryEncoder = new IBinaryEncoder() {
+
+            public String encode(String nodePath) {
+                RequestContext rc = RequestContext.get();
+                if (rc.isPortletRequest()) {
+                    return ((PortletRequestContext) rc).encodeResourceURL(prefix + nodePath).toString();
+                }
+                return prefix + nodePath;
+            }
+
+        };
+    }
+
+    public String getContent() {
+        try {
+            String text = getNode().getProperty("hippostd:content").getString();
+            text = RichTextProcessor.prefixImageLinks(text, binaryEncoder);
+            return RichTextProcessor.decorateInternalLinks(text, linkDecorator);
+        } catch (RepositoryException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public void setContent(String content) {
+
+    }
+
+    public List<RichTextImage> getImageLinks() {
+        List<RichTextImage> links = new LinkedList<RichTextImage>();
+        try {
+            Node node = getNode();
+            Set<String> refs = getReferences();
+            for (String ref : refs) {
+                String facetName = ref;
+                String resourcePath = null;
+                if (ref.indexOf('/') > 0) {
+                    facetName = ref.substring(0, ref.indexOf('/'));
+                    resourcePath = ref.substring(ref.indexOf('/') + 1);
+                    if (resourcePath.indexOf('/') > 0) {
+                        resourcePath = resourcePath.substring(resourcePath.indexOf('/') + 1);
+                    } else {
+                        resourcePath = null;
+                    }
+                }
+                if (!node.hasNode(facetName)) {
+                    log.warn("Reference " + ref + " does not correspond to a child node");
+                    continue;
+                }
+                Node childNode = node.getNode(facetName);
+                if (!childNode.isNodeType(HippoNodeType.NT_FACETSELECT)) {
+                    log.warn("Reference " + ref + " is not a facetselect");
+                    continue;
+                }
+                String docbase = childNode.getProperty(HippoNodeType.HIPPO_DOCBASE).getString();
+                try {
+                    Node handle = node.getSession().getNodeByUUID(docbase);
+                    if (!handle.isNodeType(HippoNodeType.NT_HANDLE)) {
+                        log.warn("Reference " + ref + " does not point to a handle");
+                    }
+                    Node document = handle.getNode(handle.getName());
+                    links.add(createImageItem(document));
+                } catch (ItemNotFoundException ex) {
+                    log.warn("facetselect " + childNode.getName() + " has invalid docbase " + docbase);
+                }
+            }
+        } catch (RepositoryException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+        return links;
+    }
+
+    public RichTextImage createImageItem(Node node) throws UnsupportedRepositoryOperationException,
+            ItemNotFoundException, AccessDeniedException, RepositoryException {
+
+        List<String> resourceDefinitions = new ArrayList<String>();
+        for (NodeDefinition nd : node.getPrimaryNodeType().getChildNodeDefinitions()) {
+            if (!nd.getName().equals(node.getPrimaryItem().getName()) && nd.getDefaultPrimaryType() != null
+                    && nd.getDefaultPrimaryType().isNodeType("hippo:resource")) {
+                resourceDefinitions.add(nd.getName());
+            }
+        }
+        return new RichTextImage(this, node.getPath(), node.getParent().getUUID(), node.getName());
+    }
+
+    protected Set<String> getReferences() throws RepositoryException {
+        return RichTextProcessor.getInternalLinks(getNode().getProperty("hippostd:content").getString());
+    }
+
+    @Override
+    protected Node getNode() throws ItemNotFoundException {
+        return super.getNode();
+    }
+
+    @Override
+    protected void processEvents(IObservationContext context, Iterator<? extends IEvent> events) {
+        // TODO Auto-generated method stub
+
+    }
+
+}

Property changes on: src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichText.java
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native

Index: src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextImage.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextImage.java	(revision 0)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextImage.java	(revision 0)
@@ -0,0 +1,70 @@
+/**
+ * 
+ */
+package org.hippoecm.frontend.plugins.xinha.model;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.jcr.RepositoryException;
+
+public class RichTextImage extends RichTextReference {
+    private static final long serialVersionUID = 1L;
+
+    private String uuid;
+    private String nodeName;
+    private String facetName;
+    private List<String> resourceDefinitions;
+    private String selectedResourceDefinition;
+
+    public RichTextImage(RichText text, String path, String uuid, String nodeName) {
+        super(text, path);
+
+        this.uuid = uuid;
+        this.facetName = nodeName;
+        this.nodeName = nodeName;
+        if (this.resourceDefinitions.size() == 1) {
+            selectedResourceDefinition = this.resourceDefinitions.get(0);
+        }
+    }
+
+    public String getUuid() {
+        return uuid;
+    }
+
+    public List<String> getResourceDefinitions() {
+        return resourceDefinitions;
+    }
+
+    public String getNodeName() {
+        return nodeName;
+    }
+
+    public void setFacetName(String facet) {
+        this.facetName = facet;
+    }
+
+    public String getFacetName() {
+        return facetName;
+    }
+
+    public String getUrl() {
+        try {
+            String url = "binaries" + getText().getNode().getPath() + "/" + facetName;
+            if (selectedResourceDefinition != null) {
+                return RichTextUtil.encode(url + "/{_document}/" + selectedResourceDefinition);
+            }
+            return RichTextUtil.encode(url);
+        } catch (RepositoryException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public boolean isValid() {
+        return getName() != null && uuid != null
+                && !(resourceDefinitions.size() > 1 && selectedResourceDefinition == null);
+    }
+
+}
\ No newline at end of file

Property changes on: src/main/java/org/hippoecm/frontend/plugins/xinha/model/RichTextImage.java
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native

Index: src/main/java/org/hippoecm/frontend/plugins/xinha/XinhaPlugin.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/XinhaPlugin.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/XinhaPlugin.java	(working copy)
@@ -15,7 +15,7 @@
  */
 package org.hippoecm.frontend.plugins.xinha;
 
-import org.hippoecm.frontend.model.properties.JcrPropertyValueModel;
+import org.apache.wicket.model.IModel;
 import org.hippoecm.frontend.plugin.IPluginContext;
 import org.hippoecm.frontend.plugin.config.IPluginConfig;
 import org.slf4j.Logger;
@@ -33,7 +33,8 @@
         super(context, config);
     }
 
-    protected JcrPropertyValueModel getValueModel() {
-        return (JcrPropertyValueModel) getDefaultModel();
+    @Override
+    protected IModel<String> getValueModel() {
+        return (IModel<String>) getDefaultModel();
     }
 }
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/XinhaNodePlugin.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/XinhaNodePlugin.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/XinhaNodePlugin.java	(working copy)
@@ -15,15 +15,37 @@
  */
 package org.hippoecm.frontend.plugins.xinha;
 
+import java.util.Set;
+
 import javax.jcr.Node;
 import javax.jcr.Property;
 import javax.jcr.RepositoryException;
 
+import org.apache.wicket.Request;
+import org.apache.wicket.RequestCycle;
+import org.apache.wicket.ajax.AbstractDefaultAjaxBehavior;
+import org.apache.wicket.ajax.AjaxRequestTarget;
+import org.apache.wicket.markup.html.panel.Fragment;
+import org.apache.wicket.model.IModel;
+import org.apache.wicket.model.Model;
+import org.apache.wicket.protocol.http.WicketURLEncoder;
 import org.hippoecm.frontend.model.JcrNodeModel;
 import org.hippoecm.frontend.model.properties.JcrPropertyModel;
 import org.hippoecm.frontend.model.properties.JcrPropertyValueModel;
 import org.hippoecm.frontend.plugin.IPluginContext;
 import org.hippoecm.frontend.plugin.config.IPluginConfig;
+import org.hippoecm.frontend.plugins.xinha.dialog.images.ImagePickerBehavior;
+import org.hippoecm.frontend.plugins.xinha.dialog.links.InternalLinkBehavior;
+import org.hippoecm.frontend.plugins.xinha.dragdrop.XinhaDropBehavior;
+import org.hippoecm.frontend.plugins.xinha.model.RichText;
+import org.hippoecm.frontend.plugins.xinha.model.RichTextProcessor;
+import org.hippoecm.frontend.plugins.xinha.model.RichTextUtil;
+import org.hippoecm.frontend.plugins.xinha.model.RichTextProcessor.ILinkDecorator;
+import org.hippoecm.frontend.plugins.xinha.services.images.XinhaImageService;
+import org.hippoecm.frontend.plugins.xinha.services.links.XinhaLinkService;
+import org.hippoecm.frontend.service.IBrowseService;
+import org.hippoecm.frontend.session.UserSession;
+import org.hippoecm.repository.api.HippoNodeType;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -35,10 +57,122 @@
 
     static final Logger log = LoggerFactory.getLogger(XinhaNodePlugin.class);
 
+    private InternalLinkBehavior linkPickerBehavior;
+    private ImagePickerBehavior imagePickerBehavior;
+    private XinhaImageService imageService;
+    private XinhaLinkService linkService;
+    private IModel<RichText> textModel;
+
     public XinhaNodePlugin(IPluginContext context, final IPluginConfig config) {
         super(context, config);
+
+        JcrNodeModel nodeModel = (JcrNodeModel) getModel();
+        if ("edit".equals(config.getString("mode"))) {
+            textModel = new Model<RichText>(new RichText(nodeModel));
+            imageService = new XinhaImageService(nodeModel) {
+                private static final long serialVersionUID = 1L;
+
+                @Override
+                protected String getXinhaName() {
+                    return configuration.getName();
+                }
+
+            };
+
+            linkService = new XinhaLinkService(nodeModel) {
+                private static final long serialVersionUID = 1L;
+
+                @Override
+                protected String getXinhaName() {
+                    return configuration.getName();
+                }
+
+            };
+
+            Fragment fragment = (Fragment) get("fragment");
+            fragment.add(imagePickerBehavior = new ImagePickerBehavior(context, config
+                    .getPluginConfig("Xinha.plugins.InsertImage"), imageService));
+            fragment.add(linkPickerBehavior = new InternalLinkBehavior(context, config
+                    .getPluginConfig("Xinha.plugins.CreateLink"), linkService));
+
+            add(new XinhaDropBehavior(context, config) {
+                private static final long serialVersionUID = 1L;
+
+                @Override
+                protected void insertImage(JcrNodeModel model, AjaxRequestTarget target) {
+                    String returnScript = imageService.attach(model);
+                    if (returnScript != null) {
+                        target.getHeaderResponse().renderOnDomReadyJavascript(returnScript);
+                    }
+                }
+
+                @Override
+                protected void updateImage(JcrNodeModel model, AjaxRequestTarget target) {
+                    //TODO: check if old image facet select should be deleted
+                    insertImage(model, target);
+                }
+
+                @Override
+                protected void insertLink(JcrNodeModel model, AjaxRequestTarget target) {
+                    String returnScript = linkService.attach(model);
+                    if (returnScript != null) {
+                        target.getHeaderResponse().renderOnDomReadyJavascript(returnScript);
+                    }
+                }
+
+                @Override
+                protected void updateLink(JcrNodeModel model, AjaxRequestTarget target) {
+                    //TODO: check if old link facet select should be deleted
+                    insertLink(model, target);
+                }
+            });
+        } else {
+            final InternalLinkBrowserBehavior il = new InternalLinkBrowserBehavior();
+            add(il);
+            textModel = new Model<RichText>(new RichText(nodeModel, il));
+        }
     }
 
+    @Override
+    protected String clean(String value) throws Exception {
+        value = super.clean(value);
+        if (value != null) {
+            Set<String> linkNames = RichTextProcessor.getInternalLinks(value);
+            linkService.cleanup(linkNames);
+        }
+        return value;
+    }
+
+    @Override
+    protected void onDetach() {
+        if (imageService != null) {
+            imageService.detach();
+        }
+        if (linkService != null) {
+            linkService.detach();
+        }
+        super.onDetach();
+    }
+
+    @Override
+    public void onBeforeRender() {
+        if (configuration != null) {
+            //TODO: add enum to distinguish sorts of drops available
+            if (configuration.getPluginConfiguration("InsertImage") != null) {
+                configuration.getPluginConfiguration("InsertImage").addProperty("callbackUrl",
+                        imagePickerBehavior.getCallbackUrl().toString());
+                configuration.getPluginConfiguration("InsertImage").addProperty("prefix",
+                        RichTextUtil.encode(BINARIES_PREFIX + nodePath));
+            }
+
+            if (configuration.getPluginConfiguration("CreateLink") != null) {
+                configuration.getPluginConfiguration("CreateLink").addProperty("callbackUrl",
+                        linkPickerBehavior.getCallbackUrl().toString());
+            }
+        }
+        super.onBeforeRender();
+    }
+
     protected JcrPropertyValueModel getValueModel() {
         JcrNodeModel nodeModel = (JcrNodeModel) getDefaultModel();
         try {
@@ -48,9 +182,49 @@
             }
             Property prop = node.getProperty("hippostd:content");
             return new JcrPropertyValueModel(new JcrPropertyModel(prop));
-        } catch(RepositoryException ex) {
+        } catch (RepositoryException ex) {
             log.error(ex.getMessage());
         }
         return null;
     }
+
+    class InternalLinkBrowserBehavior extends AbstractDefaultAjaxBehavior implements ILinkDecorator {
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        protected void respond(AjaxRequestTarget target) {
+            Request request = RequestCycle.get().getRequest();
+            String link = request.getParameter("link");
+            if (link != null) {
+                IBrowseService browser = getPluginContext().getService(
+                        getPluginConfig().getString(IBrowseService.BROWSER_ID), IBrowseService.class);
+                if (browser != null) {
+                    JcrNodeModel model = (JcrNodeModel) getModel();
+                    Node node = model.getNode();
+                    try {
+                        if (node.hasNode(link)) {
+                            node = node.getNode(link);
+                            if (node.isNodeType(HippoNodeType.NT_FACETSELECT)) {
+                                String uuid = node.getProperty(HippoNodeType.HIPPO_DOCBASE).getString();
+                                javax.jcr.Session s = ((UserSession) getSession()).getJcrSession();
+                                node = s.getNodeByUUID(uuid);
+                                browser.browse(new JcrNodeModel(node));
+                            }
+                        }
+                    } catch (RepositoryException e) {
+                        e.printStackTrace();
+                    }
+                }
+            }
+        }
+
+        public String decorate(String input) {
+            input = WicketURLEncoder.QUERY_INSTANCE.encode(input);
+            return "javascript: "
+                    + generateCallbackScript("wicketAjaxGet('" + getCallbackUrl(false) + "&link=" + input + "'")
+                            .toString();
+        }
+
+    }
+
 }
Index: src/main/java/org/hippoecm/frontend/plugins/xinha/XinhaHtmlProcessor.java
===================================================================
--- src/main/java/org/hippoecm/frontend/plugins/xinha/XinhaHtmlProcessor.java	(revision 21076)
+++ src/main/java/org/hippoecm/frontend/plugins/xinha/XinhaHtmlProcessor.java	(working copy)
@@ -1,135 +0,0 @@
-/*
- *  Copyright 2008 Hippo.
- * 
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- * 
- *       http://www.apache.org/licenses/LICENSE-2.0
- * 
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.hippoecm.frontend.plugins.xinha;
-
-import java.util.Set;
-import java.util.TreeSet;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import org.apache.wicket.protocol.http.WicketURLDecoder;
-
-public class XinhaHtmlProcessor {
-    @SuppressWarnings("unused")
-    private final static String SVN_ID = "$Id$";
-
-    private static Pattern LINK_AND_IMAGES_PATTERN = Pattern.compile("<(a|img)(\\s+)(.*?)(src|href)=\"(.*?)\"(.*?)>",
-            Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);
-    private static Pattern IMG_PATTERN = Pattern.compile("<img[^>]+>", Pattern.CASE_INSENSITIVE);
-    private static Pattern SRC_PATTERN = Pattern.compile("src=\"[^\"]+\"", Pattern.CASE_INSENSITIVE);
-
-    private static Pattern LINK_PATTERN = Pattern.compile("<a[^>]+>", Pattern.CASE_INSENSITIVE);
-    private static Pattern HREF_PATTERN = Pattern.compile("href=\"[^\"]+\"", Pattern.CASE_INSENSITIVE);
-    
-    /**
-     * Prefix the targets of relative image links in a text.  Text and prefix may
-     * neither be null.
-     */
-    public static String prefixImageLinks(String text, String prefix) {
-        StringBuffer processed = new StringBuffer();
-        Matcher m = IMG_PATTERN.matcher(text);
-        while (m.find()) {
-            String img = m.group();
-            StringBuffer newImg = new StringBuffer();
-            Matcher s = SRC_PATTERN.matcher(img);
-            if (s.find()) {
-                String src = s.group();
-                // skip src=
-                String link = src.substring(4);
-                if (link.charAt(0) == '"') {
-                    link = link.substring(1);
-                }
-                if (link.charAt(link.length() - 1) == '"') {
-                    link = link.substring(0, link.length() - 1);
-                }
-                if (!link.startsWith("http:") && !link.startsWith("https:")) {
-                    s.appendReplacement(newImg, ("src=\"" + prefix + link + "\"").replace("\\", "\\\\").replace("$",
-                            "\\$"));
-                } else {
-                    s.appendReplacement(newImg, src.replace("\\", "\\\\").replace("$", "\\$"));
-                }
-            }
-            s.appendTail(newImg);
-            m.appendReplacement(processed, newImg.toString().replace("\\", "\\\\").replace("$", "\\$"));
-        }
-        m.appendTail(processed);
-
-        return processed.toString();
-    }
-
-    /**
-     * Return the internal links, i.e. the links to other documents / images / assets
-     * in the text.  The text may not be null.
-     */
-    public static Set<String> getInternalLinks(String text) {
-        Set<String> links = new TreeSet<String>();
-        Matcher m = LINK_AND_IMAGES_PATTERN.matcher(text);
-        while (m.find()) {
-            String link = m.group(5);
-            if (link.startsWith("http:") || link.startsWith("https:")) {
-                continue;
-            }
-            String linkName;
-            if (link.indexOf('/') > 0) {
-                linkName = link.substring(0, link.indexOf('/'));
-            } else {
-                linkName = link;
-            }
-            linkName = WicketURLDecoder.PATH_INSTANCE.decode(linkName);
-            links.add(linkName);
-        }
-        return links;
-    }
-
-    public static String decorateInternalLinks(String text, ILinkDecorator decorator) {
-        
-        StringBuffer processed = new StringBuffer();
-        Matcher m = LINK_PATTERN.matcher(text);
-        while (m.find()) {
-            String anchor = m.group();
-            StringBuffer newAnchor = new StringBuffer();
-            Matcher s = HREF_PATTERN.matcher(anchor);
-            if (s.find()) {
-                String href = s.group();
-                // skip href=
-                String link = href.substring(5);
-
-                if (link.charAt(0) == '"') {
-                    link = link.substring(1);
-                }
-                if (link.charAt(link.length() - 1) == '"') {
-                    link = link.substring(0, link.length() - 1);
-                }
-                if (!link.startsWith("http:") && !link.startsWith("https:")) {
-                    s.appendReplacement(newAnchor, ("href=\"" + decorator.decorate(link) + "\"").replace("\\", "\\\\").replace("$",
-                            "\\$"));
-                } else {
-                    s.appendReplacement(newAnchor, href.replace("\\", "\\\\").replace("$", "\\$"));
-                }
-            }
-            s.appendTail(newAnchor);
-            m.appendReplacement(processed, newAnchor.toString().replace("\\", "\\\\").replace("$", "\\$"));
-        }
-        m.appendTail(processed);
-
-        return processed.toString();
-    }
-    
-    public static interface ILinkDecorator {
-        String decorate(String input);
-    }
-
-}
