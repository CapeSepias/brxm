<?xml version="1.0"?>
<!--
  Copyright 2010-2013 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
  <properties>
    <title>Forge Selection Plugins - How to install on 7.8</title>
  </properties>
  <body>
    <section name="How to install CMS Selection Plugins on Hippo 7.8 and lower">
      <subsection name="Prerequisites">
        <p>
          These instructions assume that you have an Hippo 7.8 (or lower) project based on the Hippo project archetype, i.e.
          a Maven multiproject consisting of at least three submodules: cms, site and content.
        </p>
      </subsection>

      <subsection name="Installation in CMS/Repository">
        <ol>
          <li>
            <p>Add the following dependencies to the pom.xml of your <i>cms</i> module:</p>
            <source><![CDATA[
  <dependency>
    <groupId>org.onehippo.forge.selectionplugins</groupId>
    <artifactId>selectionplugins-addon-repository</artifactId>
  </dependency>

  <dependency>
    <groupId>org.onehippo.forge.selectionplugins</groupId>
    <artifactId>selectionplugins-addon-cms</artifactId>
  </dependency>]]></source>
            <p><b>Note:</b> the correct accompanying version is managed from parent artifact <code>org.onehippo.cms7:hippo-cms7-release</code></p>
          </li>
          <li>
            <p>
              Rebuild your project using Maven and go to <a href="configuration.html">configuration</a>.
            </p>
          </li>
        </ol>
      </subsection>
      <subsection name="Installation in HST site">
        <ol>
          <li>
            <p>Add this dependency:</p>
            <source><![CDATA[
  <dependency>
    <groupId>org.onehippo.forge.selectionplugins</groupId>
    <artifactId>selectionplugins-hst-client</artifactId>
  </dependency>]]></source>
            <p>Note: the correct accompanying version is managed from parent artifact <code>org.onehippo.cms7:hippo-cms7-release</code></p>
          </li>
          <li>
            <p>In the web.xml, make sure HstFilter has uncommented init-params
              clientComponentManagerClass and clientComponentManagerConfigurations.</p>
          </li>
          <li>
            <p>Add this part to the Spring configuration file site/src/main/resources/META-INF/client-assembly/base.xml:</p>
            <source><![CDATA[
  <bean id="org.onehippo.forge.selection.hst.manager.ValueListManager"
      class="org.onehippo.forge.selection.hst.manager.DefaultValueListManager">
    <constructor-arg>
      <map>
        <entry key="relativeValuelist1" value="valuelists/valuelist1"/>
        <entry key="absoluteValuelist2" value="/content/documents/valuelists/valuelist2"/>
      </map>
    </constructor-arg>
  </bean>]]></source>
            <p>For the default manager above, make a mapping between either:</p>
            <ul>
              <li>An identifier and the location of the value list document, <strong>relative to the site content base bean</strong>.<br/>
                Note that if there are multiple sites for which to retrieve (translated) value lists, the exact relative
                path must exist for all the site content roots!</li>
              <li>An identifier and the <strong>absolute location</strong> of the value list document, from repository
                root.<br/> Translated variants will be found because they are linked.</li>
            </ul>
            <p>The identifier is then used in the API (ValueListManager methods).</p>
            <p><strong>Note:</strong> you can also provide your own custom manager.</p>
          </li>
          <li>
            <p>In the web.xml find the context-param <code>hst-beans-annotated-classes</code> and add this line to the
              <code>param-value</code>:</p>
            <source><![CDATA[classpath*:org/onehippo/forge/selection/**/*.class]]></source>
            <p><b>Note:</b> your project can also use a specified xml file for scanning annotated classes.
              See <a href="http://www.onehippo.org/7_7/library/concepts/web-application/automatic-scanning-for-content-bean-annotated-classes.html">
                this Hippo Campus page</a> for details about this kind of configuration.</p>
          </li>
        </ol>
        <p><span class="note">Note:</span> on <strong>Hippo 7.8</strong> and later, be sure to use startup option <code>-Drepo.bootstrap=true</code>
          for initializing the types, see
          <a href="http://www.onehippo.org/7_8/library/concepts/content-repository/content-bootstrap.html">Content Bootstrap</a></p>
      </subsection>
      <subsection name="Show the valuelist labels in the site">
        <p>In case of Dynamic Dropdowns, when the editors select a value, the key of the chosen
          key/value pair is actually stored in the document. Which is of course very nice, because now the values can
          be changed without having to change all documents.</p>
        <p>If the document is rendered in the site, just showing the stored property will of course show the key. So
          in the site you must make sure that at render time the key is replaced by the value. Here are the steps to take
          to make this work. In the demo project that belongs to this plugin, you can find a working example. Here you find
          some relevant snippets of code.</p>
        <ol>
          <li>At some point in the rendering phase, you need to retrieve the value list document as a Bean, using the
            ValueListManager.
            <source><![CDATA[
ComponentManager componentManager = this.getDefaultClientComponentManager();
ValueListManager valueListManager = componentManager.getComponent(ValueListManager.class.getName());
HippoBean siteContentBaseBean = getSiteContentBaseBean(request);

ValueList valueList = valueListManager.getValueList(siteContentBaseBean, "relativeValuelist1");
if (valueList != null) {
    request.setAttribute("valueList1Values", SelectionUtil.valueListAsMap(valueList));
}]]></source>
          </li>
          <li>
            <p>Now the key/value pairs are available on the request, an in the jsp the key can be replaced with the
              corresponding value.</p>
            <source><![CDATA[
<tr>
  <td>DynamicDropdown</td>
  <td>${valueList1Values[document.dynamicDropdownValue]}</td>
</tr>]]></source>
          </li>
        </ol>
      </subsection>
    </section>
  </body>
</document>
