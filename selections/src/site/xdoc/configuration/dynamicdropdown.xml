<?xml version="1.0"?>
<!--
  Copyright 2013 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
  <properties>
    <title>Forge Selection Plugins - DynamicDropdown</title>
  </properties>
  <body>
    <section name="DynamicDropdown configuration">
      <p>
        When using the default value list provider, somewhere in the /content/documents section a document of
        type <code>selection:valuelist</code> should be set up containing your wanted key/label pairs.
      </p>
      <p>
        In the document namespace, nodetype section, the property <code>hipposysedit:type</code> of your field
        should be set to <code>DynamicDropdown</code>.
      </p>
      <h3>Options</h3>
      <p>In the same editor section, there should be a <code>cluster.options</code> child node having the properties below.
       The sorting properties have been around since 2.05.00, the observer related properties since 2.06.05.</p>
      <table>
        <tr>
          <td>valuelistProvider</td>
          <td>The optional name of a CMS service that is the value list provider where the dropdown gets it's values
            from. When not filled in, it defaults to <code>service.valuelist.default</code> which is the
            DocumentValueListProvider.
          </td>
        </tr>
        <tr>
          <td>source</td>
          <td>A String property to be used a input to the configured valuelist provider. For the default
            DocumentValueListProvider, it points to the value list applicable as an absolute path starting with '/' or
            a UUID of the valuelist's handle.</td>
        </tr>
        <tr>
          <td>sortComparator</td>
          <td>An optional full qualified class name of an implementation of <code>org.onehippo.forge.selection.frontend.plugin.sorting.IListItemComparator</code>.<br/>
            A standard implementation is <code>org.onehippo.forge.selection.frontend.plugin.sorting.DefaultListItemComparator</code>
            that sorts alphanumerically.</td>
        </tr>
        <tr>
          <td>sortOrder</td>
          <td>Optional. Either 'ascending' or 'descending', defaults to 'ascending'.</td>
        </tr>
        <tr>
          <td>sortBy</td>
          <td>Optional. Either 'key' or 'label', defaults to 'label'.</td>
        </tr>
        <tr>
          <td>showDefault</td>
          <td>Used by <code>org.onehippo.forge.selection.frontend.plugin.DynamicDropdownPlugin</code> and defines
            whether the default value "Choose One" should be shown.
          </td>
        </tr>
        <tr>
          <td>observableId</td>
          <td>A optional user defined observable id. If this id is filled in, the dropdown creates a service in the background
            containing an observable model of it's value.<br/>
            The id should be made unique per document editor instance by prefixing it with <code>${cluster.id}</code>.
          </td>
        </tr>
        <tr>
          <td>observerId</td>
          <td>A optional user defined observer id that should match another dropdown's <code>observableId</code> (so
            including the <code>${cluster.id}</code>). The observer dropdown will start listening for changes on the
            observable dropdown's model and will use that value to get a value list to redraw itself.</td>
        </tr>
        <tr>
          <td>nameProvider</td>
          <td>
            Full qualified class name of an implementation of <code>org.onehippo.forge.selection.frontend.provider.IValueListNameProvider</code>
            that will turn a given (observed) value into a value list name (i.e. path or uuid).<br/>
            The resulting name will be used to get the value list from the configured value list provider service.
            When not filled in, the <code>BasePathNameProvider</code> will be used.<br/>
            <br/>
            Standard implementations are:<br/>
            <code>org.onehippo.forge.selection.frontend.provider.BasePathNameProvider</code> (the default):
            <br/>concatenates <code>sourceBasePath</code> plus the observed value. This requires that the value list
            item keys of the observable dropdown's value list match the node names of the chained value lists.<br/>
            <code>org.onehippo.forge.selection.frontend.provider.ConfiguredNameProvider</code>:
            <br/>looks up value list names in the configuration, using as key: 'source.' + (observed value).<br/>
            <code>org.onehippo.forge.selection.frontend.provider.NOOPNameProvider</code>:
            no look up: just returns the observed value as value list name, useful in combination with a custom value
            list provider.
          </td>
        </tr>
        <tr>
          <td>sourceBasePath</td>
          <td>Used by <code>org.onehippo.forge.selection.frontend.provider.BasePathNameProvider</code> and defines
            the base path where dependent value list documents are located.
          </td>
        </tr>
      </table>
      <p>Example with sorting:</p>
      <source><![CDATA[<sv:property sv:name="valuelist.provider" sv:type="String">
  <sv:value>service.valuelist.default</sv:value>
</sv:property>
<sv:node sv:name="cluster.options">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>frontend:pluginconfig</sv:value>
  </sv:property>
  <sv:property sv:name="source" sv:type="String">
    <sv:value>/content/documents/valuelists/valuelist1</sv:value>
  </sv:property>
  <sv:property sv:name="sortComparator" sv:type="String">
    <sv:value>org.onehippo.forge.selection.frontend.plugin.sorting.DefaultListItemComparator</sv:value>
  </sv:property>
  <sv:property sv:name="sortOrder" sv:type="String">
    <sv:value>ascending</sv:value>
  </sv:property>
  <sv:property sv:name="sortBy" sv:type="String">
    <sv:value>label</sv:value>
  </sv:property>
</sv:node>]]></source>
      <p>Example options with observableId (from demo project):</p>
      <source><![CDATA[<sv:node sv:name="cluster.options">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>frontend:pluginconfig</sv:value>
  </sv:property>
  <sv:property sv:name="observableId" sv:type="String">
    <sv:value>${cluster.id}.continent</sv:value>
  </sv:property>
  <sv:property sv:name="source" sv:type="String">
    <sv:value>/content/documents/valuelists/chained/continents</sv:value>
  </sv:property>
  <sv:property sv:name="sourceBasePath" sv:type="String">
    <sv:value>/content/documents/valuelists/chained</sv:value>
  </sv:property>
</sv:node>]]></source>
      <p>Example options with observerId (from demo project):</p>
      <source><![CDATA[<sv:node sv:name="cluster.options">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>frontend:pluginconfig</sv:value>
  </sv:property>
  <sv:property sv:name="nameProvider" sv:type="String">
    <sv:value>org.onehippo.forge.selection.frontend.provider.BasePathNameProvider</sv:value>
  </sv:property>
  <sv:property sv:name="observerId" sv:type="String">
    <sv:value>${cluster.id}.continent</sv:value>
  </sv:property>
  <sv:property sv:name="sourceBasePath" sv:type="String">
    <sv:value>/content/documents/valuelists/chained</sv:value>
  </sv:property>
</sv:node>]]></source>
    </section>
  </body>
</document>