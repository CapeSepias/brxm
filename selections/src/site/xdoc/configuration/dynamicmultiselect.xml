<?xml version="1.0"?>
<!--
  Copyright 2013-2014 Hippo B.V. (http://www.onehippo.com)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
  <properties>
    <title>Forge Selection Plugins - DynamicMultiSelect</title>
  </properties>
  <body>
    <section name="DynamicMultiSelect configuration">
      <p>
        When using the default value list provider, somewhere in the /content/documents section a document of
        type <code>selection:valuelist</code> should be set up containing your wanted key/label pairs.
      </p>
      <p>
        In the document namespace, nodetype section, the property <code>hipposysedit:type </code> of your field
        should be set to <code>String</code> and the property <code>hipposysedit:multiple</code> should be set to <code>true</code>.
      </p>
      <p>
        In the document namespace, editor section, your field should have:
      </p>
      <ul>
        <li>property
          <code>plugin.class</code>
          should be <code>org.onehippo.forge.selection.frontend.plugin.DynamicMultiSelectPlugin</code>
        </li>
        <li>property <code>valuelist.provider</code> should be <code>service.valuelist.default</code> (if you're using the default)</li>
        <li>You should have a child node <code>cluster.options</code> (<code>valuelist.options</code> on versions previous to 2.08.02 *)
          containing a String property <code>source</code> that points to the value list applicable as an absolute path starting
          with '/' or a UUID of the valuelist's handle.
        </li>
        <li>
          <b>sorting in 2.04.01:</b>
          the <code>cluster.options</code> child node may contain a property <code>sortComparator</code> that is an
          full qualified class name of an implementation of <code>org.onehippo.forge.selection.frontend.plugin.sorting.IListItemComparator</code>.
          The default implementation is <code>org.onehippo.forge.selection.frontend.plugin.sorting.DefaultListItemComparator</code> and sorts alphanumerically.
          It is parameterized by the optional properties <code>sortOrder</code> (ascending or descending) and <code>sortBy</code> ('key' or 'label')
        </li>
      </ul>
      <p>There are also the following optional properties:</p>
      <ul>
        <li>property <code>multiselect.type</code> can be <code>selectlist</code> (the default), <code>checkboxes</code> or
          <code>palette</code>, rendering either a select list control, a list of checkboxes or a palette, a.k.a. shootbox,
          which consists of two lists with selection arrows between them.
        </li>
        <li>property <code>selectlist.maxrows</code> defines the maximum number of rows in your
          select list control, where the default is 8.
        </li>
        <li>property <code>palette.maxrows</code> defines the number of rows of the palette's lists,
          where the default is 10.
        </li>
        <li>property <code>palette.alloworder</code> defines whether or not ordering buttons are shown.
          The default is 'false'.
        </li>
      </ul>
      <p>Example:</p>
      <source><![CDATA[<sv:property sv:name="plugin.class" sv:type="String">
  <sv:value>org.onehippo.forge.selection.frontend.plugin.DynamicMultiSelectPlugin</sv:value>
</sv:property>
<sv:property sv:name="model.compareTo" sv:type="String">
  <sv:value>${model.compareTo}</sv:value>
</sv:property>
<sv:property sv:name="multiselect.type" sv:type="String">
  <sv:value>selectlist</sv:value>
</sv:property>
<sv:property sv:name="selectlist.maxrows" sv:type="String">
  <sv:value>8</sv:value>
</sv:property>
<sv:property sv:name="valuelist.provider" sv:type="String">
  <sv:value>service.valuelist.default</sv:value>
</sv:property>
<sv:node sv:name="cluster.options">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>frontend:pluginconfig</sv:value>
  </sv:property>
  <sv:property sv:name="source" sv:type="String">
    <sv:value>/content/documents/valuelists/valuelist1</sv:value>
  </sv:property>
</sv:node>]]></source>

      <p>* To rename the deprecated <code>valuelist.options</code> node you can use this groovy script. Set the query
        to: //element(valuelist.options, frontend:pluginconfig)</p>
      <source><![CDATA[package org.hippoecm.frontend.plugins.cms.dev.updater

import org.onehippo.repository.update.BaseNodeUpdateVisitor
import javax.jcr.Node

class UpdaterTemplate extends BaseNodeUpdateVisitor {

  boolean doUpdate(Node node) {
    log.debug "Updating node ${node.path}"
    rename(node, "cluster.options")
    return true
  }

  void rename(Node node, String newName) {
    node.getSession().move(node.getPath(), node.getParent().getPath() + "/" + newName);
  }

  boolean undoUpdate(Node node) {
    throw new UnsupportedOperationException('Updater does not implement undoUpdate method')
  }

}]]></source>
    </section>
  </body>
</document>
