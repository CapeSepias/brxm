<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2017 Hippo B.V. (http://www.onehippo.com)
-->
<!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>Example with SalesForce REST API</title>
  </properties>
  <body>

    <section name="Example with SalesForce REST API">

      <subsection name="Introduction">

        <p>
          The following example <code>ResourceResolver</code> bean definition will give hints on how to configure
          conneciton information, <code>RestTemplate</code> object configuration, <code>ResourceLinkResolver</code>
          object configuration, cache control configuration, etc.
        </p>

      </subsection>

      <subsection name="ResourceResolver Configuration">

        <div class="brush: xml">
          <source><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd">

  <bean parent="abstractCrispSimpleJacksonRestTemplateResourceResolver"
        class="com.onehippo.cms7.crisp.core.resource.jackson.SimpleJacksonRestTemplateResourceResolver">
    <property name="baseUri" value="${salesforce.baseUrl}/services/data/v20.0" />
    <property name="restTemplate">
      <bean class="org.springframework.security.oauth2.client.OAuth2RestTemplate">
        <constructor-arg>
          <bean class="org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordResourceDetails">
            <property name="clientAuthenticationScheme" value="form" />
            <property name="accessTokenUri" value="${salesforce.baseUrl}/services/oauth2/token" />
            <property name="clientId" value="${salesforce.clientId}" />
            <property name="clientSecret" value="${salesforce.clientSecret}" />
            <property name="grantType" value="password" />
            <!-- NOTE: SalesForce doesn't support scope parameter!
            <property name="scope">
              <list>
                <value>read</value>
              </list>
            </property>
            -->
            <property name="username" value="${salesforce.username}" />
            <property name="password" value="${salesforce.password}${salesforce.securityToken}" />
          </bean>
        </constructor-arg>
        <constructor-arg>
          <bean class="org.springframework.security.oauth2.client.DefaultOAuth2ClientContext">
            <constructor-arg>
              <bean class="org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest">
              </bean>
            </constructor-arg>
          </bean>
        </constructor-arg>
        <property name="requestFactory" ref="org.springframework.http.client.ClientHttpRequestFactory" />
      </bean>
    </property>
    <property name="resourceDataCache">
      <bean class="com.onehippo.cms7.crisp.core.resource.SpringResourceDataCache">
        <constructor-arg>
          <bean class="org.springframework.cache.ehcache.EhCacheCache">
            <constructor-arg>
              <bean parent="abstractCrispResourceEhCache">
                <property name="cacheName" value="demoSalesForceCache" />
                <property name="maxEntriesLocalHeap" value="1000" />
                <property name="maxEntriesLocalDisk" value="0" />
                <property name="timeToLiveSeconds" value="60" />
                <property name="timeToIdleSeconds" value="60" />
              </bean>
            </constructor-arg>
          </bean>
        </constructor-arg>
      </bean>
    </property>
  </bean>

</beans>
            ]]>
          </source>
        </div>

        <ul>
          <li>
            <code>baseUri</code> property is to set the base URI of the backend REST API.
            So, invocations on <code>ResourceServiceBroker</code> for this <strong>resource space</strong>
            will take a relative resource path to combine it with the base URI to invoke the backend service in the end.
          </li>
          <li>
            <code>restTemplate</code> property is to set a Spring Framework <code>RestTemplate</code> object.
            In this simple example, because we don't need any authentication against the backend REST API, it simply
            set an instance of <code>org.springframework.web.client.RestTemplate</code>.
            <code>org.springframework.http.client.ClientHttpRequestFactory</code> is the default <code>requestFactory</code>
            bean definition in <code>CRISP</code> module library.
          </li>
          <li>
            <code>resourceLinkResolver</code> is a property to set a custom <code>ResourceLinkResolver</code> component
            for this <code>ResourceResolver</code>.
            Because content or data from an external service is not something that we can generate URI links automatically
            unlike content documents, the URI links must be generated in a custom way if needed.
            You can add a custom <code>ResourceLinkResolver</code> in this property to generate a URI link for an external
            content or data item.
            For your convenience, <strong>CRISP</strong> module library has shipped with a generic Freemarker template based
            custom resource link resolver component, <code>com.onehippo.cms7.crisp.core.resource.FreemarkerTemplateResourceLinkResolver</code>,
            with which you can use templating technique to generate a URI string with a given <code>resource</code> object.
          </li>
          <li>
            Finally, <code>resourceDataCache</code> property specifies a <code>ResourceResolver</code> specific
            <code>ResourceDataCache</code> object. If this property is set and the specific resource is cacheable,
            the <code>ResourceServiceBroker</code> may cache resource specific data in the specified <code>ResourceDataCache</code>.
            If not set but the specific resource is still cacheable, <code>ResourceServiceBroker</code>
            may cache resource specific data in a globally-shared <code>ResourceDataCache</code> by default.
          </li>
        </ul>

      </subsection>

    </section>

  </body>
</document>
