<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2017 Hippo B.V. (http://www.onehippo.com)
-->
<!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>Example with SalesForce REST API</title>
  </properties>
  <body>

    <section name="Example with SalesForce REST API">

      <subsection name="Introduction">

        <p>
          The following <code>ResourceResolver</code> bean definition is an example configuration for SalesForce
          REST API backend. This will give hints on how to configure conneciton information, <code>RestTemplate</code>
          object configuration, authentication such as OAuth2, <code>ResourceLinkResolver</code> object configuration,
          cache control configuration, etc.
        </p>

      </subsection>

      <subsection name="ResourceResolver Configuration">

        <div class="brush: xml">
          <source><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd">

  <bean parent="abstractCrispSimpleJacksonRestTemplateResourceResolver"
        class="com.onehippo.cms7.crisp.core.resource.jackson.SimpleJacksonRestTemplateResourceResolver">
    <property name="baseUri" value="${salesforce.baseUrl}/services/data/v20.0" />
    <property name="restTemplate">
      <bean class="org.springframework.security.oauth2.client.OAuth2RestTemplate">
        <constructor-arg>
          <bean class="org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordResourceDetails">
            <property name="clientAuthenticationScheme" value="form" />
            <property name="accessTokenUri" value="${salesforce.baseUrl}/services/oauth2/token" />
            <property name="clientId" value="${salesforce.clientId}" />
            <property name="clientSecret" value="${salesforce.clientSecret}" />
            <property name="grantType" value="password" />
            <!-- NOTE: SalesForce doesn't support scope parameter!
            <property name="scope">
              <list>
                <value>read</value>
              </list>
            </property>
            -->
            <property name="username" value="${salesforce.username}" />
            <property name="password" value="${salesforce.password}${salesforce.securityToken}" />
          </bean>
        </constructor-arg>
        <constructor-arg>
          <bean class="org.springframework.security.oauth2.client.DefaultOAuth2ClientContext">
            <constructor-arg>
              <bean class="org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest">
              </bean>
            </constructor-arg>
          </bean>
        </constructor-arg>
        <property name="requestFactory" ref="org.springframework.http.client.ClientHttpRequestFactory" />
      </bean>
    </property>
    <property name="resourceDataCache">
      <bean class="com.onehippo.cms7.crisp.core.resource.SpringResourceDataCache">
        <constructor-arg>
          <bean class="org.springframework.cache.ehcache.EhCacheCache">
            <constructor-arg>
              <bean parent="abstractCrispResourceEhCache">
                <property name="cacheName" value="demoSalesForceCache" />
                <property name="maxEntriesLocalHeap" value="1000" />
                <property name="maxEntriesLocalDisk" value="0" />
                <property name="timeToLiveSeconds" value="60" />
                <property name="timeToIdleSeconds" value="60" />
              </bean>
            </constructor-arg>
          </bean>
        </constructor-arg>
      </bean>
    </property>
  </bean>

</beans>
            ]]>
          </source>
        </div>

        <ul>
          <li>
            <code>baseUri</code> property is to set the base URI of the backend SalesForce REST API.
            So, invocations on <code>ResourceServiceBroker</code> for this <strong>resource space</strong>
            will take a relative resource path to combine it with the base URI to invoke the backend SalesForce REST API in the end.
          </li>
          <li>
            <code>restTemplate</code> property is to set an <code>org.springframework.security.oauth2.client.OAuth2RestTemplate</code> object.
            In this example, because the SalesForce REST API backend requires OAuth2 authentication, it set an
            instance of <code>org.springframework.security.oauth2.client.OAuth2RestTemplate</code> with necessary
            OAuth2 authentication information.
            For details on , please see the JavaDocs:
            <a href="http://docs.spring.io/spring-security/oauth/apidocs/org/springframework/security/oauth2/client/OAuth2RestTemplate.html">OAuth2RestTemplate</a>.
            <code>org.springframework.http.client.ClientHttpRequestFactory</code> is the default <code>requestFactory</code>
            bean definition in <strong>CRISP</strong> module library.
          </li>
          <li>
            Finally, <code>resourceDataCache</code> property specifies a <code>ResourceResolver</code> specific
            <code>ResourceDataCache</code> object. If this property is set and the specific resource is cacheable,
            the <code>ResourceServiceBroker</code> may cache resource specific data in the specified <code>ResourceDataCache</code>.
            If not set but the specific resource is still cacheable, <code>ResourceServiceBroker</code>
            may cache resource specific data in a globally-shared <code>ResourceDataCache</code> by default.
          </li>
        </ul>

      </subsection>

    </section>

  </body>
</document>
