/*
 * Copyright 2007 Hippo
 *
 * Licensed under the Apache License, Version 2.0 (the  "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<rep='internal'>
<jcr='http://www.jcp.org/jcr/1.0'>
<nt='http://www.jcp.org/jcr/nt/1.0'>
<mix='http://www.jcp.org/jcr/mix/1.0'>
<hippo='http://www.hippoecm.org/nt/1.0'>
<frontend='http://www.hippoecm.org/frontend/nt/1.0'>

// define the jarFile nodetype; it is required for the
// repository class loader.  JR usually loads it lazily
// but since we always need it, it's easier done here.
[rep:jarFile] mixin
- rep:jarExpanded (date) mandatory copy
+ rep:jarContents (nt:base) = nt:folder mandatory copy

[hippo:query] > nt:query

[hippo:mirror]
- hippo:docbase (string) mandatory
+ * multiple

[hippo:facetresult]
- hippo:count (long)
+ * multiple

[hippo:facetsubsearch]
- hippo:queryname (string) mandatory
- hippo:docbase (string) mandatory
- hippo:facets (string) mandatory multiple
- hippo:search (string) multiple
- hippo:count (long)
+ hippo:resultset (hippo:facetresult) = hippo:facetresult
+ * (hippo:facetsubsearch) = hippo:facetsubsearch multiple

[hippo:facetsearch]
- hippo:queryname (string) mandatory
- hippo:docbase (string) mandatory
- hippo:facets (string) mandatory multiple
- hippo:count (long)
+ hippo:resultset (hippo:facetresult) = hippo:facetresult
+ * (hippo:facetsubsearch) = hippo:facetsubsearch multiple

[hippo:request] > nt:unstructured

[hippo:document] > nt:base

[hippo:handle] > nt:unstructured
- hippo:discriminator (string) multiple mandatory
+ * (hippo:document) = hippo:document multiple version
+ hippo:request (hippo:request) = hippo:request multiple ignore

[hippo:hardhandle] > mix:versionable mixin

[hippo:facetlink] 
- hippo:docbase (string) mandatory

[hippo:reference] > hippo:handle
- hippo:docbase (string) mandatory
+ * (hippo:document) multiple

[hippo:resource]
- jcr:encoding (string)
- jcr:mimeType (string) mandatory
- jcr:data (binary) primary mandatory
- jcr:lastModified (date) mandatory ignore

[hippo:facetselect] > hippo:reference
- hippo:docbase (string) mandatory // this string is a weak reference
- hippo:facets (string) mandatory multiple
- hippo:values (string) mandatory multiple
- hippo:modes (string) mandatory multiple < 'select', 'stick', 'clear', 'single', 'prefer', 'prefer-single'
+ * multiple

[hippo:type] > nt:base
- hippo:nodetype (string) mandatory
- hippo:display (string) mandatory
- hippo:classname (string) mandatory

[hippo:types] > nt:base
+ * (hippo:type) = hippo:type

[hippo:workflow] > hippo:type
- hippo:workflow (string)
- hippo:roles (string) multiple
+ hippo:types (hippo:types) = hippo:types mandatory autocreated

[hippocms:workflow] > hippo:workflow
- hippocms:renderer (string)

[hippo:workflowcategory] > nt:base orderable
+ * (hippo:workflow) = hippo:workflow

[hippo:workflowfolder] > nt:base, mix:referenceable
+ * (hippo:workflowcategory) = hippo:workflowcategory

[hippo:ocmquery] > hippo:query
- hippo:classname (string) mandatory
+ hippo:types (hippo:types) = hippo:types mandatory autocreated

[hippo:ocmqueryfolder] > nt:base, mix:referenceable
+ * (nt:query) = hippo:ocmquery

[hippo:initializeitem] > nt:base
- hippo:sequence (double)
- hippo:namespace (string)
- hippo:nodetypesresource (string)
- hippo:nodetypes (binary)
- hippo:contentresource (string)
- hippo:content (string)
- hippo:contentroot (string)

[hippo:initializefolder] > nt:base orderable
+ * (hippo:initializeitem) = hippo:initializeitem

[hippo:temporaryfolder] > nt:unstructured

[hippo:application] > nt:base

[hippo:applications] > nt:base orderable
+ * (hippo:application)

[hippocms:listingpropnode] > nt:base
- * (string)

[hippocms:listing] > nt:base
- hippo:pagesize (long) = '10' mandatory autocreated 
- hippo:viewsize (long) = '10' mandatory autocreated 
+ * (hippocms:listingpropnode) = hippocms:listingpropnode  

[hippo:accessmanager] > nt:base
- hippo:permcachesize (long)

[hippo:user] > nt:base
- hippo:password (string) mandatory
- hippo:active (boolean) = true mandatory autocreated
  
[hippocms:user] > hippo:user
- hippocms:firstname (string)
- hippocms:lastname (string)
- hippocms:email (string)

[hippo:group] > nt:base
- hippo:description (string)
- hippo:members (string) multiple

[hippo:role] > nt:base
- hippo:jcrread (boolean)  = 'true' mandatory autocreated
- hippo:jcrwrite (boolean)  = 'false' mandatory autocreated
- hippo:jcrremove (boolean)  = 'false' mandatory autocreated

[hippo:authrole] > nt:base
- hippo:users (string) multiple
- hippo:groups (string) multiple
- hippo:role (string) mandatory

[hippo:facetrule] > nt:base
- hippo:facet (string) mandatory 
- hippo:value (string) mandatory 
- hippo:type (string) = 'String' mandatory < 'String', 'Name'
- hippo:equals (boolean) = 'true' mandatory autocreated

[hippo:domainrule] > nt:base
+ hippo:facetrule (hippo:facetrule) = hippo:facetrule multiple

[hippo:domain] > nt:base
+ hippo:domainrule (hippo:domainrule) = hippo:domainrule multiple 
+ hippo:authrole (hippo:authrole) = hippo:authrole multiple

[hippo:userfolder] > nt:base
+ * (hippo:user) = hippo:user

[hippo:groupfolder] > nt:base
+ * (hippo:group) = hippo:group

[hippo:rolefolder] > nt:base
+ * (hippo:role) = hippo:role

[hippo:domainfolder] > nt:base
+ * (hippo:domain) = hippo:domain

[hippocms:remodel] mixin
- hippocms:remodel (string) mandatory < 'current', 'draft', 'error', 'old'
- hippocms:uri (string)
 
[hippocms:field] > nt:base
- hippocms:name (string)
- hippocms:path (string)
- hippocms:type (string)
- hippocms:multiple (boolean)
- hippocms:mandatory (boolean)
- hippocms:ordered (boolean)

[hippocms:nodetype] > hippo:document orderable
- hippocms:type (string)
- hippocms:supertype (string) multiple
- hippocms:node (boolean)
- hippocms:mixin (boolean)
+ hippocms:field (hippocms:field) multiple

[hippocms:templateitem] > hippocms:plugin orderable
- hippocms:renderer (string) mandatory
- hippocms:field (string)
- hippocms:templatemode (string)
+ hippocms:item (hippocms:templateitem) multiple

[hippocms:template] > hippocms:templateitem, hippo:document orderable

[hippocms:templatetype] orderable
+ hippocms:nodetype (hippo:handle) mandatory
+ hippocms:template (hippo:handle)
+ hippocms:prototype (nt:base)

[hippocms:namespace] > nt:base
+ * (hippocms:templatetype) = hippocms:templatetype

[hippocms:namespacefolder] > nt:base
+ * (hippocms:namespace) = hippocms:namespace

[hippo:propertyreference] > nt:base

[hippo:relativepropertyreference] > hippo:propertyreference
- hippo:relPath (String) mandatory

[hippo:resolvepropertyreference] > hippo:propertyreference
- hippo:relPath (String) mandatory

[hippo:builtinpropertyreference] > hippo:propertyreference
- hippo:method (String) mandatory < 'ancestors'

[hippo:propertyreferences] orderable
+ * (hippo:propertyreference)

[hippo:deriveddefinition] > nt:base
- hippo:nodetype (String) mandatory
- hippo:classname (String) mandatory
- hippo:serialver (Long)
+ hippo:accessed (hippo:propertyreferences) = hippo:propertyreferences autocreated
+ hippo:derived (hippo:propertyreferences) = hippo:propertyreferences autocreated

[hippo:derivativesfolder] > nt:base orderable
+ * (hippo:deriveddefinition) = hippo:deriveddefinition multiple

[hippo:derived] mixin
- hippo:compute (Reference)
  // Indicates the method that is used to compute the derived properties
  // defined by any subtypes that extend this type.
  // should point to a node of type hippo:deriveddefinition
- hippo:related (Reference) multiple
  // A multivalue property that links to all the nodes that where used to
  // compute derived proper

[hippo:harddocument] > hippo:derived, mix:referenceable, mix:versionable mixin
- hippo:paths (String) multiple mandatory

[hippo:softdocument] mixin
- hippo:uuid (string) mandatory
- hippo:paths (String) multiple mandatory

[hippo:logconfig] > nt:base
- hippo:logenabled (boolean) = 'true' mandatory autocreated
- hippo:logpath (String) = '/hippo:log'  mandatory autocreated
- hippo:logappender (String) = 'rolling' mandatory autocreated < 'rolling', 'folding'
- hippo:logmaxsize (Long) = '100' mandatory autocreated 

[hippo:logitem] > nt:base
- hippo:timestamp (Long) mandatory
- hippo:eventUser (String) mandatory
- hippo:eventClass (String) mandatory
- hippo:eventMethod (String) mandatory
- hippo:eventArguments (String) multiple
- hippo:eventReturnType (String)
- hippo:eventReturnValue (String)
- hippo:eventDocument (String)

[hippo:logfolder] > nt:base orderable
+ * (hippo:logfolder) = hippo:logfolder
+ * (hippo:logitem) = hippo:logitem

[hippo:basequeryfolder] > nt:base
+ * (nt:query) = hippo:query

[hippo:queryfolder] > hippo:basequeryfolder
+ * (nt:query, hippo:basequeryfolder)

[hippo:configuration] > nt:base
+ hippo:workflows (hippo:workflowfolder) = hippo:workflowfolder mandatory
+ hippo:documents (hippo:ocmqueryfolder) = hippo:ocmqueryfolder mandatory
+ hippo:initialize (hippo:initializefolder) = hippo:initializefolder
+ hippo:temporary (hippo:temporaryfolder) = hippo:temporaryfolder autocreated
+ hippo:users (hippo:userfolder) = hippo:userfolder
+ hippo:roles (hippo:rolefolder) = hippo:rolefolder
+ hippo:groups (hippo:groupfolder) = hippo:groupfolder
+ hippo:domains (hippo:domainfolder) = hippo:domainfolder
+ hippo:derivatives (hippo:derivativesfolder) = hippo:derivativesfolder autocreated mandatory
+ hippo:frontend (hippo:applications) = hippo:applications
+ hippo:logging (hippo:logconfig) = hippo:logconfig
+ hippo:queries (hippo:queryfolder) = hippo:queryfolder mandatory autocreated
+ hippo:addonconfig (hippo:addonconfigfolder) = hippo:addonconfigfolder mandatory autocreated
+ hippo:accessmanager (hippo:accessmanager) = hippo:accessmanager

[hippo:addonconfigfolder] > nt:base
+ * (hippo:addonconfig) = hippo:addonconfig

[hippo:addonconfig] > nt:base
