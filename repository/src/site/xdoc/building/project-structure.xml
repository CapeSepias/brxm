<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2007 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
  <properties>
    <title>Project structure</title>
  </properties>
  <body>

    <section name="Project Structure">
      <p>
        Hippo ECM is a <a href="http://maven.apache.org/">Maven 2</a> project consisting of
        <a href="http://maven.apache.org/guides/getting-started/index.html#How_do_I_build_more_than_one_project_at_once">
        multiple modules</a> which are hierarchically organized as shown below, each module produces exactly one
        artifact (file). Modules come in four flavors, depending on the type of artifact they create.
      </p>
      <ol>
        <li>
          <p>
            <b>JAR</b> projects create a jar file that can be used in applications.
          </p>
        </li>
        <li>
          <p>
            <b>WAR</b> projects create a web application (a war file) that can be deployed
            in a servlet server (tomcat, jetty etc.).
          </p>
        </li>
        <li>
          <p>
            <b>EAR</b> projects create an enterprise application (an ear file) that can be deployed
            in an application server (glassfish, weblogic etc.).
          </p>
        </li>        
        <li>
          <p>
            <b>POM</b> projects act as 'glue' for binding together other projects,
            they don't create anything themselves
          </p>
        </li>
      </ol>
      <p>
        The figure below shows the project layout. Every node in the directory tree
        constitutes a Maven project of one of these three types.
        The <a href="http://maven.apache.org/pom.html#Maven_Coordinates">artifactId</a>
        matches the project directory layout.
      </p>
      <source>
Module                       Type      ArtifactId
------------------------------------------------------------------------
hippo-ecm                    Pom       hippo-ecm
|-- addon                    Pom       hippo-ecm-addon
|   |-- builtin              Pom       hippo-ecm-addon-builtin
|   |   |-- common           Jar       hippo-ecm-addon-builtin-common
|   |   |-- frontend         Jar       hippo-ecm-addon-builtin-frontend
|   |   |-- repository       Jar       hippo-ecm-addon-builtin-repository
|   |   `-- test             Jar       hippo-ecm-addon-builtin-test
|   |-- cms                  Pom       hippo-ecm-addon-cms
|   |   |-- browse           Jar       hippo-ecm-addon-cms-browse
|   |   |-- dashboard        Jar       hippo-ecm-addon-cms-dashboard
|   |   |-- edit             Jar       hippo-ecm-addon-cms-edit
|   |   |-- management       Jar       hippo-ecm-addon-cms-management
|   |   `-- root             Jar       hippo-ecm-addon-cms-root
|   |-- defaultcontent       Pom       hippo-ecm-addon-defaultcontent
|   |   `-- repository       Jar       hippo-ecm-addon-defaultcontent-repository
|   |-- reporting            Pom       hippo-ecm-addon-reporting
|   |   |-- frontend         Jar       hippo-ecm-addon-reporting-frontend
|   |   `-- repository       Jar       hippo-ecm-addon-reporting-repository
|   |-- reviewed-action      Pom       hippo-ecm-addon-reviewed-action
|   |   |-- common           Jar       hippo-ecm-addon-reviewed-action-common
|   |   |-- frontend         Jar       hippo-ecm-addon-reviewed-action-frontend
|   |   |-- repository       Jar       hippo-ecm-addon-reviewed-action-repository
|   |   `-- test             Jar       hippo-ecm-addon-reviewed-action-test
|   |-- standards            Pom       hippo-ecm-addon-standards
|   |   |-- frontend         Jar       hippo-ecm-addon-standards-frontend
|   |   `-- repository       Jar       hippo-ecm-addon-standards-test
|   |-- template             Jar       hippo-ecm-addon-template
|   |-- versioning           Jar       hippo-ecm-addon-versioning
|   |-- xinha                War       hippo-ecm-addon-xinha
|   |-- xinha-frontend       Jar       hippo-ecm-addon-xinha-frontend
|   `-- yui                  Pom       hippo-ecm-addon-yui
|       `-- frontend         Jar       hippo-ecm-addon-yui-frontend
|-- api                      Jar       hippo-ecm-api
|-- archetypes               Pom       hippo-ecm-archetypes
|   `-- addon                Archetype hippo-ecm-archetypes-addon
|-- demo                     Pom       hippo-ecm-demo
|   |-- addon                Jar       hippo-ecm-demo-config
|   |-- all                  War       hippo-ecm-demo-skin
|   |-- site                 War       hippo-ecm-demo-test        
|   `-- skin                 War       hippo-ecm-demo-ear
|-- frontend                 Pom       hippo-ecm-frontend
|   |-- engine               Jar       hippo-ecm-frontend-engine
|   |-- application          War       hippo-ecm-frontend-application
|   `-- plugins              Jar       hippo-ecm-frontend-plugins
|-- hst                      Pom       hippo-ecm-hst
|   |-- addon                Pom       hippo-ecm-hst-addon
|   |   `-- repository       Jar       hippo-ecm-hst-addon-repository
|   |-- core                 Jar       hippo-ecm-hst-core
|   |-- sample               Pom       hippo-ecm-hst-sample
|   |   |-- content          Jar       hippo-ecm-hst-sample-content
|   |   `-- site             War       hippo-ecm-hst-sample-site
|   |-- skeleton             War       hippo-ecm-hst-skeleton
|   `-- taglib               Jar       hippo-ecm-hst-taglib
|-- maven-skin               Jar       hippo-ecm-maven-skin
|-- package                  Pom       hippo-ecm-package
|   |-- config               Jar       hippo-ecm-package-config
|   |-- skin                 War       hippo-ecm-package-skin
|   |-- test                 Jar       hippo-ecm-package-test        
|   |-- ear                  Ear       hippo-ecm-package-ear
|   `-- war                  War       hippo-ecm-package-war
|-- repository               Pom       hippo-ecm-repository
|   |-- engine               Jar       hippo-ecm-repository-engine
|   |-- connector            Jar       hippo-ecm-repository-connector
|   `-- application          War       hippo-ecm-repository-application
`-- tools                    Pom       hippo-ecm-tools
    |-- migration            Jar       hippo-ecm-tools-migration
    |-- dropbox              Jar       hippo-ecm-tools-dropbox
    `-- testutils            Jar       hippo-ecm-tools-testutils
      </source>
    </section>
    
    <section name="Why so many projects?">
      <p>
        The large number of projects is a direct consequence of the fact that Hippo ECM
        has been designed from the ground up for customizability and extendability as described in the  
        <a href="../extend-hippo-ecm/plugins/index.html">plugin</a> documentation. Hippo ECM consists
        of two tiny engines, one for the repository and one for the CMS user interface, that in themselves don't
        implement much functionality. All 'userland' functionality is implemented by plugins that are loaded by
        the engines. 
      </p>
    </section>

    <section name="Addon">
      <p>
        Plugins are bundled in so called addons which are simple Jar projects under the 'addon'
        directory.
      </p> 
      <ul>
        <li><b>builtin</b> is a workflow addon, it differs from other workflow addons in the fact that
          the server-side implementation is 'built in' the repository itself instead of in a separate Jar.
          Note that these builtin workflows are very low-level and should not be accessed directly from
          the frontend. They should only be called from other workflow plugins as part of a chain of workflow steps.
        </li>
        <li><b>cms</b> is a bundling of all frontend addons that together make up the main functional blocks
         of the default CMS. Each tab (perspective) in the CMS user interface has it's own addon. Because of this
         setup adding, changing or removing a tab is entirely done by adding, changing or removing the Jar implementing
         the tab to/from the classpath and changing the frontend configuration in the repository.</li>
        <li><b>defaultcontent</b> is a repository addon containing some simple sample content meant
         for demonstration purposes</li>
        <li><b>reporting</b> is a repository addon together with a frontend addon which together
        implement reporting functionality for the CMS. Examples of usage of this addon are the activity
        and todo views on the cms-dashboard</li>
        <li><b>reviewed-action</b> is a workflow addon, it implements all logic
        concerning the (un)publication of documents. It is a bundling of a
        repository addon implementing the workflow business logic
        with a frontend addon bundling some frontend plugins for user interaction
        and a common addon for the interface between the two.
        </li>        
        <li><b>standards</b> contains standard stuff that other addons may use or extend. It's repository
        addon defines low level standard types and it's frontend addon contains common frontend plugins that
        are reused in other addons.</li>
        <li><b>template</b> is a frontend addon that implements the document template editor</li>
        <li><b>versioning</b> is a frontend addon that contains some plugins for interacting with document versioning
        implemented by the repository</li>
        <li><b>xinha and xinha-frontend</b> are frontend addons that together make up the Xinha HTML editor</li>
        <li><b>yui</b> is a frontend addon implementing Drag&amp;Drop functionality.</li>
      </ul>
    </section>
    
    <section name="Dependencies between addons">
      <p>
        Because addons are ordinary java projects built with Maven it is extremely easy to add any inter-addon
        dependency you like. If left unchecked this can easily lead to spaghetti where all addons depend on each
        other. When this happens the whole idea of splitting functionality between addons becomes obsolete and we
        might as well put all plugins into one big addon, or better yet into the engines themselves and reduce the
        number of projects drastically. Obviously this will also kill all customizability and extendability.
        <br/><br/>
        On the other hand completely forbidding inter-addon dependencies is also not an option because some addons
        implement functionality used by other addons. Therefore it is important to keep these dependencies to a minimum
        and stick to some simple guidelines:
        <br/><br/>
        Repository addons are easy: they should NEVER depend on each other via a java dependency.
        Even in the case of one workflow calling another this is not done by a direct Java call, but via 'workflow chaining'
        which is core repository functionality. Repository addons can be seen as pure self-contained black boxes.
        <br/><br/>
        This is not the case for frontend addons: For example the drag&amp;drop functionality implemented by addon-yui
        is meant to be used by other addons. Therefore it is a good idea to split the frontend addons in two categories:
        <b>'semi-finished'</b> and <b>'finished'</b> 
      </p>
      <ul>
        <li>
          <b>'semi-finished'</b> frontend addons don't contain 'end plugins' used in an application, they only contain
          classes that can be used or extended by other 'finished' addons. Examples are:
          <ul>
            <li>addon-yui-frontend</li>
            <li>addon-xinha(-frontend)</li>
            <li>addon-standards-frontend</li>
            <li>addon-reporting-frontend</li>
          </ul>
        </li>
        <li>
          <b>'finished'</b> frontend addons only contain 'end plugins' that are used in an application. Examples are:
          <ul>
            <li>all addon-cms-* addons</li>
            <li>addon-reviewed-action-frontend</li>
            <li>addon-versioning</li>
          </ul>          
        </li>
      </ul>
      <p>
        As a rule of thumb: you may always make a dependency to a 'semi-finished' addon but NEVER to a 'finished' addon.
      </p>  
    </section>
    

    <section name="Repository">
      <p>
        The repository is implemented by the projects bound by the repository project.
      </p>
      <source>
|-- repository               Pom
|   |-- engine               Jar       Repository core
|   `-- application          War       Minimal repository application, all other repository application projects are
                                       <a href="http://maven.apache.org/plugins/maven-war-plugin/examples/war-overlay.html">'WAR overlays'</a> of this project.
      </source>
    </section>

    <section name="Frontend">
      <p>
        The <a href="../plugins/frontend/frontend-plugin-architecture.html">
        frontend plugin architecture</a> is implemented by the
        projects bound by the frontend project.
      </p>
      <source>
|-- frontend                 Pom
|   |-- engine               Jar       Frontend core
|   |-- plugins              Jar       core plugins for a minimal GUI
    `-- application          War       Minimal frontend application, all other frontend application projects are
                                       <a href="http://maven.apache.org/plugins/maven-war-plugin/examples/war-overlay.html">'WAR overlays'</a> of this project.
                                       It is configured to start an embedded repository.
      </source>
    </section>


    <section name="Package">
      <p>
        Application project assembling Hippo CMS 7.
      </p>
      <source>
|-- package                  Pom       hippo-ecm-package
|   |-- config               Jar       hippo-ecm-package-config
|   |-- skin                 War       hippo-ecm-package-skin
|   |-- test                 Jar       hippo-ecm-package-test        
|   |-- ear                  Ear       hippo-ecm-package-ear
|   `-- war                  War       hippo-ecm-package-war
      </source>
    </section>

    <section name="Tools">
      <p>
        The <b>tools</b> directory contains a collection of tools surrounding
        Hippo ECM.
      </p>
      <source>
|-- tools                    Pom        hippo-ecm-tools
|   |-- testutils            Jar        hippo-ecm-tools-testutils
|   `-- migration            Jar        hippo-ecm-tools-migration
      </source>
    </section>
    
    
    <section name="API">
      <p>
        Hippo ECM specific extensions to the JCR API.
      </p>
      <source>
        |-- api                      Jar
      </source>
    </section>
    
  </body>
</document>


