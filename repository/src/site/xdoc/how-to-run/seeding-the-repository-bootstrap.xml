<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2007 Hippo
  
  Licensed under the Apache License, Version 2.0 (the  "License"); 
  you may not use this file except in compliance with the License. 
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" 
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
  See the License for the specific language governing permissions and 
  limitations under the License.
-->
<document>
<body>

<section name="Bootstrapping the repository">

<p>
The Hippo repository has been designed to allow for extensive customization.
In such a degree even, that the bare repository has only limited
functionality.  Two examples; for one, it defines no template document
structure.  What constitutes a document is dependent on the application domain
and is normally configured seperately.  Workflow, which defines which
operations are allowed on documents, is a pure plugin.  The repository only
defines how a workflow can be accessed, not which operations it can define or
which implementation to be used.
</p>

<p>
Because of this high pluggable structure, the bare repository is relatively
lean, and you are likely to always need to add, replace, or remove modules in
your own environment, to obtain the set of functionalities you require.  The
default repository you can download comes with a number of modules available
to it.
</p>

<p>
A big problem with many systems, is that customization requires rebuilding the
application to include the additional features.  With Hippo repository it is
possible to add new functionalities to an existing databases without
rebuilding the application.
</p>

<p>
The repository is indicated to load new functionality be adding certain
content at a special location in the repository.  This content must naturally
be of a specific type in order for the repository to pick up the right new
functionality.  Once the special node is known, the repository will interpret
it.  The properties of this node indicate actions how the repository should be
boot-strapped in order to include the new functionality.  Upon successfully
having performed the bootstrap the properties are removed such that the
bootstrap procedure for each plugin is performed only once.
</p>

<subsection name="How to use">

<p>
A new functionality package is described using a JCR node of node-type
hippo:initializeitem and this node should be placed in the repository at the
location <code>/configuration/initialize</code>.  Certain (optional) properties describe
how to bootstrap the repository to include the new features which are executed
upon having saved (see note below) the node.
</p>

<p>
The following list describes which properties may be set to an initialization
node, and the effect it has:
</p>

<dl>
<dd>hippo:namespace</dd>
<dt>The value of this property indicates the namespace URL of the namespace.
The actual shorthand name of the namespace is the nodename of the
initialization node (see also example below).</dt>
<dd>hippo:nodetypes</dd>
<dt>The value of this property specifies a resource (file) available on the
classpath of the repository.  The content of this file should be a proper JCR
content node definition (CND) file.  The node defintions are inserted into the
repository.</dt>
<dd>hippo:content</dd>
<dt>The value of this property indicates a resource available on the
classpath.  The content of this resource should be a valid XML dump describing
content to be loaded into the running repository.  The content is loaded
through Session.importXML.  Unless the hippo:contentroot property is also set,
the content is loaded relative to the root node in the JCR repository.</dt>
<dd>hippo:contentroot</dd>
<dt>The value of this property indicates an alternative location where to load
the content as indicated by the hippo:content property.  The value should be
an absolute JCR path starting with a single leading slash.</dt>
</dl>

<p>
Because the hippo:nodetypes, hippo:namespace and hippo:content are interpreted
in the indicated order, they may make use of their subsequent effect.  So the
content can use the namespace as earlier defined.
</p>

<p>
At this time, the repository will only load the new features at start-up time.
It is therefore required that you stop and restart the repository server.
This is scheduled to be fixed for M3.
</p>

<subsection name="Example:">

<source>
Session session = ...;
Node node = session.getRootNode().addNode("/configuration/initialize","hippo:initializefolder");
node = node.addNode("demo","hippo:initializeitem");
node.setProperty("hippo:namespace","http://www.revolutionware.org/nt/1.0");
node.setProperty("hippo:nodetypes","nodetypes.cnd");
session.save();
// At this time the initialization procedure may have created
// a new node type demo:mynodetype if present in nodetypes.cnd.
session.getRootNode().addNode("test","demo:mynodetype");
</source>

</subsection>

<p>
This is the programmatic example how the new namespace "demo" is defined with
address "http://www.revolutionware.org/nt/1.0". Subsequently the repository
will try to access the resource "nodetypes.cnd" which should be available on
the classpath and load the node type definitions from this file.
</p>

<p>
You can also use a front-end to create the node and properties.
</p>

</subsection>

<subsection name="Building package which build in bootstrap procedures">

<p>
To automate the procedure of initializing modules, you can add the content to
<a href="configuration/configuration.html">configuration.xml</a>.
At this time, there can be
only a single configuration.xml which is packaged with the repository.
</p>

<p>
Therefor if you want a repository to have the plugins automatically available,
it is required to rebuild the repository in a custom project, such that the
<a href="configuration/configuration.html">configuration.xml</a> can be overridden.
</p>

</subsection>
</section>

</body>
</document>
