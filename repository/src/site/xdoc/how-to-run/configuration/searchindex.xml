<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2007 Hippo
  
  Licensed under the Apache License, Version 2.0 (the  "License"); 
  you may not use this file except in compliance with the License. 
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" 
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
  See the License for the specific language governing permissions and 
  limitations under the License.
-->
<document>
    <properties>
        <title>Configuration</title>
    </properties>
    <body>
        <section name="SearchIndex configuration">
            <p>
                The SearchIndex element is part of the Workspace configuration. See <a href="workspace.html">Workspace</a> for 
                a minimal SearchIndex configuration. See 
            </p>
            <p>
                <a href="http://wiki.apache.org/jackrabbit/Search">http://wiki.apache.org/jackrabbit/Search</a>
            </p>
            <p>
                for the JackRabbit wiki about JackRabbit SearchIndex configuration, and 
            </p>
            <p>
                <a href="http://wiki.apache.org/jackrabbit/IndexingConfiguration">http://wiki.apache.org/jackrabbit/IndexingConfiguration</a>
            </p>
            <p>
                for the 
                JackRabbit wiki about the JackRabbit IndexingConfigurationImpl.
            </p>
                
            <p>
                This page elaborates on "best practice" SearchIndex params, the custom Hippo Repository 
                ServicingSearchIndex, and the custom Hippo Repository ServicingIndexingConfigurationImpl. 
            </p>
            <p>
                <subsection name="SearchIndex Configuration">
                    <p>
                        For M1, the minimal SearchIndex configuration looks like (for M2, the indexingConfiguration will probably 
                        denote some repository path like "jcr://some/location/in/workspace" instead of the file system location or available in classpath
                        as it is at the moment.)
                    </p>
                    <source>
&lt;SearchIndex class="org.hippoecm.repository.FacetedNavigationEngineThirdImpl"&gt;
    &lt;param name="indexingConfiguration" value="indexing_configuration.xml"/&gt;
    &lt;param name="indexingConfigurationClass" value="org.hippoecm.repository.query.lucene.ServicingIndexingConfigurationImpl"/&gt;
&lt;/SearchIndex&gt;
                    </source>
                </subsection>
                
                <subsection name="Best Practice SearchIndex Configuration">
                    <p>
                    At <a href="http://wiki.apache.org/jackrabbit/Search">http://wiki.apache.org/jackrabbit/Search</a> all available &lt;SearchIndex&gt; params 
                    are described. Below follows some Hippo Repository default settings for some combination of params
                    which have been found to be proper values. 
                    </p>
                    <source>
&lt;param name="useCompoundFile" value="true"/&gt;
&lt;param name="minMergeDocs" value="100"/&gt;
&lt;param name="volatileIdleTime" value="10"/&gt;
&lt;param name="maxMergeDocs" value="1000000000"/&gt;
&lt;param name="mergeFactor" value="5"/&gt;
                    </source>
                    <p>
                        Setting maxMergeDocs too low or mergeFactor too high results in many lucene indexes
                        which in turn slows down lucene queries severly. 
                        The volatileIdleTime is the idle time in seconds until the volatile index part is moved to a 
                        persistent index even though minMergeDocs is not reached.
                        Also see 
                        <a href="#Expert: JackRabbit lucene implementation">JackRabbit lucene implementation</a>.
                    </p>
                    <p>
                        Two other interesting SearchIndex params are
                        <ol>
                            <li>textFilterClasses  : Sets the list of text filters (and text extractors) to use for extracting text content 
                            from binary properties. The list must be comma (or whitespace) separated, and contain 
                            fully qualified class names of the TextFilter (and since 1.3 TextExtractor ) classes to 
                            be used. The configured classes must all have a public default constructor.
                            </li>
                            <li> analyzer: Default, JackRabbit ships with a JackrabbitAnalyzer. The analyzer configured 
                                in &lt;param name="analyzer" value="..."&gt; is used as default text analyzer. If needed, this 
                                analyzer can be replaced by for example org.apache.lucene.analysis.Analyzer.GermanAnalyzer for
                                german texts. 
                                At <a href="http://wiki.apache.org/jackrabbit/IndexingConfiguration">IndexingConfiguration</a> at the bottom,
                                there is described how to set different analyzers per property.
                            </li>
                        </ol>
                        
                    </p>
                    <p>
                        At the moment of this writing we have forceConsistencyCheck, enableConsistencyCheck and autoRepair set to true.
                        Still needed investigation wether this is needed.
                    </p>    
                    <source>
&lt;param name="forceConsistencyCheck" value="true"/&gt;
&lt;param name="enableConsistencyCheck" value="true"/&gt;
&lt;param name="autoRepair" value="true"/&gt; 
                    </source>
                    
                </subsection>
                
                <subsection name="ServicingSearchIndex">
                    The ServicingSearchIndex extends the org.apache.jackrabbit.core.query.lucene.SearchIndex
                    to enable 
                    <ol>
                        <li>
                            getting indexing_configuration from a jar classpath instead of the current 
                            JackRabbit implementation which (at the moment of this writing though since there is a JIRA
                            issue that addresses this issue, and describes indexing_configuration being fetched from the 
                            repository content itself) can only fetch an indexing_configuration from filesystem.  
                        </li>
                        <li>
                            extend the createDocument that is responsible for creating a lucene Document which will be 
                            added to the lucene index. This createDocument uses Hippo ServicingNodeIndexer which indexes 
                            documents in a way to enable fast faceted searching on their properties. 
                        </li>
                    </ol>
                    Our createDocument function calls the Hippo Repository ServicingNodeIndexer which indexes 
                    like the normal JackRabbit NodeIndexer, but is also indexes properties in such a way that they can
                    be search on in a facet way. 
                    
                </subsection>
                
                <subsection name="ServicingIndexingConfigurationImpl">
                    At the time of this writing, the ServicingIndexingConfigurationImpl only serves to have the xmlns:hippo="http://www.hippoecm.org/nt/1.0"
                    namespace available, and to know wether a property is a Hippo Facet or Hippo Path, and needs 
                    to be indexed as such. Currently, the indexing_configuration is ignored, but might become important in M2 or M3. 
                    <br/>
                    Current configuration can look like:
                    <source>
&lt;configuration xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:hippo="http://www.hippoecm.org/nt/1.0"&gt;
    &lt;facets&gt;
         &lt;property name="author"/&gt;
         &lt;property name="date"/&gt;
         &lt;property name="published"/&gt;
    &lt;/facets&gt;
&lt;/configuration&gt;
                    </source>
                    <p>
                    This would mean, that <i>only</i> properties of type 'caption', 'author' and 'date' are indexed as 
                    facets, and other properties are not available as facets. The advantage for this is that less properties 
                    needs to be indexed and their TermVector stored. For example, it makes hardly any use to index the 'content' of 
                    a document as a <i>facet</i> value. 
                    Currently, some JCR properties are indexed as facet, and some are never. See below:
                    </p>
                    <p>
                    <table>
                        <tr>
                            <th>property</th>
                            <th>facet indexed</th>
                        </tr>
                        <tr>
                            <td>javax.jcr.PropertyType.BINARY</td>
                            <td>NO</td>
                        </tr>
                        <tr>
                            <td>javax.jcr.PropertyType.BOOLEAN</td>
                            <td>YES</td>
                        </tr>
                        <tr>
                            <td>javax.jcr.PropertyType.DATE</td>
                            <td>YES</td>
                        </tr>
                        <tr>
                            <td>javax.jcr.PropertyType.DOUBLE</td>
                            <td>YES</td>
                        </tr>
                        <tr>
                            <td>javax.jcr.PropertyType.LONG</td>
                            <td>YES</td>
                        </tr>
                        <tr>
                            <td>javax.jcr.PropertyType.REFERENCE</td>
                            <td>NO</td>
                        </tr>
                        <tr>
                            <td>javax.jcr.PropertyType.PATH</td>
                            <td>NO</td>
                        </tr>
                        <tr>
                            <td>javax.jcr.PropertyType.STRING</td>
                            <td>YES</td>
                        </tr>
                        <tr>
                            <td>javax.jcr.PropertyType.NAME</td>
                            <td>NO</td>
                        </tr>
                    </table>
                    </p>
                    <p>
                        <b>Future:</b><br/>
                        The indexing_configuration might be extended to support (multiple) formatting of 
                        dates/long/string. 
                        <br/>
                        For example define:
                        <ol>
                            <li>Define the type of property for conversion to String and back</li>
                            <li>Double/Long/Date granularity for effective range searches</li>
                            <li>Date formatting option to index a Date property as weeknumber for example (yyyyWW)</li>
                            <li>max string length for facet</li>
                        </ol>
                    </p>
                    <p>   
                        The first option is probably quite essential and must be implemented.
                        Obviously, the other parameters might be considered as tuning performance, becoming important for >10.000.000
                        nodes involved with range queries reducing granularity will make a huge optimalisation (or
                        set the granularity exactly to be the facet value set). See lucene
                        <a href="http://lucene.zones.apache.org:8080/hudson/job/Lucene-Nightly/javadoc/org/apache/lucene/search/RangeQuery.html">RangeQuery</a> and 
                        <a href="http://lucene.zones.apache.org:8080/hudson/job/Lucene-Nightly/javadoc/org/apache/lucene/search/ConstantScoreRangeQuery.html">ConstantScoreRangeQuery.html</a> 
                        if you are interested in the bits and the bytes. 
                    </p>
                    <p>
                        Date formatting indexing options might be very useful if for example faceted navigation is wanted 
                        on something like year-month-weeknumber basis, on a single Date property. Configuration might for example
                        look like
                        <source>
NOT YET AVAILABLE:
&lt;facets&gt;
    &lt;property name="date" type="Date" format="WW" facetname="weeknumber"/&gt;
&lt;/facets&gt;                           

or for single property to multiple facets

&lt;facets&gt;
    &lt;property name="date" type="Date"&gt;
        &lt;facet name="year" format="yyyy"/&gt;
        &lt;facet name="month" format="MON"/&gt;
        &lt;facet name="weeknumber" format="WW"/&gt;
    &lt;/property&gt;
&lt;/facets&gt;
                        </source>
                        
                        <b>Note:</b>
                        If these option become available, do realize that after changing the indexing_configuration 
                        re-indexing must be done for the entire workspace. Deleting the workspace index and restarting
                        will do the job, but might take long for large workspaces. 
                    </p>
                    
                </subsection>
                
            </p> 
             
        </section>       
    </body>
</document>