<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2008 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
  <properties>
      <title>Hippo CMS Tour for Information Architects</title>
  </properties>
  <body>
    <section name="Hippo CMS Tour for Information Architects">
     <span class='shortdesc'>To get introduced to the role of CMS information architect, 
      take the following tour.</span> 
      
 <p>To get introduced to the role of CMS information architect, you will look over the shoulder of
    Alice, who is working as an CMS information architect for the imaginary organization Swatia,
    an organization of people very interested in music, art and knowledge. We did not imagine an
    answer to the question whether Swatia is a commercial organization, a hobby organization, or both. 
</p>

   <blockquote>
    <table>
  
     <tr>
      <td>Browser</td>
      <td>
       <span class='web-48 icon-48'/> 
      </td>
      <td>
        Open the Hippo CMS site 
        <a href="http://localhost:8080/cms/">http://localhost:8080/cms/</a> in 
        your browser. 
      </td>
     </tr>
   
     <tr>
      <td>Login</td>
      <td>
       <span class='login-48 icon-48'/> 
      </td>
      <td> 
         <a href="./howto/login.html">Login to Hippo CMS</a> in the CMS account given to you by your 
          CMS administrator. Alice logs in with her name. Her password is only known to her, so you do
          not get to see it.
      </td>
     </tr>

     <tr>
      <td>Namespace</td>
      <td>
       <span class='structure-48 icon-48'/> 
      </td>
      <td> 
         <a href="./howto/create_namespace.html">Create a namespace</a>. Swatia decides to
         publish an online newspaper about music, art and knowledge. The name will be Sar, which
         is just an abbreviation of `Swatia Articles'. Alice creates a namespace to gather
         all the different kind of content of Sar in.
      </td>
     </tr>

     <tr>
      <td>Document types</td>
      <td>
       <span class='structure-48 icon-48'/> 
      </td>
      <td> 
         <a href="./howto/create_documenttype.html">Create document types</a>. 
         Alice decides that the online newspaper should at least contain 
         documents for announcing an upcoming happening and documents for
         describing the author's hobby. So for the time being, she creates two document types,
         which she calls `upcoming' and `myhobby'. 
      </td>
     </tr>
  
     <tr>
      <td>Add date</td>
      <td>
       <span class='structure-48 icon-48'/> 
      </td>
      <td> 
         <a href="./howto/add_date_to_documenttype.html">Add date to document type</a>. 
         Alice starts to define the 'upcoming' document type.
         According to Alice, for upcoming happenings, the date of the happening should
         always be known, if an article is the be published about it.
         So she starts with a date field, which she makes mandatory.
      </td>
     </tr>

     <tr>
      <td>Add string</td>
      <td>
       <span class='structure-48 icon-48'/> 
      </td>
      <td> 
         <a href="./howto/add_string_to_documenttype.html">Add string to document type</a>. 
         Of course, the articles about upcoming happings should always have a title.
         Titles should be short and to the point.
         So Alice adds string field, which she makes mandatory and having 
         a size of 60 characters.
      </td>
     </tr>

     <tr>
      <td>Add boolean</td>
      <td>
       <span class='structure-48 icon-48'/> 
      </td>
      <td> 
         <a href="./howto/add_boolean_to_documenttype.html">Add boolean to document type</a>. 
         Alice thinks that every author of an article about an upcoming happening should
         answer the question if the happening is indoors. 
         This allows people who only want to go to indoor happenings, to define a 
         query so that they are only notified of indoor happenings and are not bothered
         with happenings they are not interested in.
         So Alice adds a mandatory boolean field called 'Indoors?'.
         <p>Alice also wants authors to answer the question if the happening is a
            recurring happening, a happening that has occured before.
            Some people only want to go to happenings that have been a succes before, while
            others may only want to go to happenings that are the first of their kind.
            So Alice adds a mandatory boolean field called 'Recurring?'.
         </p>
      </td>
     </tr>

     <tr>
      <td>Add number</td>
      <td>
       <span class='structure-48 icon-48'/> 
      </td>
      <td> 
         <a href="./howto/add_string_to_documenttype.html">Add number to document type</a>. 
         Alice wants readers to always know what the entrance price is for a happening.
         An entrance price is a number and the list of possible fieldtypes has no number in it.
         But any number is of course also a string, i.e. a sequence of characters, so
         she uses the string fieldtype for it. So Alice adds a mandatory string field
         called 'Entrance price in Euro'.
      </td>
     </tr>

     <tr>
      <td>Add markuped text</td>
      <td>
       <span class='structure-48 icon-48'/> 
      </td>
      <td> 
         <a href="./howto/add_markuped_text_to_documenttype.html">Add marked-up text to document type</a>. 
         Well, an article about an upcoming happening should allow for a description of the happening.
         However, that should be optional, as the title may in some cases enough. So Alice adds a 
         optional markuped text field, called 'Description'.
      </td>
     </tr>

     <tr>
      <td>Change field</td>
      <td>
       <span class='structure-48 icon-48'/> 
      </td>
      <td> 
         <a href="./howto/change_field_in_documenttype.html">Change field in document type</a>. 
         Alice decides that the title of an 'upcoming' article, may be more than 60 characters.
         She decides that the maximum number of characters should be 68. So she changes 
         the size value for the title field.          
      </td>
     </tr>

     <tr>
      <td>Remove field</td>
      <td>
       <span class='structure-48 icon-48'/> 
      </td>
      <td> 
         <a href="./howto/remove_field_from_documenttype.html">Remove field from document type</a>. 
         Alice adds another field, does not like it, and removes it again.          
      </td>
     </tr>

     <tr>
      <td>Save documenttype</td>
      <td>
       <span class='structure-48 icon-48'/> 
      </td>
      <td> 
         <a href="./howto/save_documenttype.html">Save document type</a>. 
         Alice saves here new document type called 'upcoming'.          
      </td>
     </tr>

     <tr>
      <td>Logout</td>
      <td>
       <span class='logout-48 icon-48'/> 
      </td>
      <td> 
         <a href="./howto/logout.html">Logout</a>. 
         Alice quits for today.          
      </td>
     </tr>
 
    </table>
   </blockquote>
      


    </section>
  </body>
</document>
