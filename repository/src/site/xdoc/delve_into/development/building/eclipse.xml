<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2007-2008 Hippo
  
  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
  <properties>
    <title>Developing Hippo ECM with Eclipse</title>
  </properties>
  <body>
    
    <section name="Introduction">
      <p>
        This chapter is meant as a guide for setting up and managing a debugging environment
        for Hippo ECM inside Eclipse. By the time you have finished reading you will be able to
        run and debug every aspect of Hippo ECM from within Eclipse.
      </p>
    </section>
    
    <section name="Prepare">
      <p>Follow all steps documented on the <a href="maven.html">Building with Maven</a> page.
        Don't continue with the instructions on this page before you have seen a running application
        using just Maven.</p>
      
      <div style="border:1px solid black; padding:1em;">
        <p>NOTE: Do not do the initial checkout of the source tree from within Eclipse, use the command
          line SVN client.</p>
        <p>NOTE: The checked out project directory should not be inside your Eclipse workspace directory.
          For the rest of this chapter ~/hippo-ecm is the directory where the sources
          are checked out and ~/workspace is the Eclipse workspace directory.</p>
      </div>
      
      <p>Download and install <a href="http://www.eclipse.org/">Eclipse</a> version >= 3.3.2</p>
            
      <p>Add some memory flags to the Eclipse -vmargs startup argument:</p>
      <ul>
        <li>Set the heap size to at least 512M by adding something like -Xms512m -Xmx512m</li>
        <li>Set the permSpace size to at least 128M by adding something like -XX:MaxPermSize=128M</li>
      </ul>
      
      <p>
        Start Eclipse, it is strongly advised to start with a clean workspace.
        <br/><br/>
        Tell Eclipse where it can find your local Maven repository by opening a command shell and running:
      </p>
      <source>~/> mvn -Declipse.workspace=&lt;path-to-eclipse-workspace&gt; eclipse:add-maven-repo</source>
      <p> 
        Import the Eclipse update site bookmarks file 
        <a href="https://svn.hippocms.org/repos/hippo/hippo-ecm/trunk/tools/eclipse/bookmark.xml"><b>
        ~/hippo-ecm/tools/eclipse/bookmark.xml</b></a> using the Eclipse update manager.
        <br/><br/>
        This will add update sites for the following Eclipse plugins which need to be installed:
      </p>
            
      <ul>
        <li>
          <b>Subversive: </b>see the official 
          <a href="http://www.eclipse.org/subversive/documentation/gettingStarted/aboutSubversive/install.php">documentation</a>.
        </li>
        <li>
          <b>Run Jetty Run: </b>see the official
          <a href="http://code.google.com/p/run-jetty-run/">documentation</a>.
        </li>
        <li>
          <b>JPOX Eclipse:</b>
          <br/>
          You only need to install the 'JPOX Eclipse Plugin', after installing go to the Eclipse preferences dialog and:
          <ol>             
            <li>
              <p>Select JPOX</p>
            </li>
            <li>
              <p>Uncheck 'Use project classpath when running tools' (some versions have it below submenu '<i>JPOX -> General</i>')</p>
            </li>
            <li>
              <p>Add the following jars to the classpath: You can find these jars in your
                local Maven repository.
              </p>
              <ul>
                <li>&lt;maven-repository&gt;/jpox/jpox-core/1.2.0-beta-2/jpox-core-1.2.0-beta-2.jar</li>
                <li>&lt;maven-repository&gt;/jpox/jpox-enhancer/1.2.0-beta-2/jpox-enhancer-1.2.0-beta-2.jar</li>
                <li>&lt;maven-repository&gt;/bcel/bcel/5.2/bcel-5.2.jar</li>
              </ul>
            </li>
            <li>
              <p>Select JPOX -&gt; Enhancer and enter 'BCEL' in the the 'Class Enhancer' field.</p>
            </li>
          </ol>
        </li>
        <li>
          <b>Groovy Monkey: </b>see the official
          <a href="http://groovy.codehaus.org/Groovy+Monkey">documentation</a>.
        </li>
      </ul>
      <p>
        The Hippo ECM Maven build extensively uses
        <a href="http://maven.apache.org/plugins/maven-war-plugin/examples/war-overlay.html">WAR overlays</a>,
        in order to mimic this for Eclipse some scripts have been made that create symbolic links for these overlays.
      </p>
      <ul>
        <li>
          <p>
            <b>Windows: </b> Open a command shell, go to the <b>~\hippo-ecm\tools\eclipse</b> directory and run the 
            <a href="https://svn.hippocms.org/repos/hippo/hippo-ecm/trunk/tools/eclipse/createlinks.bat"><b>
            createlinks.bat</b></a> script.
          </p>
          <p>
            <b>Note:</b> Although it is not possible to create symbolic links with the tools that are provided by
            default by Windows, they do exist. This script uses one of the Microsoft supplied tools for this:
            <a href="http://www.microsoft.com/technet/sysinternals/fileanddisk/junction.mspx">junction</a>.
            If you prefer not to install junction the alternative is to manually copy the linked directories,
            please note that this has to be done every time there is an update in the linked directory. See
            the script for what needs to be done.
          </p>
        </li>
        <li>
          <p>
            <b>Unix: </b> Open a command shell, go to the <b>~/hippo-ecm/tools/eclipse</b> directory and run the 
            <a href="https://svn.hippocms.org/repos/hippo/hippo-ecm/trunk/tools/eclipse/createlinks.sh"><b>
            createlinks.sh</b></a> script.
          </p>
        </li>
      </ul>
    </section>
    
    <section name="Create Eclipse projects">
      <div style="border:1px solid black; padding:1em;"> NOTE: Make sure that there is no
        .project file in the toplevel (hippo-ecm) directory before proceding. If there is
        one the Eclipse import projects wizard will fail. 
      </div>
      <p> <br/>Use the <a href="http://maven.apache.org/plugins/maven-eclipse-plugin/">Maven
        Eclipse plugin</a> to generate Eclipse project files: 
      </p>
      <source>
~/> cd hippo-ecm
~/hippo-ecm> mvn [-o] eclipse:eclipse
      </source>
      <p>
        <b>Tip: </b>This can take a (very) long time because it will attempt to download the
        sources and javadocs of all dependencies. If you don't need this you can use the '-o' (Work offline)
        flag which will make it a lot faster.
        <br/><br/>
        Note that this goal fails if there are unresolved (jar) dependencies. So before using the '-o'
        flag you need to ensure that this isn't the case by running eg. "mvn [-Dmaven.test.skip=true] [clean]
        [install | package]". See the section on <b>Keeping up</b> below for more on this.
      </p>
      <p> <br/><br/> Import the Eclipse projects into your workspace: </p>
      <ol>
        <li>
          <p>Run the import project wizard: <i>File -&gt; Import -&gt; General
            -&gt; Existing Projects into Workspace</i></p>
        </li>
        <li>
          <p>Press 'Browse'</p>
        </li>
        <li>
          <p>Select the 'hippo-ecm' directory, press OK</p>
        </li>
        <li>
          <p>All hippo-ecm projects should be listed</p>
        </li>
        <li>
          <p>Press 'Select all' and then 'Finish'</p>
        </li>
        <li>
          <p>Wait until Eclipse has finished building everything, until there is no more activity in the Eclipse 'Progress' view.</p>
        </li>
      </ol>     
      <p>
        As a final step you need to run the 
        <a href="https://svn.hippocms.org/repos/hippo/hippo-ecm/trunk/tools/eclipse/monkey/prepareProjects.gm">
        <b>prepareProjects.gm</b></a> script that you can find under
        the <i>Prepare Hippo ECM projects</i> menu item in the <i>Groovy Monkey</i> Eclipse menu.
        This script will fix some project dependencies that were not set correctly by
        the 'mvn eclipse:eclipse' step above. If the script fails with a ClassNotFoundException
        or a MethodNotFoundException you are probably using an older or 'light' version of Eclipse,
        consider upgrading to the 3.4 'Classic' or 'EE' editions. If this is not an option you can fix
        the projects by hand, see the script for what it does.  
        <br/><br/>
      </p>      
    </section>
    
    <section name="Run">
      <p>
        <a href="http://code.google.com/p/run-jetty-run/">Create Run-Jetty-Run configuration</a>
      </p>
      <ul>
        <li>
          <p>Name is 'hippo-ecm-quickstart-war'</p>
        </li>
        <li>
          <p>Project is 'hippo-ecm-quickstart-war'</p>
        </li>
        <li>
          <p>Webapp dir is 'src/main/webapp'</p>
        </li>
        <li>
          <p>Context path = '/cms'</p>
        </li>
        <li>
          <p>Port is '8080'</p>
        </li>
      </ul>
      <p>Select the 'Arguments' tab and add to 'VM Arguments':</p>
      <source>-Dorg.mortbay.util.FileResource.checkAliases=False</source>
      <p>(Optional) Select the 'Common' tab and check 'Run' and 'Debug' under
        'display in favorites menu'</p>
      <p> You can now debug Hippo ECM within Eclipse: Set a breakpoint in the constructor
        of org.hippoecm.frontend.Home, start the Run-Jetty-Run launcher in debug mode,
        open your browser and go to <a href="http://localhost:8080/cms">http://localhost:8080/cms</a></p>
      <br/>
    </section>
    
    <section name="Code formatting">
      <p>
        Before committing java code, please make sure that it has been formatted
    	using the standard Hippo code formatting rules. Download
    	<a href="http://repository.hippocms.org/coding-standards/hippo-eclipse-formatting.xml">hippo-eclipse-formatting.xml</a>
    	and load it into Eclipse using <i>Window -> Preferences -> Java -> Code style -> Formatter -> Import</i>.
    	Formatting a Java file is done in Eclipse by hitting Ctrl-Shift-F 
      </p>
    </section>
    
    <section name="Keeping up">
      <p>
        Hippo ECM is a very active project with many updates every day. 'Ordinary' updates can be digested
        by using the Eclipse Synchronization perspective and simple dependency changes can be fixed
        maually by using the Eclipse project properties "Build Path" dialog.
        <br/><br/>
        When your Eclipse projects are too much broken due to dependency changes to be fixed manually 
        the most straightforward (although not most elegant) way out is to regenerate all Eclipse
        project information:
      </p>
      <ol>
        <li>Delete all projects (do not delete contents)</li>
        <li>Run <b>mvn [-Dmaven.test.skip=true] [clean] install</b>, this will resolve any new dependencies</li>        
        <li>Run <b>mvn [-o] [eclipse:clean] eclipse:eclipse</b>, this will regenerate the Eclipse projects</li>
        <li>Make sure there is no .project file in the project root (ie. there is no 'ecm files' resource
        project for the whole source tree)</li>
        <li>Run the import project wizard</li>
        <li>Run the <b>"Prepare Hippo ECM projects"</b> script from the <i>Groovy Monkey</i> Eclipse menu</li>
      </ol>
      <p>
        This should always work (in theory at least :-) Note that it is not always necessary to go through all
        these steps, often one or more steps can be skipped. Choose your strategy depending on the type of update.
        <br/><br/>
      </p>
    </section>
  </body>
</document>
