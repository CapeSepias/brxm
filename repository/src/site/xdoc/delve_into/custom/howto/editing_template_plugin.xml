<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2007 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
    <properties>
      <title>Create an Editing Template Plugin</title>
    </properties>
    <body>
      <section name="Create an Editing Template Plugin">
        <span class="shortdesc">Create a template plugin that edits a custom type</span>

        <p>
          Using the <a href="../../user/information_architects/howto/index.html">Document Type Editor</a>, you can create
          straightforward document types.  The most commonly used field types are
          available <a href="../../user/information_architects/concepts/field_type_menu.html">out of the box</a>.
          In most cases, these
          will satisfy your requirements.  However, if you cannot achieve
          what you want using the graphical editor, there is always the option of
          defining your own custom field types at JCR level.
        </p>

        <p>
          We'll create a template plugin that stores a value, selected in a
          dropdown from a fixed set of options.
        </p>

        <subsection name="Create a plugin">
          <p>
            Create a project with the following Java class:
          </p>
<source><![CDATA[package org.example.template;

import java.util.ArrayList;

import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.ajax.form.OnChangeAjaxBehavior;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.DropDownChoice;
import org.apache.wicket.markup.html.panel.Fragment;
import org.apache.wicket.model.Model;
import org.apache.wicket.model.PropertyModel;
import org.hippoecm.frontend.model.properties.JcrPropertyValueModel;
import org.hippoecm.frontend.plugin.IPluginContext;
import org.hippoecm.frontend.plugin.config.IPluginConfig;
import org.hippoecm.frontend.service.render.RenderPlugin;

public class DeveloperPickerPlugin extends RenderPlugin {
    private static final long serialVersionUID = 1L;

    private String selected;
    private ArrayList<String> options;

    public DeveloperPickerPlugin(IPluginContext context, IPluginConfig config) {
        super(context, config);

        JcrPropertyValueModel model = (JcrPropertyValueModel) getModel();
        selected = (String) model.getObject();

        String mode = config.getString("mode", "view");
        Fragment fragment = new Fragment("fragment", mode, this);
        add(fragment);

        if ("edit".equals(mode)) {
            options = new ArrayList<String>();
            options.add("Ard");
            options.add("Arthur");

            DropDownChoice choice = new DropDownChoice("select", new PropertyModel(this, "selected"), new Model(options)) {
                private static final long serialVersionUID = 1L;

                @Override
                protected boolean wantOnSelectionChangedNotifications() {
                    return true;
                }
            };
            choice.add(new OnChangeAjaxBehavior() {
                private static final long serialVersionUID = 1L;

                @Override
                protected void onUpdate(AjaxRequestTarget target) {
                    JcrPropertyValueModel model = (JcrPropertyValueModel) DeveloperPickerPlugin.this.getModel();
                    model.setObject(selected);
                }
            });
            fragment.add(choice);
        } else {
            fragment.add(new Label("developer", new PropertyModel(this, "selected")));
        }
    }
}]]></source>
          <p>
            And add the following html
          </p>
<source><![CDATA[
<html xmlns:wicket="http://wicket.apache.org/">
  <wicket:panel>
    <wicket:container wicket:id="fragment" />
  </wicket:panel>
  <wicket:fragment wicket:id="edit">
    Select your favorite Hippo ECM developer:
    <select wicket:id="select"></select>
  </wicket:fragment>
  <wicket:fragment wicket:id="view">
    My favorite Hippo ECM developer is <span wicket:id="developer" />
  </wicket:fragment>
</html>
]]></source>
          <p>
            Add the addon to your (CMS frontend) WAR build and start it up.
          </p>
        </subsection>

        <subsection name="Create a custom type">
          <p>
            We'll define a custom type that uses a JCR string to store its value.
          </p>
          <ul>
            <li>
              Open the CMS console and navigate to
              <code>/hippo:namespaces/system/Text</code>
            </li>
            <li>Copy this node to <code>/hippo:namespaces/system/Category</code></li>
            <li>Navigate to the "hippo:template/hippo:template" child node</li>
            <li>Remove the "cols" and "rows" values from the frontend:overrides property</li>
            <li>Select the "root" node in the template</li>
            <li>Remove the "cols" and "rows" properties from the node</li>
            <li>Change the "plugin.class" property to "org.example.template.DeveloperPickerPlugin"</li>
          </ul>
        </subsection>

        <subsection name="Make it available in the Document Type Editor">
          <ul>
            <li>
              Navigate to the <code>/hippo:namespaces/hippo/templatetype/hippo:template/hippo:template/list</code> node
            </li>
            <li>Add "Category" to the "templates" property</li>
            <li>Add the "Developer" type to the defaultcontent:article type in
              the Document Type Editor</li>
            <li>Enjoy!</li>
          </ul>
        </subsection>

        <p>
          <a href="../../../images/addons/template_plugin.png">
            <img src="../../../images/addons/template_plugin_thumbnail.png" alt="My Favorite Developer Template Plugin" />
          </a>
        </p>

        <subsection name="Further reading">
          <p>
            We've only scratched the surface so far.  It is possible to edit complete
            nodes, not just property values.  With the template engine at your disposal,
            it is possible to instantiate other templates, e.g. to edit or display a node
            that is related to your own model.
          </p>
        </subsection>

      </section>

    </body>
</document>
          <!--
          <ul>
            <li>Custom field types</li>
            <li>Populating dropdown with values from other document(s)</li>
            <li>...</li>
          </ul>
          -->
