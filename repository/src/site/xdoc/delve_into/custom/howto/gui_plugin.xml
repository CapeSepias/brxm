<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2007 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
  <properties>
      <title>Create a GUI Plugin</title>
  </properties>
  <body>
      <section name="Hello World">
        <span class="shortdesc">Create a GUI plugin that displays "Hello World!"</span>

        <p>Most programmers seem to be interested in telling the world "Hello World!"
          Luckily, this is also possible with a plugin for Hippo ECM frontend
          applications. This tutorial describes how such a simple plugin can be created.
        </p>

        <p>
          We'll create a small project to contain our Hello World Plugin, which we can
          later on add to the Hippo ECM frontend application.
        </p>

        <subsection name="Maven structure">
          <p>
            We'll use Maven 2 to automate the build process. In a location of your choice,
            create a directory for our plugin project and create the following directory
            structure:
          </p>
<source>
|-- pom.xml
`-- src
    `-- main
        `-- java
            `-- org
                `-- example
                    `-- helloworld
                        |-- HelloWorldPlugin.html
                        `-- HelloWorldPlugin.java
</source>

          <p>
            The contents of the individual files are described in the following sections.
          </p>
        </subsection>

        <subsection name="pom.xml">
          <p>
            The Maven POM contains one dependency, on hippo-ecm-frontend-engine.
            This component contains the abstract Plugin class which we need to extend
            in our Hello World Plugin.
          </p>

          <p>
            We will package our plugin as a JAR so we can easily add it as a dependency
            to the Hippo ECM frontend application.
          </p>
<source>
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <name>Hello World</name>
  <description>Hello World plugin</description>
  <groupId>org.example</groupId>
  <artifactId>hello-world-plugin</artifactId>
  <version>1.01.00</version>
  <packaging>jar</packaging>

  <dependencies>
    <dependency>
      <groupId>org.hippoecm</groupId>
      <artifactId>hippo-ecm-frontend-engine</artifactId>
      <version>2.01.00.14266</version>
    </dependency>
  </dependencies>

  <build>
    <defaultGoal>install</defaultGoal>
    <resources>
      <resource>
        <filtering>false</filtering>
        <directory>${basedir}/src/main/java</directory>
        <includes>
          <include>**/*.html</include>
          <include>**/*.css</include>
        </includes>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.5</source>
          <target>1.5</target>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <repositories>
    <repository>
      <id>hippoecm</id>
      <name>Hippo ECM maven 2 repository.</name>
      <url>http://repository.hippocms.org/maven2/</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
      <releases>
        <updatePolicy>never</updatePolicy>
      </releases>
      <layout>default</layout>
    </repository>
  </repositories>
    
</project>]]>
</source>
        </subsection>

        <subsection name="HelloWorldPlugin.java">
          <p>
            Our HelloWorldPlugin class extends the Plugin class. In the
            constructor we add a static label.
          </p>
<source>
<![CDATA[package org.example.helloworld;

import org.apache.wicket.markup.html.basic.Label;
import org.hippoecm.frontend.plugin.IPluginContext;
import org.hippoecm.frontend.plugin.config.IPluginConfig;
import org.hippoecm.frontend.service.render.RenderPlugin;

public class HelloWorldPlugin extends RenderPlugin {
    private static final long serialVersionUID = 1L;

    public HelloWorldPlugin(IPluginContext context, IPluginConfig config) {
        super(context, config);

        add(new Label("label", "Hello World!"));
    }

}]]>
</source>
        </subsection>

        <subsection name="HelloWorldPlugin.html">
          <p>
            Just like any other Wicket component, a Plugin needs an HTML page
            defining its presentation.  For our HelloWorldPlugin this could
            look like this:
          </p>
<source>
<![CDATA[<html xmlns:wicket="http://wicket.apache.org/">
  <wicket:panel>

    <div wicket:id="label">text goes here</div>

  </wicket:panel>
</html>]]>
</source>
        </subsection>

        <subsection name="Building the plugin JAR">
          <p>
            Now build the JAR for the plugin and install it in your local Maven repository
            using the following Maven command:
          </p>
<source>
mvn install
</source>
        </subsection>

        <p>
          <a href="packaging.html">Continue to "Testing the plugin"</a>.
        </p>

      </section>

  </body>
</document>
