<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2008 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
 <properties>
  <title>Configure workspace</title>
 </properties>
 <body>

 <section name="Configure Workspace">
  <span class='shortdesc'>Configure Eclipse Workspace for Hippo CMS addon projects.</span>

    <p>General information about configuring an Eclipse workspace
      for Hippo projects can be found
      <a href='/delve_into/tools/howto/eclipse/configure_workspace.html'>here</a>.
    </p>

  <p>
   The Hippo CMS itself consists of about 70 projects, so it
   is strongly advised to use a workspace for your Hippo CMS addon projects that only contains
   Hippo CMS and your addon projects.
   The plan is that in the future, you will only need the Hippo CMS as a dependency package, so that
   you do not need to have the Hippo CMS projects locally, but that is not possible yet.
   <span class='expires'>When Hippo CMS can be used as a dependancy for addon projects.</span>
  </p>
  <p>
   You can place all your Hippo CMS addon projects, together with the Hippo CMS, in a single Eclipse workspace,
   so that you have the Hippo CMS only once and need to configure only one workspace for your hippo CMS addon
   projects. No extra configuration is required if you add another Hippo CMS addon project.
  </p>

  <subsection name='Configure update sites'>

   <p>You will have to install some plugins to Eclipse. Before you install the plugins,
    you must configure Eclipse so that Eclipse knows the update sites for these plugins.
    This is done with the Eclipse update manager, within Eclipse, so if you not already did,
    <a href='start_eclipse.html'>start Eclipse</a>.
   </p>

   <p>You could add the update sites by hand in the Eclipse update manager,
    but it is easier to import the update site bookmarks file provided by
    the <a href="${project_source_url}/${last_release}">Hippo CMS sources</a>
    in the
    <a href="${project_source_url}/${last_release}/tools/eclipse/bookmark.xml">eclipse bookmark.xml file</a>.
    If you have
    <a href='get_Hippo_CMS_source.html'>checked out the Hippo CMS sources</a> to a local folder you called
    <code>~/cms/</code>, then you find the file at <code>~/cms/tools/eclipse/bookmark.xml</code>.
   </p>
  </subsection>

  <subsection name='Install plugins'>

   You need respectively can install the following plugins in Eclipse:

   <ul>
    <li><span class='add'>Explanation about installing JPOX eclipse plugin</span>
          <b>JPOX Eclipse:</b>
          <br/>
          You only need to install the 'JPOX Eclipse Plugin', after installing go to the Eclipse preferences dialog and:
          <ol>
            <li>
              <p>Select JPOX</p>
            </li>
            <li>
              <p>Uncheck 'Use project classpath when running tools' (some versions have it below submenu '<i>JPOX -> General</i>')</p>
            </li>
            <li>
              <p>Add the following jars to the classpath: You can find these jars in your
                local Maven repository.
              </p>
              <ul>
                <li>&lt;maven-repository&gt;/jpox/jpox-core/1.2.0-beta-2/jpox-core-1.2.0-beta-2.jar</li>
                <li>&lt;maven-repository&gt;/jpox/jpox-enhancer/1.2.0-beta-2/jpox-enhancer-1.2.0-beta-2.jar</li>
                <li>&lt;maven-repository&gt;/bcel/bcel/5.2/bcel-5.2.jar</li>
              </ul>
            </li>
            <li>
              <p>Select JPOX -&gt; Enhancer and enter 'BCEL' in the the 'Class Enhancer' field.</p>
            </li>
          </ol>
        </li>
        <li>
          <b>Groovy Monkey: </b>Required, see the official
          <a href="http://groovy.codehaus.org/Groovy+Monkey">documentation</a>.
        </li>
   <li>
    <b>Subversive plugin: </b> to checkout/commit your project's sources from/to a Subversion (svn) repository.
    Optional. The <a href="${project_source_url}/${last_release}">Hippo CMS sources can be checkout
    from a subversion repository</a>, but only developers at Hippo
    can commit their changes back to that repository. The first checkout of the Hippo CMS sources should not
    be done from within Eclipse, but <a href='get_Hippo_CMS_source.html'>from the commandline</a>. 
    So this plugin would only be useful to checkout updates, which you also could do from the commandline.
    There are monthly Hippo CMS releases. The developers at Hippo commit updates on the Hippo CMS trunk
    contineously, but it is not advisable to develop addons on top of the trunk, as it is allowed that the
    trunk is in a broken state for a day or two. Develop addons on top of a release.
    If you want to use Subversion from within Eclipse, so their
    <a href="http://www.eclipse.org/subversive/documentation/gettingStarted/aboutSubversive/install.php">documentation</a>
    how to do it.
   </li>
   <li>
    <b>Run Jetty Run: </b> to build and run the package of your project from within Eclipse, for easy testing.
    Optional, you can also use the <a href='run_development_package.html'>commandline</a>.
    See their <a href="http://code.google.com/p/run-jetty-run/">documentation</a> to install the Eclipse plugin.
   </li>
 </ul>
</subsection>

<subsection name='War overlays'>

 Also <a href='war_overlays_in_eclipse.html'>make symbolic links for war overlays.</a>

</subsection>

  </section>
 </body>
</document>


