<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC
  "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<!--
  Copyright 2007 Hippo

  Licensed under the Apache License, Version 2.0 (the  "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS"
  BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<document>
  <properties>
    <title>Project structure</title>
  </properties>
  <body>

    <section name="Project Structure">

      <span class='shortdesc'>Find your way in the Hippo CMS project.</span>

      <p>
        Hippo ECM is a <a href="http://maven.apache.org/">Maven 2</a> project consisting of
        <a href="http://maven.apache.org/guides/getting-started/index.html#How_do_I_build_more_than_one_project_at_once">
        multiple modules</a> which are hierarchically organized as shown below, each module produces exactly one
        artifact (file). Modules come in four flavors, depending on the type of artifact they create.
      </p>
      <ol>
        <li>
          <p>
            <b>JAR</b> projects create a jar file that can be used in applications.
          </p>
        </li>
        <li>
          <p>
            <b>WAR</b> projects create a web application (a war file) that can be deployed
            in a servlet server (tomcat, jetty etc.).
          </p>
        </li>
        <li>
          <p>
            <b>EAR</b> projects create an enterprise application (an ear file) that can be deployed
            in an application server (glassfish, weblogic etc.).
          </p>
        </li>
        <li>
          <p>
            <b>POM</b> projects act as 'glue' for binding together other projects,
            they don't create anything themselves
          </p>
        </li>
      </ol>
      <p>
        The figure below shows the project layout. Every node in the directory tree
        constitutes a Maven project of one of these three types.
        The <a href="http://maven.apache.org/pom.html#Maven_Coordinates">artifactId</a>
        matches the project directory layout.
      </p>
      <source>
Module                       Type      ArtifactId
------------------------------------------------------------------------
hippo-ecm                    Pom       hippo-ecm
|-- addon                    Pom       hippo-ecm-addon
|   |-- builtin              Pom       hippo-ecm-addon-builtin
|   |   |-- common           Jar       hippo-ecm-addon-builtin-common
|   |   |-- frontend         Jar       hippo-ecm-addon-builtin-frontend
|   |   |-- repository       Jar       hippo-ecm-addon-builtin-repository
|   |   `-- test             Jar       hippo-ecm-addon-builtin-test
|   |-- cms                  Pom       hippo-ecm-addon-cms
|   |   |-- browse           Jar       hippo-ecm-addon-cms-browse
|   |   |-- dashboard        Jar       hippo-ecm-addon-cms-dashboard
|   |   |-- edit             Jar       hippo-ecm-addon-cms-edit
|   |   |-- management       Jar       hippo-ecm-addon-cms-management
|   |   `-- root             Jar       hippo-ecm-addon-cms-root
|   |-- defaultcontent       Pom       hippo-ecm-addon-defaultcontent
|   |   `-- repository       Jar       hippo-ecm-addon-defaultcontent-repository
|   |-- reporting            Pom       hippo-ecm-addon-reporting
|   |   |-- frontend         Jar       hippo-ecm-addon-reporting-frontend
|   |   `-- repository       Jar       hippo-ecm-addon-reporting-repository
|   |-- reviewed-action      Pom       hippo-ecm-addon-reviewed-action
|   |   |-- common           Jar       hippo-ecm-addon-reviewed-action-common
|   |   |-- frontend         Jar       hippo-ecm-addon-reviewed-action-frontend
|   |   |-- repository       Jar       hippo-ecm-addon-reviewed-action-repository
|   |   `-- test             Jar       hippo-ecm-addon-reviewed-action-test
|   |-- standards            Pom       hippo-ecm-addon-standards
|   |   `-- frontend         Jar       hippo-ecm-addon-standards-frontend
|   |-- template             Jar       hippo-ecm-addon-template
|   |-- versioning           Jar       hippo-ecm-addon-versioning
|   |-- xinha                War       hippo-ecm-addon-xinha
|   |-- xinha-frontend       Jar       hippo-ecm-addon-xinha-frontend
|   `-- yui                  Pom       hippo-ecm-addon-yui
|-- api                      Jar       hippo-ecm-api
|-- archetypes               Pom       hippo-ecm-archetypes
|   `-- addon                Archetype hippo-ecm-archetypes-addon
|-- demo                     Pom       hippo-ecm-demo
|   |-- addon                Jar       hippo-ecm-demo-config
|   |-- all                  War       hippo-ecm-demo-skin
|   |-- site                 War       hippo-ecm-demo-test
|   `-- skin                 War       hippo-ecm-demo-ear
|-- frontend                 Pom       hippo-ecm-frontend
|   |-- engine               Jar       hippo-ecm-frontend-engine
|   |-- application          War       hippo-ecm-frontend-application
|   `-- plugins              Jar       hippo-ecm-frontend-plugins
|-- package                  Pom       hippo-ecm-package
|   |-- config               Jar       hippo-ecm-package-config
|   |-- skin                 War       hippo-ecm-package-skin
|   |-- test                 Jar       hippo-ecm-package-test
|   |-- ear                  Ear       hippo-ecm-package-ear
|   `-- war                  War       hippo-ecm-package-war
|-- quickstart               Pom       hippo-ecm-package
|   |-- ear                  Ear       hippo-ecm-quickstart-ear
|   `-- war                  War       hippo-ecm-quickstart-war
|-- repository               Pom       hippo-ecm-repository
|   |-- engine               Jar       hippo-ecm-repository-engine
|   |-- connector            Jar       hippo-ecm-repository-connector
|   `-- application          War       hippo-ecm-repository-application
`-- tools                    Pom       hippo-ecm-tools
    |-- migration            Jar       hippo-ecm-tools-migration
    |-- dropbox              Jar       hippo-ecm-tools-dropbox
    `-- testutils            Jar       hippo-ecm-tools-testutils
      </source>
    </section>

    <section name="Why so many projects?">
      <p>
        The large number of projects is a direct consequence of the fact that Hippo ECM
        has been designed from the ground up for customizability and extendability as described in the
        <a href="../custom/introduction.html">plugin</a> documentation. The repository and frontend
        engines that make up the core of Hippo ECM don't implement much functionality themselves. All 'userland'
        functionality is implemented by plugins that are loaded by the engines. See the chapter on
        <a href="../custom/reference/repository/repository_bootstrap.html">Bootstrapping the repository</a> for
        further information about this subject.
      </p>
    </section>

    <section name="Addon">
      <p> Plugins are bundled in so called addons which are simple Jar projects under the 'addon'
        directory. </p>
      <ul>
        <li><b>cms</b> is a bundling of all frontend addons that together make up the main
          functional blocks of the default CMS. Each tab (perspective) in the CMS user interface has
          it's own addon.</li>

        <li><b>defaultcontent</b> is a repository addon containing some simple sample content meant
          for demonstration purposes</li>

        <li><b>reporting</b> is a bundling of a repository addon and a frontend addon which together
          implement reporting functionality for the CMS. Usage examples of this addon are the
          activity and todo views on the cms-dashboard</li>

        <li><b>reviewed-action</b> is a
          workflow addon, it implements all business and GUI logic around the document lifecycle:
          reviewing, (un)publishing etc. It is a bundling of three addons: a repository
          addon implementing the business logic, a frontend addon bundling some frontend plugins for user
          interaction and a common addon for the interface between the two. It also contains a separate
          test project.</li>

        <li><b>builtin</b> is also a workflow addon, it differs from other workflow addons in the
          fact that it's business logic is implemented by the repository engine itself instead of
          in a separate pluggable jar. Note that these builtin workflow steps are very generic and
          low-level and should not be accessed directly. They should only be called indirectly from
          other workflow plugins as part of a chain of workflow steps.</li>

        <li><b>standards-frontend</b> contains a collection of shared frontend plugins.
          This addon acts as a parking place for often used, shared frontend code that
          doesn't really belong in the frontend engine itself. For instance, all cms-*
          addons contain a Perspective plugin (BrowsePerspective, EditPerspective, ...),
          so it makes sense to have a common baseclass somewhere.</li>

        <li><b>template</b> is a frontend addon that implements the document template editor</li>

        <li><b>versioning</b> is a frontend addon that contains plugins for interacting with
          document versioning implemented by the repository</li>

        <li><b>xinha and xinha-frontend</b> are frontend addons that together make up the Xinha HTML
          editor.</li>

        <li><b>yui</b> is a frontend addon implementing Drag&amp;Drop functionality and other
          javascript magic.</li>
      </ul>
      <subsection name="Dependencies between addons">
        <p> 
        
          Because addons are ordinary java projects built with Maven it is very easy to add
          any direct dependencies between addons (by putting an entry in the addons pom file)
          that may seem a good idea at the time. 
          
          The problem is that this runs completely against the idea of addons being pluggable.
          Every dependency between two addons effectively binds them together, and when that
          happens there is no good reason anymore why you shouldn't simply merge the two.
          This in turn will reduce customizability and extendability.
        <br/><br/>
                
          Repository addons never need to have direct dependencies on each other. Even in the
          case of one workflow calling another this is not done by a direct Java call,
          but via 'workflow chaining'.    
        <br/><br/>
          
          'Application level' frontend addons should never directly depend on each other.
          These are the addons that bundle the high level plugins that make up a user application.
          For the CMS these are the addons under <b>addon-cms</b>. Frontend plugins can interact
          with each other via the plugin
          <a href="../custom/reference/frontend/frontend_plugin_communication.html">communication model</a>
          offered by the frontend engine.
        <br/><br/>
          
          On the other hand completely forbidding all direct dependencies between addons prohibits code
          reuse. Therefore two frontend addons have been singled out that all
          other frontend addons may have direct dependencies on: Those are the <b>yui</b> addon
          that contains wicket behaviours that perform all kinds of javascript magic that any
          'application level' addon would like to use, and the <b>standards-frontend</b> addon
          that holds often used, shared frontend code.
        <br/><br/>
          
          To make a long story short: Currently there are very few Java dependencies between addons
          and we're planning to keep it that way. 
        </p>
      </subsection>

      <subsection name="Finding your way">
        <p>
          In order to help you find your way some simple naming conventions
          are used:
        </p>
        <ul>
          <li>The maven artifactId matches the project directory layout</li>
          <li>Wicket frontend classes in frontend plugin addon-foo-bar are in package org.hippoecm.frontend.plugins.foo.bar</li>
        </ul>
      </subsection>
    </section>


    <section name="Repository">
      <p>
      </p>
      <ul>
        <li><b>engine</b> </li>
        <li><b>connector</b></li>
        <li><b>application</b> </li>
      </ul>
    </section>

    <section name="Frontend">
      <p>
      </p>
      <ul>
        <li><b>engine</b></li>
        <li><b>plugins</b></li>
        <li><b>application</b></li>
      </ul>
    </section>


    <section name="Package">
      <p>
      </p>
    </section>

    <section name="Archetypes">
      <p>
      </p>
    </section>

    <section name="Tools">
      <p>
      </p>
    </section>


    <section name="Api">
      <p>
      </p>
    </section>


  </body>
</document>


