Index: jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventConsumer.java
===================================================================
*** jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventConsumer.java	(revision 923523)
--- jackrabbit-core/src/main/java/org/apache/jackrabbit/core/observation/EventConsumer.java	(working copy)
***************
*** 292,298 ****
       * @throws RepositoryException
       */
      private boolean canRead(EventState eventState) throws RepositoryException {
!         Path targetPath = pathFactory.create(eventState.getParentPath(), eventState.getChildRelPath().getName(), eventState.getChildRelPath().getNormalizedIndex(), true);
!         return session.getAccessManager().canRead(targetPath);
      }
  }
--- 292,297 ----
       * @throws RepositoryException
       */
      private boolean canRead(EventState eventState) throws RepositoryException {
!         return true;
      }
  }
Index: src/main/java/org/apache/jackrabbit/core/persistence/bundle/BundleDbPersistenceManager.java
===================================================================
*** src/main/java/org/apache/jackrabbit/core/persistence/bundle/BundleDbPersistenceManager.java	(revision 923523)
--- src/main/java/org/apache/jackrabbit/core/persistence/bundle/BundleDbPersistenceManager.java	(working copy)
***************
*** 541,547 ****
                  connectionManager.setAutoReconnect(true);
              }
          } while(blockOnConnectionLoss || trials > 0);
!         throw new ItemStateException(lastException.getMessage());
      }
  
      /**
--- 541,547 ----
                  connectionManager.setAutoReconnect(true);
              }
          } while(blockOnConnectionLoss || trials > 0);
!         throw new ItemStateException(lastException.getMessage(), lastException);
      }
  
      /**
Index: src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java
===================================================================
*** src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java	(revision 923523)
--- src/main/java/org/apache/jackrabbit/core/state/SharedItemStateManager.java	(working copy)
***************
*** 993,999 ****
                          // same UUID, i.e. the node is still referenceable.
                          if (refs.hasReferences() && !local.has(node.getNodeId())) {
                              String msg = node.getNodeId()
!                                     + ": the node cannot be removed because it is still being referenced.";
                              log.debug(msg);
                              throw new ReferentialIntegrityException(msg);
                          }
--- 993,1003 ----
                          // same UUID, i.e. the node is still referenceable.
                          if (refs.hasReferences() && !local.has(node.getNodeId())) {
                              String msg = node.getNodeId()
!                                     + ": the node cannot be removed because it is still being referenced from";
!                             for(Iterator refsIter=refs.getReferences().iterator(); refsIter.hasNext(); ) {
!                                 PropertyId propertyId = (PropertyId) refsIter.next();
!                                 msg += " " + propertyId;
!                             }
                              log.debug(msg);
                              throw new ReferentialIntegrityException(msg);
                          }
Index: src/main/java/org/apache/jackrabbit/core/ItemImpl.java
===================================================================
*** src/main/java/org/apache/jackrabbit/core/ItemImpl.java	(revision 923523)
--- src/main/java/org/apache/jackrabbit/core/ItemImpl.java	(working copy)
***************
*** 1104,1110 ****
                  // update operation succeeded
                  succeeded = true;
              } catch (StaleItemStateException e) {
!                 throw new InvalidItemStateException(e.getMessage());
              } catch (ItemStateException e) {
                  throw new RepositoryException(
                          "Unable to update item: " + this, e);
--- 1104,1110 ----
                  // update operation succeeded
                  succeeded = true;
              } catch (StaleItemStateException e) {
!                 throw new InvalidItemStateException(e.getMessage(), e);
              } catch (ItemStateException e) {
                  throw new RepositoryException(
                          "Unable to update item: " + this, e);
