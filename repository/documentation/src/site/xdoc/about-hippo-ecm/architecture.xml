<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <author>Hippo</author>
        <title>Hippo ECM Documentation: Architecture</title>
    </properties>
    <!-- Optional HEAD element, which is copied as is into the XHTML <head> element -->
    <head>
        <meta />
    </head>
    <body>
        <!-- The body of the document contains a number of sections -->
        <section name="Hippo ECM Architecture">
            <subsection name="Overview">
                <img src="../images/components-architecture.jpg"/>
                <p>
                    The Hippo Repository has three main layers as illustrated with the diagram above. 
                    The yellow layer represents the persistence layer, consisting of a database and a 
                    lucene index. This is where all the actual data is stored. The blue layer represents 
                    the main engine. The blue layer is where all the logic is done. The green layer is the 
                    API layer. All applications that are connected to the Hippo Repository use these APIs to 
                    communicate with the Hippo Repository. 
                </p>
            </subsection>
            
            <subsection name="JCR 1.0 API">
                The JCR 1.0 API is a fully compliant with <a href="http://jcp.org/aboutJava/communityprocess/review/jsr170/index.html" alt="JSR 170">JSR 170</a>.    
            </subsection>
            
            <subsection name="The Decorator">
                <p>
		    The decorator bundles the individual APIs such of for the OCM, document and workflow API into the JCR API.
		    Also provides JCR compliance for faceted search, faceted references and additional facilities to handle
		    access to the same data in multiple paths of the JCR node tree.
                </p>
            </subsection>
            
            <subsection name="Document API">
		<p>
                    Although all information is accessible through the JCR interface, a convienience API is accessible which
		    allows access to the data in the JCR node tree as logical units, rather than single nodes and properties
		    the document API provides facilities to this end, which use the OCM layer amongst others.
		</p>
            </subsection>
            
            <subsection name="Workflow API">
		<p>
                    The workflow API provides access to obtain applicable workflow on selected information in the repository.
		    Workflow is exposed as an interface to clients, while execution of methods in the interface is executed
		    in the repository itself.
		</p>
            </subsection>
            
            <subsection name="OCM Engine">
		<p>
                    The OCM Engine allows modules to access information available not just as a set of properties on nodes, but
		    also mapped to and from regular Java objects, which can be user defined.
		</p>
            </subsection>
            
            <subsection name="Virtual Node Engine">
                <p>
		    Exposes faceted search and faceted reference as regular hierarchical nodes and handles mirrored persitency
		    of the nodes that are exposed in multiple parts of the JCR tree.
		</p>
            </subsection>
            
            <subsection name="Hippo Facet Engine">
                <p>
                    Hippo Facet Engine works out of the box, and does not need any configuration to start with. 
                    Browsing through authorized faceted navigation gives you multiple ordered views with the number of occurences on your (unstructured)
                    physical data, instead of the classical single, pre-determined, hierarchical or taxonomic order.
                    The facet engine works through intelligent indexing in <a href="#Lucene">Apache Lucene</a>, and is extremely
                    fast, as if you are browsing through a (fast cached) File System. 
                </p>
                <p>
                    The Facet Engine can be configured if fast faceted browsing on some indirect value, like the week number of
                    a date, is needed. See <a href="../configuration_files/searchindex.html">Search Index</a> at the bottom.
                </p>
            </subsection>
            
            <subsection name="Databases">
                The database is used to store the actual content. A wide range of databases is supported, 
                such as: MySQL, Oracle, MS SQL, Derby and PostgreSQL. 
            </subsection>
            
            <subsection name="Lucene">
                <p>
                    Content and meta data is indexed through implementation of <a href="http://lucene.apache.org/java/docs/">Apache Lucene 2.2.0</a> search engine library.
                    It is a scalable, high-performance indexing, accurate and efficient search algorithm cross-platform Open Source application, with a strong
                    prospering community. 
                </p>
                <p>
                    Some of the possible searches through Lucene that are enabled are listed below
                    <ol>
                        <li>and/not/or queries</li>
                        <li>faceted searching</li>
                        <li>phrase queries</li>
                        <li>wildcard queries</li>
                        <li>proximity queries</li>
                        <li>fuzzy queries</li>
                        <li>range queries</li>
                        <li>synonym searches</li>
                        <li>similarity searches</li>
                        <li>spellchecker / did you mean</li>
                    </ol> 
                </p>
            </subsection>
        </section>
        
    </body>
</document>
